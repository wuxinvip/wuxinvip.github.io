<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>负载均衡 on 无心技术簿</title>
    <link>https://www.wuxinvip.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
    <description>Recent content in 负载均衡 on 无心技术簿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.wuxinvip.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>nginx-controller</title>
      <link>https://www.wuxinvip.com/blog/load-balance/nginx-controller/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/nginx-controller/</guid>
      <description> 好用软件推荐 nginx-plus监控 官方网站-nginx-controller
  密码加密 图谱   简介  NGINX Controller是所有NGINX Plus实例的集中管理平台。 使用Controller，您可以在多云环境中轻松管理多个NGINX Plus服务器。 使用直观的向导样式界面，您可以创建NGINX Plus的新实例，并集中配置负载平衡，URL路由和SSL终止等功能。 Controller具有丰富的监控和警报功能，有助于确保应用程序的可用性，性能和可靠性。 Controller基于最佳实践提供对200个关键指标和抢先推荐的深入可见性， 使ITOps和DevOps团队能够首先避免性能问题，并解决可能出现的任何问题。  功能 实时监控和警报
获得关于应用程序性能的重要见解：
 关键指标的图表，例如每秒请求数，活动连接数，带宽使用情况 根据预定义的阈值提醒100多个指标，如CPU使用率，400/500错误和运行状况检查失败 使用REST API轻松集成您选择的任何监控工具  仪表板
使用以下命令快速监控NGINX plus实例并对其进行故障排除：
 概述仪表板，用于汇总负载均衡器中的指标 应用程序健康评分，用于衡量成功请求和及时响应 可自定义的仪表板，用于监控特定于您的环境的指标  先发制人的建议
使用内置配置分析器获取：
 基于成千上万客户的学习，增强了性能和安全性 通过遵循内置的最佳实践来获得更好的SLA。  抢先和可行的建议：
 组态 安全 SSL状态  简化的配置管理
导航一个简单直观的向导式用户界面，用于：
 NGINX Plus配置的指导工作流程 负载平衡器的按钮部署 流量路由到上游服务器 SSL密钥和证书管理  政策驱动的管理
通过开发多个特定于环境的策略来加速应用程序部署。创建配置环境：
 分期 生产 具体业务范围  </description>
    </item>
    
    <item>
      <title>nginx-plus</title>
      <link>https://www.wuxinvip.com/blog/load-balance/nginx-plus/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/nginx-plus/</guid>
      <description>好用软件推荐 简化部署、多云环境更容易发现服务的故障 结合nginx-controller非常好用软件 官方网站-nginx-plus
简介  NGINX Plus是一个基于开源NGINX构建的软件负载均衡器，Web服务器和内容缓存。 NGINX Plus在开源产品的基础上提供独家的生产就绪功能，包括会话持久性，通过API配置和主动健康检查。 使用NGINX Plus代替硬件负载均衡器，获得创新的自由，而不受基础设施的限制。  功能 负载均衡器
使用软件扩展传统的负载平衡：
 HTTP，TCP和UDP负载平衡 使用URI，cookie，args等进行第7层请求路由 基于cookie的会话持久性* 状态代码和响应正文的主动运行状况检查* 使用DNS *进行服务发现  内容缓存
使用为世界上最大的CDN提供支持的相同缓存：
 缓存静态和动态内容 通过微处理提高动态内容性能 在后台重新验证时提供“陈旧”内容以提高性能 覆盖或设置Cache‑Control标题 使用缓存清除API轻松管理缓存*  网络服务器
以无与伦比的速度和效率交付静态资产：
 同时处理数十万客户 使用比其他Web服务器少90％的内存 反向代理多个协议：HTTP，gRPC，Memcached，PHP-FPM，SCGI，uwsgi 流HTTP视频：FLV，HDS，HLS，MP4 支持HTTP / 2服务器推送的HTTP / 2网关  安全控制
保护您的应用：
 请求/连接限制 双栈RSA / ECC SSL卸载 IP访问控制列表（ACL） API和OpenID Connect单点登录（SSO）的JWT身份验证* NGINX WAF动态模块*  动态模块
动态插入其他功能：
 用于JavaScript配置的nginScript模块 GeoIP模块按IP地址定位用户（需要MaxMind GeoIP数据库） 用于编译自己的自定义模块的构建工具 单点登录模块：ForgeRock，IDF Connect和Ping Identity * 动态模块库*  监控</description>
    </item>
    
    <item>
      <title>负载均衡</title>
      <link>https://www.wuxinvip.com/blog/load-balance/total/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/total/</guid>
      <description>负载均衡起源
将用户请求通过各种算法、均匀的分配到各个服务器上、以保证最大用户量的支撑、 同时服务实例又不会因为请求过载而gg  负载均衡工作模式
说起负载均衡工作模式就得从网络请求说起、因为他工作于用户到服务器的请求路径上 目前基本网络协议 http、【七层】 物理、数据链路、网络、应用层、等等、、、、 基于物理层的 就算是硬件负载均衡设备、在网卡端口上设置算法、均衡服务实例请求量 基于网络层的 一般较软件负载均衡设备 常用的 ：nginx 工作在 4和7层 既有网络层【端口监听】、也有应用层【端口转发】    负载均衡   </description>
    </item>
    
    <item>
      <title>负载均衡算法</title>
      <link>https://www.wuxinvip.com/blog/load-balance/algorithm/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/algorithm/</guid>
      <description>LVS十种算法 4种静态算法 1、RR 依次轮调
2、WRR 加权轮调
3、DH 目标地址hash
4、SH 源地址hash
6种动态算法 1、 LC least connection 最小调用
2、 WLC 加权重LC
3、 SED 对WLC补充、加一、让其能够比较大小
4、 NQ never queue
5、LBLC DH+LC 使用于cache群
6、LBLCR 带有复制功能的LBLC
常见负载均衡算法 随机
 public static String random() { //重新建立一个map,避免出现由于服务器上线和下线导致的并发问题 Map&amp;lt;String,Integer&amp;gt; serverMap = new HashMap&amp;lt;String,Integer&amp;gt;(); serverMap.putAll(serverWeigthMap); //获取ip列表list Set&amp;lt;String&amp;gt; keySet = serverMap.keySet(); ArrayList&amp;lt;String&amp;gt; keyList = new ArrayList&amp;lt;String&amp;gt;(); keyList.addAll(keySet); java.util.Random random = new java.util.Random(); int randomPos = random.nextInt(keyList.size()); String server = keyList.</description>
    </item>
    
    <item>
      <title>nginx</title>
      <link>https://www.wuxinvip.com/blog/load-balance/nginx/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/nginx/</guid>
      <description>原理  一个主线程负责请求分发 四个或者两个【可配置】子线程进行请求转发到端口   配置
 支持并发量
  好像是大约支持50000 Pv/s   常用命令  service nginx start service nginx stop service nginx restart nginx -t /etc/nginx/conf.d/www.conf nginx -s reload net start nginx net stop nginx   docker中使用   docker pull nginx docker nginx -t docker nginx -s reload docker service nginx start  转发配置
conf.d/upstream.conf upstream demo{ server 127.0.0.1:8080 weight=1; } default.d/location.conf location /demo/{ http_proxy:http://demo; }  多域名配置</description>
    </item>
    
    <item>
      <title>DNS负载均衡</title>
      <link>https://www.wuxinvip.com/blog/load-balance/dns/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/dns/</guid>
      <description> 域名解析 dns重定向 存储:本地.阿里云.万网dns服务器
dns 在网络上其实就是域名解析到ip的一个过程叫dns解析
本站域名 www.wuxinvip.com
解析ip 为 39.107.82.228
以此为例、过程
 1、用户请求数据、发送域名到域名解析服务器 2、将域名发送到dns服务解析器【国外顶级域名dns服务器、万网dns服务器、阿里dns服务器】 一般你的域名在哪里买的 会有相应的dns解析服务器【免费提供】 当然这个解析的过程、请求会发到一个主机器、这个机器按照不同规则、将解析 分发个各个dns解析器、然后返回域名对应的外网ip地址 用户拿个这个ip 呼叫公网上叫这个ip的服务器 建立会话  域名攻击  域名直接污染 域名间接污染 域名直接污染: 在用户请求域名的ip地址途中、通过拦截域名解析、把ip指向别的服务器、 比如很普通的、当年百度网站被指向了一个荷兰的一个ip、这就是dns劫持攻击、简单暴力直接瘫痪你的网站 域名间接污染：这个就比较复杂了、dns解析服务器也是一个梯度服务器、上游将域名解析列表发送给下游服务器 如果在上游服务器到下游服务器之间做一个拦截、那么将导致下游的dns解析全部错误、 现在的google不能访问就是这个样子、所以有了各大host访问谷歌的功能、 不过把google真正的ip解析放到自己的电脑里直接访问ip方式、也只能解决很小一部分墙问题、这些ip后续防火墙也会封掉的、 这个就涉及到国家的网络与国际链接的国际出入口的防火墙上（像我天朝“G/.F/.W/.”）、基本上也算是最大的dns污染源  </description>
    </item>
    
    <item>
      <title>maglev</title>
      <link>https://www.wuxinvip.com/blog/load-balance/maglev/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/load-balance/maglev/</guid>
      <description>简介 Google Maglev 是一个牛逼的负载均衡器，之所以牛逼，是因为它不用部署专门的物理设备，不像 LVS 一样工作在内核，它是运行在通用 Linux 服务器上的大型分布式软件系统。
  Google Maglev 工作流程   每个 Google 服务都有一个或者多个 VIP，一个 VIP 和物理 IP 的区别在于 VIP 没有绑给某个特定的网卡。
VIP 注解 Maglev 关联每个 VIP 到具体的 Endpoint，然后通过 BGP 将 VIP 宣告给上游路由器，然后路由器再把 VIP 宣告给 Google 的骨干网，这样使得 VIP 能被访问到。
流程 当用户访问 www.google.com 时：
 浏览器先发送一个 DNS 请求， DNS 服务返回 VIP。 然后浏览器尝试与该 VIP 建立连接。 当路由器接收到 VIP 数据包，通过 ECMP 将数据包路由到 Maglev 集群中的某台机器上。 当 Maglev 的机器接收到数据包， 从关联到该 VIP 的 Endpoint 中选择一个， 然后用 GRE 封包发送，外层的 IP 即 Endpoint 的物理 IP。 当 Endpoint 处理完数据包进行响应时，源地址用 VIP 填充，目的地址为用户 IP。 使用直接服务返回(Direct Server Return， DSR) ，将响应直接发送给路由器， 这样 Maglev 无需处理响应包。    Google Maglev 结构   结构 Maglev 由控制器（Controller）和 转发器（Forwarder）组成：</description>
    </item>
    
  </channel>
</rss>