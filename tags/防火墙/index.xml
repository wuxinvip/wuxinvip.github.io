<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>防火墙 on 无心技术簿</title>
    <link>https://www.wuxinvip.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/</link>
    <description>Recent content in 防火墙 on 无心技术簿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.wuxinvip.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CC防火墙</title>
      <link>https://www.wuxinvip.com/blog/github/cc-iptable/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.wuxinvip.com/blog/github/cc-iptable/</guid>
      <description>CC防火墙 github 地址 简介 CC防火墙的架构采用Flume+Kafka+Strom+Zookeeper+Mysql实现,实现异常IP的及时封停功能
组件  Flume :部署在所有的Nginx服务器上，将Nginx日志推送至Kafka中， Kafka : 临时存储Nginx的log数据 Strom ：从Kafka取数据并进行数据分析 Zookeeper ：存储CC防火墙的配置文件，并且所有部署在Squid上的客户端也注册在这个Zookeeper上。 Agent ：部署在每台Squid上，并且信息注册到Zookeeper的临时节点上，接收到封停指令后通过iptables封锁IP。  Strom拓扑  KafkaSpOut：进行Kafka数据的读取，这里为了方便与简单，并且保证顺序性Kafka内只是用一个Partion。 LogFormatBolt : 收到KafkaSpout读取出的Nginx日志后进行格式化处理，并在此使用纯真库进行IP GEO匹配 IpAnalysis ： 几乎所有的逻辑都在这里实现，如IP的计数器，报警的匹配等等，为了可以动态调整防火墙的配置，配置文件保存在Zookeeper中，也是在这里Watch Zookeeper的节点，达到动态改变配置的。 BlockBolt ： 接收到IpAnalysis 发送的信息后，将异常的信息通过Thrift发送给各个Squid机器。 UnBlockBolt ： 接收到BlockBolt成功封锁后的IP后经过一段时间进行解封。 BlockReportBlot ： 做数据统计用的，对整体的作用不大 xStoreBolt ： 数据库存储Bolt，拓扑上的IPStoreBolt，BlockStoreBolt，BlockReportStoreBolt 都是使用的这一个Bolt。  Thrit封存解封接口 service CCfirewall{ string blockipbyiptables(1:string mkey,2: string ip) string unblockipbyiptables(1:string mkey,2: string ip) }  Zookeeper目录 目录树
. └─ccfirewall ├─config //存储防火墙配置信息 └─agent_list //存储Agent列表 └─iptables //使用iptables封锁的站点 ├─10.</description>
    </item>
    
  </channel>
</rss>