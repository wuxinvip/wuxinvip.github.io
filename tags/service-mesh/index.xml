<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service Mesh on 无心技术簿</title>
    <link>http://wuxinvip.github.io/tags/service-mesh/</link>
    <description>Recent content in Service Mesh on 无心技术簿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://wuxinvip.github.io/tags/service-mesh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kuberments</title>
      <link>http://wuxinvip.github.io/blog/service-mesh/service-mesh-2/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuxinvip.github.io/blog/service-mesh/service-mesh-2/</guid>
      <description>pdf 文档</description>
    </item>
    
    <item>
      <title>service-mesh简介</title>
      <link>http://wuxinvip.github.io/blog/service-mesh/service-mesh-1/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://wuxinvip.github.io/blog/service-mesh/service-mesh-1/</guid>
      <description>什么是service-mesh？ 字面理解服务网格
功能：代理服务实现微服务功能、
服务发现 负载均衡 路由 流量控制 通信可靠性 弹性可伸缩 安全 监控以及日志  有人会说 这个为服务网关 不是早就实现了吗？
答：是，是实现了、但是所有的技术都有取舍、缺陷、 为服务上的网管对服务的侵入太多、太多的网管代理还会使服务变得很臃肿、 作为对外的唯一暴露服务、他的弹性伸缩做的还比较差、需要重启服务网关重新加载服务代理  service-mesh 服务治理做了什么？
答：服务网格基于docker、kuberments Service Mesh由data plane构成，其中所有服务通过sidecar代理进行服务通信。 （所有代理相互连接形成一个Mesh，Service Mesh由此得名） 网格同时包含一个control plane——可以将所有独立的sidecar代理连接到一个分布式网络中， 并设置网格还包括一个控制平面——它将所有独立的sidecar代理连接到一个分布式网络中， 并设置由data plane指定的策略。 Control plane定义服务发现、路由、流量控制等策略。 这些策略可以是全局的，也可以是限定的。Data plane负责在通信时应用和执行这些策略。  service-mesh 与 spring-cloud
service-mesh 是一套全新的服务网格系统、不渗入原有代码 使用代理slipder完成服务代理 请求 spring-cloud spring家族 面对现有组建众多复杂性、打造出一个cloud专版、 理论点：连接一切、集成市场主流应用 两者都是在为微服务做着自己的方向、互不侵犯、互不融合、各有各的目标和愿景 现有体系下 都在上云、很多确实都是在 先上springcloud 再上service-mesh 最起码等待实际生产环境的验证  原文地址
资料地址</description>
    </item>
    
  </channel>
</rss>