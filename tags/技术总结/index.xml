<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术总结 on 无心技术簿</title>
    <link>https://wuxinvip.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 技术总结 on 无心技术簿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wuxinvip.github.io/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一个HTTP请求究竟发生了什么</title>
      <link>https://wuxinvip.github.io/blog/technical-summary/technical-summary-1/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wuxinvip.github.io/blog/technical-summary/technical-summary-1/</guid>
      <description>这个问题 去年 分析过一次
1、首先 请求从浏览器出发 2、到达 服务器 nginx 3、nginx分发给 各个服务容器 tomcat 4、tomcat 把请求发给 服务系统
5、服务 接收请求 由前端控制器 struts 或者 springmvc 接收 6、进行业务控制 service 7、获取业务数据 dao层 查询db 并返回 数据 8、数据 反向 dao &amp;mdash;-service&amp;mdash;controller 9、最后由springmvc 返回 不经历nginx 返回到浏览器
那么今年 结合新了解的 服务 更新这个列表
首先建立连接 【tcp ip 协议 】 1、三次握手 【过程】 2、经过的信息 源地址 ip 发送 一个请求连接包 到 目标地址 3、目标服务器 接收到信息 返回数据包 表明连接成功 可以继续发送请求
请求建立后 发送 https请求服务 服务会先到 目标地址的linux服务器 linux 先到网卡 网卡把请求 发给 linux端口服务 如果还有LVS负载均衡服务等服务、会把请求发送给负载服务器 如果没有LVS服务器 那么服务进入nginx等应用层负载均衡服务 nginx服务分发给各个端口 端口内是真是服务的地址</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://wuxinvip.github.io/blog/technical-summary/technical-summary-3/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wuxinvip.github.io/blog/technical-summary/technical-summary-3/</guid>
      <description>梳理一下脑子里的东西按点整理一下
消息中间件，ActiveMQ.Kafka.ZeroMQ.RabbitMQ.RocketMQ
服务治理Dubbo.eureka.
服务网springcloud
cpu线程
docker容器
负载均衡lvs radware nginx keepalived
端口转发，网卡驱动
jvm内存 . 堆.栈 规则 一个线程会占用掉多少内存.一个对象会占用多少内存
javac 编译后文件 字节码文件
数据库mysql.alisql.oracle (并发.事物.存储过程)
Nosql.redis.memcached.ecache.mongdb
算法、负载均衡算法，缓存淘汰算法，排序算法，数据整理算法
uml设计.部署图，流程图，ER图，时序图。
搜索引擎
权限架构
IO:AIO　BIO NIO　消息流　Netty
怎么讲呢 今年大脑经历了大量信息的冲击.有些东西可能会很快忘记.留下的只有感悟.经验
总结.构建知识体系. 分流:负载均衡(软硬件).算法(随机.权重.最小调用). 软件:nginx.vortex.radware 硬件:LVS.F5 缓存: Redis. Memcached. Mongdb. ehcache 问题:缓存击穿.缓存同步 并发.线程. 数据库:mysql.AliSQL 容量.并发线程.事物提交.存储过程 java基本功.io.util.sql. 主流中间件: RPC:dubbo. eureka 消息中间件rocketmq.rabbitmq.zeromq. 技术架构:springcloud 服务架构:SOA  渗透: 1.基本工具使用 比如wifi劫持.https劫持.session劫持. 1.5.网站探测:whois.钟馗之眼. 2.跳点搭建.vpn.或者直接控制肉鸡进行跳点 3.主机扫描.漏洞扫描.关注国家网络安全网发布的漏洞. 4.脚本攻击.shell脚本 python脚本 5.日志清除.  今日起 关注人工智能、进军人工智能。以备将来使用。</description>
    </item>
    
    <item>
      <title>技术发展</title>
      <link>https://wuxinvip.github.io/blog/technical-summary/technical-summary-0/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wuxinvip.github.io/blog/technical-summary/technical-summary-0/</guid>
      <description>从qq的点对点通信 到微博的多人群聊话题 到电商 人类进化就有的课题&amp;ndash;交易 交易的大量订单促使了&amp;ndash;数据分析 数据分析的性能要求&amp;ndash;出现了云计算 云计算的产生又引发了&amp;ndash;人工智能 【人工智能就是根据数据分析做出一个合理的判断、大概模式就是 从一个大的数据库里寻找最合理的返回答案】
那么下一个阶段是什么？</description>
    </item>
    
    <item>
      <title>技术负责人应有的几项要求</title>
      <link>https://wuxinvip.github.io/blog/technical-summary/technical-summary-2/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wuxinvip.github.io/blog/technical-summary/technical-summary-2/</guid>
      <description>1、把控进度 2、把控风险 3、任务分发【开发量分配】 4、需求分析、需求拆解【功能可实现性功能实现周期预估】、需求合理性判断 5、技术过关【架构、细节、各个组件的选型】</description>
    </item>
    
    <item>
      <title>高并发</title>
      <link>https://wuxinvip.github.io/blog/technical-summary/technical-summary-4/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wuxinvip.github.io/blog/technical-summary/technical-summary-4/</guid>
      <description>分布式，服务SOA，集群
建个好的表结构，降低业余逻辑代码量，因为多一行代码，多一份危险，简单到极致的增删改最最能抗住高并发的
申明:spring cloud 1.0 就经过了千万级别用户洗礼才发布的</description>
    </item>
    
  </channel>
</rss>