<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>上善若水の技术簿</title>
  
  <subtitle>时光荏苒、不浮青春.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wuxinvip.com/"/>
  <updated>2019-05-28T11:06:08.657Z</updated>
  <id>https://www.wuxinvip.com/</id>
  
  <author>
    <name>上善若水</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jdk内存模型</title>
    <link href="https://www.wuxinvip.com/2019/05/26/jdk/jdk-model/"/>
    <id>https://www.wuxinvip.com/2019/05/26/jdk/jdk-model/</id>
    <published>2019-05-26T00:00:00.000Z</published>
    <updated>2019-05-28T11:06:08.657Z</updated>
    
    <content type="html"><![CDATA[<p>#8个原子操作<br>针对jvm主内存与工作内存的数据操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lock----锁定</span><br><span class="line">unlock----释放锁</span><br><span class="line">read----读</span><br><span class="line">write----写</span><br><span class="line">load----加载</span><br><span class="line">assign----赋值</span><br><span class="line">use----使用</span><br><span class="line">store----写入主内存</span><br></pre></td></tr></table></figure></p><p>特例：<br>long、double、64为内存、在32为虚拟机中分两次操作、<br>load、store、read、write都不是源自操作</p><p>#8个规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、不允许read、load、store、write单独出现</span><br><span class="line">2、不允许thread丢弃assign</span><br><span class="line">3、不允许任何一线程、没有assign的数据 从工作内存store到主内存</span><br><span class="line">4、一个新变量只能在主内存“诞生”、对一个变量“use/store”之前、执行assign、load操作</span><br><span class="line">5、一个变量在同一时刻只允许一个线程对其进行lock、但lock可以被执行多次、lock标记为累加、多次lock需要多次unlock</span><br><span class="line"></span><br><span class="line">6、对一个变量执行lock、会清空工作内存中变量值、使用之前需要重新load、assign</span><br><span class="line">7、如果未lock、不能unlock</span><br><span class="line">8、执行unlock之前、限制性工作内存同步主内存</span><br></pre></td></tr></table></figure><p>都挺好理解、计算机这个东西、没啥难度、<br>lock是做标记为int ++  –做锁标记位</p><p>#内存可见性</p><p>1、volatile<br>2、sychronized<br>3、final</p><p>#有序性<br>1、线程内表现为串行</p><p>#无序<br>1、指令重排序【使用volatile可以阻止指令重排序】<br>2、sychronized 同一个变量、在同一时刻、允许同一线程串行进入</p><p>3、编译器静态优化会打乱代码执行顺序<br>4、jvm动态优化会打乱代码执行顺序<br>5、硬件可以打乱执行顺序以优化其性能</p><p>#线程安全<br>1、不可变—final<br>2、绝对安全<br>3、相对安全<br>4、线程兼容<br>5、独立—对程序有害</p><p>#线程发展史</p><p>1、重量级、执行标记位 加sychronized的地方、我在内存中加一个标记为、标记该方法、该对象、我正在使用、你不能使用<br>2、轻量级、reentranlock、object标记、增加了trylock（times）、可队列执行锁方法、规则名aqs、<br>4、偏向锁<br>3、算法代替锁、设计思想是、假设没有竞争、竞争时候通过算法判断、cas、拿旧值和内存原值比较、一致则修改为新值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#8个原子操作&lt;br&gt;针对jvm主内存与工作内存的数据操作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="jdk" scheme="https://www.wuxinvip.com/categories/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://www.wuxinvip.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>AI 机器学习发展史</title>
    <link href="https://www.wuxinvip.com/2019/05/26/ai/ai-002/"/>
    <id>https://www.wuxinvip.com/2019/05/26/ai/ai-002/</id>
    <published>2019-05-26T00:00:00.000Z</published>
    <updated>2019-05-28T11:02:42.474Z</updated>
    
    <content type="html"><![CDATA[<p>1、模型 M-P神经网络模型</p><p>2、1949 Hebb规则 刺激–》加强 训练强化</p><p>3、1957 Perception模型</p><p>4、1969 感知机模型 不能解决XOR问题</p><p>5、1982 离散网络模型、连续网络模型</p><p>6、BP算法 多层网络误差反传</p><p>7、90中期 orther竞争力学习模型 低潮</p><p>8、2006 热点 梯度消失、梯度爆炸、计算机算力提升</p><h1 id="神经元传输"><a href="#神经元传输" class="headerlink" title="神经元传输"></a>神经元传输</h1><p>特性：多输入、单输出</p><p><img src="/img/ai/神经元模型.jpg" alt="图片"></p><p>神经元先对入参数据进行求和操作、之后经过激活函数、最终得到data值</p><p>感知机 ：<br>    线程分割<br>    不能XOR 【异或】<br>    加入隐藏层 支持XOR</p><p><img src="/img/ai/神经元传递参数.jpg" alt="图片"></p><ul><li>损失函数定义</li></ul><p><img src="/img/ai/损失函数.jpg" alt="图片"></p><h1 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h1><ul><li>定义域 obj定义</li><li>操作域 赋值</li></ul><p>namescope ： 在同一个变量名不同作用效果、好处、代码配置化</p><p>placeholder：运行时赋值<br>session.run{feed.dict=”指定初始值”}</p><ul><li>训练模式 ：分批小批数据训练</li></ul><p>*深度学习</p><p>1、CNN 卷积神经网络【图像识别】</p><p>流程：【卷积过程依据特征粒度（特征粒度自己创造的词汇）】<br>输入-》卷积-》池化-》卷积-》池化-》全连接</p><p>2、循环神经网络【语言识别、股票预测】</p><p>第一个如参值参与后边所有数据入参</p><p><img src="/img/ai/循环神经网络.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、模型 M-P神经网络模型&lt;/p&gt;
&lt;p&gt;2、1949 Hebb规则 刺激–》加强 训练强化&lt;/p&gt;
&lt;p&gt;3、1957 Perception模型&lt;/p&gt;
&lt;p&gt;4、1969 感知机模型 不能解决XOR问题&lt;/p&gt;
&lt;p&gt;5、1982 离散网络模型、连续网络模型&lt;/p&gt;

      
    
    </summary>
    
      <category term="AI" scheme="https://www.wuxinvip.com/categories/AI/"/>
    
    
      <category term="AI" scheme="https://www.wuxinvip.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>数据库链接已关闭</title>
    <link href="https://www.wuxinvip.com/2019/05/24/exception/exception-5/"/>
    <id>https://www.wuxinvip.com/2019/05/24/exception/exception-5/</id>
    <published>2019-05-24T00:00:00.000Z</published>
    <updated>2019-05-22T03:13:56.531Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Database access problem. Killing off this connection and all remaining connections </span><br><span class="line">    in the connection pool. SQL State = 08S01</span><br><span class="line"></span><br><span class="line"> org.springframework.transaction.CannotCreateTransactionException: </span><br><span class="line">    Could not open JPA EntityManager for transaction; nested exception is javax.persistence.</span><br><span class="line">        PersistenceException: java.sql.SQLException: Connection is closed!</span><br></pre></td></tr></table></figure><p>原因： DBA数据库对连接时间比程序中的连接时间敏感得多、导致数据库连接在数据库端被关闭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="exception" scheme="https://www.wuxinvip.com/categories/java/exception/"/>
    
    
      <category term="exception" scheme="https://www.wuxinvip.com/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>linux 排查命令</title>
    <link href="https://www.wuxinvip.com/2019/05/15/shell/shell-7/"/>
    <id>https://www.wuxinvip.com/2019/05/15/shell/shell-7/</id>
    <published>2019-05-14T16:00:00.000Z</published>
    <updated>2019-05-28T09:33:57.767Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="shell">pid=11683<span class="meta">#</span><span class="bash">命令查看该进程的线程情况</span>ps -mp pid -o THREAD,tid,timetid 转为 16进制printf "%x\n" 67661a6e<span class="meta">#</span><span class="bash">使用jstack 查看线程使用情况</span>jstack 11683 | grep 2df4 -A 30"Thread-38" #51 daemon prio=5 os_prio=0 tid=0x00007f96ec675000 nid=0x2df4 runnable [0x00007f970065a000]<span class="meta">#</span><span class="bash">打印线程信息</span>jstack -l 11683 &gt; /logs/dump.txt<span class="meta">#</span><span class="bash">打印对象信息【死锁信息】</span>jstack -m 11683 &gt; /logs/dump.txt<span class="meta">#</span><span class="bash">IO使用率</span>iostat 5 <span class="meta">#</span><span class="bash">系统使用率</span>vmstat 5<span class="meta">#</span><span class="bash">网络使用率</span>nicstat 5<span class="meta">#</span><span class="bash">cpu 使用率</span>typeperf -si | "System\Processor\Queue\Length"jstat pid jstat -option pidoption:</code></pre><p>jstat pid<br>jstat -option pid</p><p>option:</p><pre><code>gc gcnewgcoldgc causegc capacitygc old capacitygc perm capacitygc utilgc new capacityprint compilationcompilerclass</code></pre><p>jmap option pid</p><pre><code>-permstat-histo-J-d64 -heap</code></pre><p>其他命令</p><pre><code>jcmdjconsolejhatjmapjinfojstatjstackjvisualvm</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;pid=11683

&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;命令查看该进程的线程情况&lt;/span&gt;
ps -mp pid -o THREAD,tid,time

tid 转为 
      
    
    </summary>
    
      <category term="shell" scheme="https://www.wuxinvip.com/categories/shell/"/>
    
    
      <category term="shell" scheme="https://www.wuxinvip.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>springboot logger  配置</title>
    <link href="https://www.wuxinvip.com/2019/05/12/spring-cloud/logger-config/"/>
    <id>https://www.wuxinvip.com/2019/05/12/spring-cloud/logger-config/</id>
    <published>2019-05-12T00:00:00.000Z</published>
    <updated>2019-05-06T06:18:10.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="logger-配置"><a href="#logger-配置" class="headerlink" title="logger 配置"></a>logger 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">    config:</span> <span class="attr">classpath:logback-spring.xml</span></span><br><span class="line"><span class="attr">    level:</span></span><br><span class="line"><span class="attr">        com:</span></span><br><span class="line"><span class="attr">            netflix:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">            wuxinvip:</span> <span class="string">info</span></span><br><span class="line">            <span class="string">wuxinvip.mapper:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">        org:</span></span><br><span class="line"><span class="attr">            springframework:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">        root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- For assistance related to logback-translator or configuration  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- files in general, please contact the logback user mailing list --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- at http://www.qos.ch/mailman/listinfo/logback-user             --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                                                --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- For professional support please see                            --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    http://www.qos.ch/shop/products/professionalSupport</span></span><br><span class="line"><span class="comment">      http://logback.qos.ch/translator/</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p [%c] - &amp;lt;%m&amp;gt;%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;logger-配置&quot;&gt;&lt;a href=&quot;#logger-配置&quot; class=&quot;headerlink&quot; title=&quot;logger 配置&quot;&gt;&lt;/a&gt;logger 配置&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>node--npm    命令</title>
    <link href="https://www.wuxinvip.com/2019/04/15/shell/shell-6/"/>
    <id>https://www.wuxinvip.com/2019/04/15/shell/shell-6/</id>
    <published>2019-04-14T16:00:00.000Z</published>
    <updated>2019-05-28T05:49:46.698Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="shell">tar xvf node-v10.15.3-linux-x64.tar<span class="meta">#</span><span class="bash">初始化</span>npm install<span class="meta">#</span><span class="bash">安装脚本编译</span>npm install -g typescriptnpm run build<span class="meta">#</span><span class="bash">jscheck</span>npm run check<span class="meta">#</span><span class="bash">部署dev</span>npm run dev<span class="meta">#</span><span class="bash">后台启动prod</span>npm start npm run start:redis<span class="meta">#</span><span class="bash"><span class="comment">##########</span></span>npm auditnpm update handlebars --depth 3npm auditnpm audit fix<span class="meta">#</span><span class="bash"><span class="comment">############</span></span>*   通过pm2启动管理pm2 statuspm2 start 1pm2 stop rap-server-delospm2 show rap-server-delospm2 restart 1pm2 show 1pm2 logs redis-serverpm2 logs 0pm2 show 1pm2 restart 1pm2 restart 0</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;tar xvf node-v10.15.3-linux-x64.tar



&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;初始化&lt;/span&gt;
npm install

&lt;span 
      
    
    </summary>
    
      <category term="shell" scheme="https://www.wuxinvip.com/categories/shell/"/>
    
    
      <category term="shell" scheme="https://www.wuxinvip.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>redis 锁</title>
    <link href="https://www.wuxinvip.com/2019/04/13/cache/redis-2/"/>
    <id>https://www.wuxinvip.com/2019/04/13/cache/redis-2/</id>
    <published>2019-04-13T00:00:00.000Z</published>
    <updated>2019-04-26T08:09:16.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-锁分类"><a href="#redis-锁分类" class="headerlink" title="redis 锁分类"></a>redis 锁分类</h3><ul><li>INCR、SETNX、SET</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$redis-&gt;incr($key);</span><br><span class="line">$redis-&gt;expire($key, $ttl); //设置生成时间为1秒</span><br><span class="line"></span><br><span class="line">1、 客户端A请求服务器获取key的值为1表示获取了锁</span><br><span class="line">2、 客户端B也去请求服务器获取key的值为2表示获取锁失败</span><br><span class="line">3、 客户端A执行代码完成，删除锁</span><br><span class="line">4、 客户端B在等待一段时间后在去请求的时候获取key的值为1表示获取锁成功</span><br><span class="line">5、 客户端B执行代码完成，删除锁</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$redis-&gt;setNX($key, $value);</span><br><span class="line">$redis-&gt;expire($key, $ttl);</span><br><span class="line"></span><br><span class="line">1、 客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</span><br><span class="line">2、 客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</span><br><span class="line">3、 客户端A执行代码完成，删除锁</span><br><span class="line">4、 客户端B在等待一段时间后在去请求设置key的值，设置成功</span><br><span class="line">5、 客户端B执行代码完成，删除锁</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$redis-&gt;set($key, $value, array(&apos;nx&apos;, &apos;ex&apos; =&gt; $ttl));  //ex表示秒</span><br><span class="line"></span><br><span class="line">1、 客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</span><br><span class="line">2、 客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</span><br><span class="line">3、 客户端A执行代码完成，删除锁</span><br><span class="line">4、 客户端B在等待一段时间后在去请求设置key的值，设置成功</span><br><span class="line">5、 客户端B执行代码完成，删除锁</span><br></pre></td></tr></table></figure><ul><li><p>锁临界问题</p><ul><li>解决方案 【循环锁】</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">do &#123;  </span><br><span class="line">    $timeout = 10;</span><br><span class="line">    $roomid = 10001;</span><br><span class="line">    $key = &apos;room_lock&apos;;</span><br><span class="line">    $value = &apos;room_&apos;.$roomid;  //分配一个随机的值针对问题3</span><br><span class="line">    $isLock = Redis::set($key, $value, &apos;ex&apos;, $timeout, &apos;nx&apos;);//ex 秒</span><br><span class="line">    if ($isLock) &#123;</span><br><span class="line">        if (Redis::get($key) == $value) &#123;  //防止提前过期，误删其它请求创建的锁</span><br><span class="line">            //执行内部代码</span><br><span class="line">            Redis::del($key);</span><br><span class="line">            continue;//执行成功删除key并跳出循环</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        usleep(5000); //睡眠，降低抢锁频率，缓解redis压力，针对问题2</span><br><span class="line">    &#125;</span><br><span class="line">&#125; while(!$isLock);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="封装spring-data-redis操作redis分布式锁"><a href="#封装spring-data-redis操作redis分布式锁" class="headerlink" title="封装spring-data-redis操作redis分布式锁"></a>封装spring-data-redis操作redis分布式锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 操作redis获取全局锁</span><br><span class="line">    *</span><br><span class="line">    * @param redisLock           锁的名称</span><br><span class="line">    * @param timeout        获取的超时时间</span><br><span class="line">    * @param tryInterval    多少ms尝试一次</span><br><span class="line">    * @return true 获取成功，false获取失败</span><br><span class="line">    */</span><br><span class="line">   public boolean getLock(RedisLock redisLock, long timeout, long tryInterval)&#123;</span><br><span class="line">       try&#123;</span><br><span class="line">           if(StringUtils.isEmpty(redisLock.getKey()) || StringUtils.isEmpty(redisLock.getValue()))&#123;</span><br><span class="line">               return false;</span><br><span class="line">           &#125;</span><br><span class="line">           while (true)&#123;</span><br><span class="line">               List&lt;String&gt; keys = new ArrayList&lt;&gt;(1);</span><br><span class="line">               keys.add(redisLock.getKey());</span><br><span class="line">               String result = this.execute(new RedisCallback&lt;String&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public String doInRedis(RedisConnection connection) throws DataAccessException &#123;</span><br><span class="line">                       JedisCommands commands = (JedisCommands) connection.getNativeConnection();</span><br><span class="line">                       return commands.set(redisLock.getKey(), redisLock.getValue(), &quot;NX&quot;, &quot;PX&quot;, redisLock.getLockExpireTime());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               if (StringUtils.isNotEmpty(result))&#123;</span><br><span class="line">                   return true;</span><br><span class="line">               &#125;</span><br><span class="line">               Thread.sleep(tryInterval);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;catch (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>this.execute(new RedisCallback<string>() //封装 spring-data-redis 分布式锁<br>//获取redisnativeConnection 初始化为 JedisCommands返回操作类<br>JedisCommands commands = (JedisCommands) connection.getNativeConnection();<br>//使用commands操作类设置数据锁<br>return commands.set(redisLock.getKey(), redisLock.getValue(), “NX”, “PX”, redisLock.getLockExpireTime());</string></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 释放锁</span><br><span class="line">     */</span><br><span class="line">    public void releaseLock(RedisLock redisLock) &#123;</span><br><span class="line">        final List&lt;String&gt; keys = new ArrayList(1);</span><br><span class="line">        final List&lt;String&gt; args = new ArrayList(1);</span><br><span class="line">        keys.add(redisLock.getKey());</span><br><span class="line">        args.add(redisLock.getValue());</span><br><span class="line">        Long result = this.execute(new RedisCallback&lt;Long&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Long doInRedis(RedisConnection connection) throws DataAccessException &#123;</span><br><span class="line">                Object nativeConnection = connection.getNativeConnection();</span><br><span class="line">                // 集群模式和单机模式虽然执行脚本的方法一样，但是没有共同的接口，所以只能分开执行</span><br><span class="line">                // 集群模式</span><br><span class="line">                if (nativeConnection instanceof JedisCluster) &#123;</span><br><span class="line">                    return (Long) ((JedisCluster) nativeConnection).eval(EQ_DEL_STR, keys, args);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 单机模式</span><br><span class="line">                else if (nativeConnection instanceof Jedis) &#123;</span><br><span class="line">                    return (Long) ((Jedis) nativeConnection).eval(EQ_DEL_STR, keys, args);</span><br><span class="line">                &#125;</span><br><span class="line">                return 0L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>释放锁 调用spring-data-redis封装类 ResdTemplate.excute()</p><p>返回类型初始化为 JedisCluster 或者 Jedis操作类 调用 eval方法  解锁数据</p>]]></content>
    
    <summary type="html">
    
      封装spring-data-redis操作redis分布式锁 
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="cache" scheme="https://www.wuxinvip.com/categories/java/cache/"/>
    
    
      <category term="缓存" scheme="https://www.wuxinvip.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>feign ribbon 配置</title>
    <link href="https://www.wuxinvip.com/2019/04/12/spring-cloud/feign-ribbon-config/"/>
    <id>https://www.wuxinvip.com/2019/04/12/spring-cloud/feign-ribbon-config/</id>
    <published>2019-04-12T00:00:00.000Z</published>
    <updated>2019-04-25T18:12:11.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="feign-配置"><a href="#feign-配置" class="headerlink" title="feign 配置"></a>feign 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html" target="_blank" rel="noopener">官方文档配置</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      feignName:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">        errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line"><span class="attr">        retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line"><span class="attr">        requestInterceptors:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line"><span class="attr">        decode404:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line"><span class="attr">        decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line"><span class="attr">        contract:</span> <span class="string">com.example.SimpleContract</span></span><br><span class="line"><span class="attr">      default:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">basic</span></span><br><span class="line"><span class="comment"># To disable Hystrix in Feign</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># To set thread isolation to SEMAPHORE</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 配置请求GZIP压缩</span><br><span class="line">feign.compression.request.enabled=true</span><br><span class="line"># 配置响应GZIP压缩</span><br><span class="line">feign.compression.response.enabled=true</span><br><span class="line"># 配置压缩支持的MIME TYPE</span><br><span class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="line"># 配置压缩数据大小的下限</span><br><span class="line">feign.compression.request.min-request-size=2048</span><br><span class="line"></span><br><span class="line">#熔断</span><br><span class="line">feign.hystrix.enabled=false</span><br></pre></td></tr></table></figure><h3 id="ribbon-配置"><a href="#ribbon-配置" class="headerlink" title="ribbon 配置"></a>ribbon 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NIWSServerListClassName:</span> <span class="string">com.netflix.loadbalancer.ConfigurationBasedServerList</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span></span><br><span class="line"><span class="attr">stores:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,google.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">   enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  eager-load:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    clients:</span> <span class="string">client1,</span> <span class="string">client2,</span> <span class="string">client3</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置连接超时时间</span><br><span class="line">ribbon.ConnectTimeout=3000</span><br><span class="line"># 设置读取超时时间</span><br><span class="line">ribbon.ReadTimeout=2000</span><br><span class="line"># 对所有操作请求都进行重试</span><br><span class="line">ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 对当前实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetries=1</span><br><span class="line">#切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#暂不开启重试,以防请求重复</span><br><span class="line">spring.cloud.loadbalancer.retry.enabled=false</span><br></pre></td></tr></table></figure><ul><li>这种配置是一种全局配置，就是是对所有的请求生效的，如果我想针对不同的服务配置不同的连接超时和读取超时，那么我们可以在属性的前面加上服务的名字，如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置针对hello-service服务的连接超时时间</span><br><span class="line">hello-service.ribbon.ConnectTimeout=600</span><br><span class="line"># 设置针对hello-service服务的读取超时时间</span><br><span class="line">hello-service.ribbon.ReadTimeout=6000</span><br><span class="line"># 设置针对hello-service服务所有操作请求都进行重试</span><br><span class="line">hello-service.ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 设置针对hello-service服务切换实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 设置针对hello-service服务的当前实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetries=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;feign-配置&quot;&gt;&lt;a href=&quot;#feign-配置&quot; class=&quot;headerlink&quot; title=&quot;feign 配置&quot;&gt;&lt;/a&gt;feign 配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>feign ribbon 配置</title>
    <link href="https://www.wuxinvip.com/2019/04/12/spring-cloud/hystrix-config/"/>
    <id>https://www.wuxinvip.com/2019/04/12/spring-cloud/hystrix-config/</id>
    <published>2019-04-12T00:00:00.000Z</published>
    <updated>2019-04-25T18:12:11.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="feign-配置"><a href="#feign-配置" class="headerlink" title="feign 配置"></a>feign 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html" target="_blank" rel="noopener">官方文档配置</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      feignName:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">        errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line"><span class="attr">        retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line"><span class="attr">        requestInterceptors:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line"><span class="attr">        decode404:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line"><span class="attr">        decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line"><span class="attr">        contract:</span> <span class="string">com.example.SimpleContract</span></span><br><span class="line"><span class="attr">      default:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">basic</span></span><br><span class="line"><span class="comment"># To disable Hystrix in Feign</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># To set thread isolation to SEMAPHORE</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 配置请求GZIP压缩</span><br><span class="line">feign.compression.request.enabled=true</span><br><span class="line"># 配置响应GZIP压缩</span><br><span class="line">feign.compression.response.enabled=true</span><br><span class="line"># 配置压缩支持的MIME TYPE</span><br><span class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="line"># 配置压缩数据大小的下限</span><br><span class="line">feign.compression.request.min-request-size=2048</span><br><span class="line"></span><br><span class="line">#熔断</span><br><span class="line">feign.hystrix.enabled=false</span><br></pre></td></tr></table></figure><h3 id="ribbon-配置"><a href="#ribbon-配置" class="headerlink" title="ribbon 配置"></a>ribbon 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NIWSServerListClassName:</span> <span class="string">com.netflix.loadbalancer.ConfigurationBasedServerList</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span></span><br><span class="line"><span class="attr">stores:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,google.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">   enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  eager-load:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    clients:</span> <span class="string">client1,</span> <span class="string">client2,</span> <span class="string">client3</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置连接超时时间</span><br><span class="line">ribbon.ConnectTimeout=3000</span><br><span class="line"># 设置读取超时时间</span><br><span class="line">ribbon.ReadTimeout=2000</span><br><span class="line"># 对所有操作请求都进行重试</span><br><span class="line">ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 对当前实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetries=1</span><br><span class="line">#切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#暂不开启重试,以防请求重复</span><br><span class="line">spring.cloud.loadbalancer.retry.enabled=false</span><br></pre></td></tr></table></figure><ul><li>这种配置是一种全局配置，就是是对所有的请求生效的，如果我想针对不同的服务配置不同的连接超时和读取超时，那么我们可以在属性的前面加上服务的名字，如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置针对hello-service服务的连接超时时间</span><br><span class="line">hello-service.ribbon.ConnectTimeout=600</span><br><span class="line"># 设置针对hello-service服务的读取超时时间</span><br><span class="line">hello-service.ribbon.ReadTimeout=6000</span><br><span class="line"># 设置针对hello-service服务所有操作请求都进行重试</span><br><span class="line">hello-service.ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 设置针对hello-service服务切换实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 设置针对hello-service服务的当前实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetries=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;feign-配置&quot;&gt;&lt;a href=&quot;#feign-配置&quot; class=&quot;headerlink&quot; title=&quot;feign 配置&quot;&gt;&lt;/a&gt;feign 配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>redis 规范</title>
    <link href="https://www.wuxinvip.com/2019/04/11/cache/redis-1/"/>
    <id>https://www.wuxinvip.com/2019/04/11/cache/redis-1/</id>
    <published>2019-04-11T00:00:00.000Z</published>
    <updated>2019-04-18T02:37:45.593Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px?from=timeline" target="_blank" rel="noopener">原文链接</a></p><ul><li>键值设计</li><li>命令使用</li><li>客户端使用</li><li>相关工具</li><li>附录【4.0遍历删除】</li></ul><a id="more"></a><h2 id="1、键值设计"><a href="#1、键值设计" class="headerlink" title="1、键值设计"></a>1、键值设计</h2><ul><li><p>1、key名设计</p><p>   1、可读性和可管理性</p><pre><code>以业务名 (或数据库名) 为前缀 (防止 key 冲突)，用冒号分隔，比如业务名: 表名:idugc:video:1</code></pre><p>   2、简洁性</p><pre><code>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。</code></pre><p>   3、不要包含特殊字符</p><pre><code>反例：包含空格、换行、单双引号以及其他转义字符</code></pre></li><li><p>2、value设计</p><p>   1、拒绝bigkey</p><pre><code>防止网卡流量、慢查询，string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。反例：一个包含200万个元素的list。非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan、[相关文章](http://doc.redisfans.com/key/scan.html)方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，查找方法和删除方法</code></pre><p>   2、选择适合的数据类型</p><pre><code>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)。了解下，Redis 为什么这么快？    反例：    set user: 1 :name tom    set user: 1 :age 19    set user: 1 :favor football    正例:    hmset user: 1 name tom age  19 favor football</code></pre></li><li><p>3、控制key的生命周期</p><pre><code>redis不是垃圾桶，建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</code></pre></li></ul><h2 id="2、命令使用"><a href="#2、命令使用" class="headerlink" title="2、命令使用"></a>2、命令使用</h2><ul><li><p>1、O(N)命令关注N的数量</p><p>   例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。<br>   有遍历的需求可以使用hscan、sscan、zscan、<a href="http://doc.redisfans.com/key/scan.html" target="_blank" rel="noopener">相关文章</a>代替。</p></li><li><p>2、禁用命令</p><p>   禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan、<a href="http://doc.redisfans.com/key/scan.html" target="_blank" rel="noopener">相关文章</a>的方式渐进式处理。<br>   一个致命的 Redis 命令，导致公司损失 400 万！！</p></li><li><p>3、合理使用select</p><p>   redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p></li><li><p>4、使用批量操作提高效率</p><p>   原生命令：例如mget、mset。<br>   非原生命令：可以使用pipeline提高效率。</p><p>   但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p><p>   注意两者不同：</p><p>   原生是原子操作，pipeline是非原子操作。</p><p>   pipeline可以打包不同的命令，原生做不到</p><p>   pipeline需要客户端和服务端同时支持。</p></li><li><p>5、不建议过多使用Redis事务功能</p><pre><code>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)。</code></pre></li><li><p>6、Redis集群版本在使用Lua上有特殊要求</p><p>   1、所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，</p><pre><code>必须是KEYS array, 否则直接返回error，&quot;-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS arrayrn&quot;</code></pre><p>   2、所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slotrn”</p></li><li><p>7、monitor命令</p><p>   必要情况下使用monitor命令时，要注意不要长时间使用。</p></li></ul><h2 id="3、客户端使用"><a href="#3、客户端使用" class="headerlink" title="3、客户端使用"></a>3、客户端使用</h2><ul><li><p>1、避免多个应用使用一个Redis实例<br>   不相干的业务拆分，公共数据做服务化。</p></li><li><p>2、使用连接池</p><p>   可以有效控制连接，同时提高效率，标准使用方式：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jedis = jedisPool.getResource();</span><br><span class="line">    <span class="comment">//具体的命令</span></span><br><span class="line">    jedis.executeCommand()</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">"op key &#123;&#125; error: "</span> + e.getMessage(), key, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) </span><br><span class="line">        jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、熔断功能<br>   高并发下建议客户端添加熔断功能(例如netflix hystrix)</p></li><li><p>4、合理的加密<br>   设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p></li><li><p>5、淘汰策略<br>   根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p><p>   默认策略是volatile-lru</p><pre><code>即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</code></pre><p>   其他策略如下：</p><pre><code>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。allkeys-random：随机删除所有键，直到腾出足够空间为止。volatile-random:随机删除过期键，直到腾出足够空间为止。volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息    &quot;(error) OOM command not allowed when used memory&quot;，此时Redis只响应读操作。</code></pre></li></ul><h2 id="4、相关工具"><a href="#4、相关工具" class="headerlink" title="4、相关工具"></a>4、相关工具</h2><ul><li><p>1、数据同步</p><p>redis间数据同步可以使用：redis-port</p></li><li><p>2、big key搜索</p><p>redis大key搜索工具</p></li><li><p>3、热点key寻找</p><p>内部实现使用monitor，所以建议短时间使用facebook的redis-faina<br>阿里云Redis已经在内核层面解决热点key问题</p></li></ul><h2 id="5、附录"><a href="#5、附录" class="headerlink" title="5、附录"></a>5、附录</h2><ul><li><p>1、删除 bigkey</p><pre><code>下面操作可以使用pipeline加速。redis 4.0已经支持key的异步删除，欢迎使用。</code></pre></li></ul><ul><li><p>1、Hash删除: hscan + hdel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBigHash</span><span class="params">(String host, <span class="keyword">int</span> port, String password, String bigHashKey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = <span class="keyword">new</span> ScanParams().count(<span class="number">100</span>);</span><br><span class="line">    String cursor = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span><br><span class="line">        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult();</span><br><span class="line">        <span class="keyword">if</span> (entryList != <span class="keyword">null</span> &amp;&amp; !entryList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entryList) &#123;</span><br><span class="line">                jedis.hdel(bigHashKey, entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="string">"0"</span>.equals(cursor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除bigkey</span></span><br><span class="line">    jedis.del(bigHashKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、List删除: ltrim </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void delBigList(String host, int port, String password, String bigListKey) &#123;</span><br><span class="line">    Jedis jedis = new Jedis(host, port);</span><br><span class="line">    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    long llen = jedis.llen(bigListKey);</span><br><span class="line">    int counter = 0;</span><br><span class="line">    int left = 100;</span><br><span class="line">    while (counter &lt; llen) &#123;</span><br><span class="line">        //每次从左侧截掉100个</span><br><span class="line">        jedis.ltrim(bigListKey, left, llen);</span><br><span class="line">        counter += left;</span><br><span class="line">    &#125;</span><br><span class="line">    //最终删除key</span><br><span class="line">    jedis.del(bigListKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、Set删除: sscan + srem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void delBigSet(String host, int port, String password, String bigSetKey) &#123;</span><br><span class="line">    Jedis jedis = new Jedis(host, port);</span><br><span class="line">    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = new ScanParams().count(100);</span><br><span class="line">    String cursor = &quot;0&quot;;</span><br><span class="line">    do &#123;</span><br><span class="line">        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams);</span><br><span class="line">        List&lt;String&gt; memberList = scanResult.getResult();</span><br><span class="line">        if (memberList != null &amp;&amp; !memberList.isEmpty()) &#123;</span><br><span class="line">            for (String member : memberList) &#123;</span><br><span class="line">                jedis.srem(bigSetKey, member);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; while (!&quot;0&quot;.equals(cursor));</span><br><span class="line"></span><br><span class="line">    //删除bigkey</span><br><span class="line">    jedis.del(bigSetKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4、SortedSet删除: zscan + zrem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void delBigZset(String host, int port, String password, String bigZsetKey) &#123;</span><br><span class="line">    Jedis jedis = new Jedis(host, port);</span><br><span class="line">    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = new ScanParams().count(100);</span><br><span class="line">    String cursor = &quot;0&quot;;</span><br><span class="line">    do &#123;</span><br><span class="line">        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams);</span><br><span class="line">        List&lt;Tuple&gt; tupleList = scanResult.getResult();</span><br><span class="line">        if (tupleList != null &amp;&amp; !tupleList.isEmpty()) &#123;</span><br><span class="line">            for (Tuple tuple : tupleList) &#123;</span><br><span class="line">                jedis.zrem(bigZsetKey, tuple.getElement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; while (!&quot;0&quot;.equals(cursor));</span><br><span class="line"></span><br><span class="line">    //删除bigkey</span><br><span class="line">    jedis.del(bigZsetKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px?from=timeline&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键值设计&lt;/li&gt;
&lt;li&gt;命令使用&lt;/li&gt;
&lt;li&gt;客户端使用&lt;/li&gt;
&lt;li&gt;相关工具&lt;/li&gt;
&lt;li&gt;附录【4.0遍历删除】&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="cache" scheme="https://www.wuxinvip.com/categories/java/cache/"/>
    
    
      <category term="缓存" scheme="https://www.wuxinvip.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>spring boot mybatis 配置</title>
    <link href="https://www.wuxinvip.com/2019/03/18/spring-cloud/spring-boot-mybatis-config/"/>
    <id>https://www.wuxinvip.com/2019/03/18/spring-cloud/spring-boot-mybatis-config/</id>
    <published>2019-03-18T00:00:00.000Z</published>
    <updated>2019-05-24T08:40:00.756Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#MYBATIS</span><br><span class="line">#---------------------------mybatis-plus-------------------------#</span><br><span class="line"># mapper 位置</span><br><span class="line">mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml</span><br><span class="line">#实体类扫描包</span><br><span class="line">#mybatis-plus.type-aliases-package=cn.wuxinvip.demo.entity</span><br><span class="line">#主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;</span><br><span class="line">mybatis-plus.global-config.id-type=1</span><br><span class="line">#字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;</span><br><span class="line">mybatis-plus.global-config.field-strategy=2</span><br><span class="line">#驼峰下划线转换</span><br><span class="line">mybatis-plus.global-config.db-column-underline=true</span><br><span class="line">#刷新mapper 调试神器，开发环境使用，部署环境必须关掉</span><br><span class="line">mybatis-plus.global-config.refresh-mapper=true</span><br><span class="line">#数据库大写下划线转换</span><br><span class="line">#mybatis-plus.global-config.capital-mode=true</span><br><span class="line">#序列接口实现类配置</span><br><span class="line">#mybatis-plus.global-config.key-generator=com.baomidou.springboot.xxx</span><br><span class="line">#逻辑删除配置</span><br><span class="line">#mybatis-plus.global-config.logic-delete-value=0</span><br><span class="line">#mybatis-plus.global-config.logic-not-delete-value=1</span><br><span class="line">#自定义填充策略接口实现</span><br><span class="line">#mybatis-plus.global-config.meta-object-handler=com.baomidou.springboot.xxx</span><br><span class="line">#自定义SQL注入器</span><br><span class="line">#mybatis-plus.global-config.sql-injector=com.baomidou.springboot.xxx</span><br><span class="line">#mybatis-plus.global-config.meta-object-handler=cn.wuxinvip.demo.base.ObjectHandler</span><br><span class="line">#下划线转驼峰</span><br><span class="line">mybatis-plus.configuration.map-underscore-to-camel-case=true</span><br><span class="line"># 缓存开关</span><br><span class="line">mybatis-plus.configuration.cache-enabled=false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>zuul 熔断和重试</title>
    <link href="https://www.wuxinvip.com/2019/03/18/spring-cloud/zuul-2/"/>
    <id>https://www.wuxinvip.com/2019/03/18/spring-cloud/zuul-2/</id>
    <published>2019-03-18T00:00:00.000Z</published>
    <updated>2019-04-17T05:43:12.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zuul-重试"><a href="#zuul-重试" class="headerlink" title="zuul 重试"></a>zuul 重试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">结合spring retry</span><br><span class="line">依赖jar导入</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework.retry/spring-retry --&gt;</span></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">    or</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/org.springframework.retry/spring-retry</span></span><br><span class="line">    compile group: <span class="string">'org.springframework.retry'</span>, name: <span class="string">'spring-retry'</span>, version: <span class="string">'1.2.4.RELEASE'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">properties</span><br><span class="line"></span><br><span class="line">    #retry</span><br><span class="line">    #是否开启重试功能</span><br><span class="line">    zuul.retryable=<span class="keyword">true</span></span><br><span class="line">    #对当前服务的重试次数</span><br><span class="line">    ribbon.MaxAutoRetries=<span class="number">2</span></span><br><span class="line">    #切换相同Server的次数</span><br><span class="line">    ribbon.MaxAutoRetriesNextServer=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">开启重试如果在短时间内大量请求重试、会造成雪崩、建议次数不要太多、根据部署的稳定性和容错性、适当调整重试次数</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="zuul-熔断"><a href="#zuul-熔断" class="headerlink" title="zuul 熔断"></a>zuul 熔断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title:</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: wuxin</span><br><span class="line"> * @date:2019/4/17 13:27</span><br><span class="line"> * @location com.wuxinvip.apigateway.fallback.DemoFallBack.class</span><br><span class="line"> */</span><br><span class="line">public class DemoFallBack extends FallBack implements FallbackProvider &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(DemoFallBack.class);</span><br><span class="line"></span><br><span class="line">    //指定要处理的 service。</span><br><span class="line">    @Override</span><br><span class="line">    public String getRoute() &#123;</span><br><span class="line">        return &quot;project-center&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //返回响应</span><br><span class="line">    @Override</span><br><span class="line">    public ClientHttpResponse fallbackResponse(String route, Throwable cause) &#123;</span><br><span class="line">        if (cause != null &amp;&amp; cause.getCause() != null) &#123;</span><br><span class="line">            String reason = cause.getCause().getMessage();</span><br><span class="line">            logger.info(&quot;Excption &#123;&#125;&quot;,reason);</span><br><span class="line">        &#125;</span><br><span class="line">        return fallbackResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title:</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: wuxin</span><br><span class="line"> * @date:2019/4/17 13:31</span><br><span class="line"> * @location com.wuxinvip.apigateway.common.FallBackUtil.class</span><br><span class="line"> */</span><br><span class="line">public class FallBack &#123;</span><br><span class="line"></span><br><span class="line">    public ClientHttpResponse fallbackResponse() &#123;</span><br><span class="line">        return new ClientHttpResponse() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line">                return HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int getRawStatusCode() throws IOException &#123;</span><br><span class="line">                return 200;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String getStatusText() throws IOException &#123;</span><br><span class="line">                return &quot;OK&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void close() &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public InputStream getBody() throws IOException &#123;</span><br><span class="line">                return new ByteArrayInputStream(&quot;The service is unavailable.&quot;.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public HttpHeaders getHeaders() &#123;</span><br><span class="line">                HttpHeaders headers = new HttpHeaders();</span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">                return headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;zuul-重试&quot;&gt;&lt;a href=&quot;#zuul-重试&quot; class=&quot;headerlink&quot; title=&quot;zuul 重试&quot;&gt;&lt;/a&gt;zuul 重试&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结合spring retry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;依赖jar导入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- https:&lt;span class=&quot;comment&quot;&gt;//mvnrepository.com/artifact/org.springframework.retry/spring-retry --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;org.springframework.retry&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;spring-retry&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;version&amp;gt;1.2.4.RELEASE&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// https://mvnrepository.com/artifact/org.springframework.retry/spring-retry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile group: &lt;span class=&quot;string&quot;&gt;&#39;org.springframework.retry&#39;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&#39;spring-retry&#39;&lt;/span&gt;, version: &lt;span class=&quot;string&quot;&gt;&#39;1.2.4.RELEASE&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #retry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #是否开启重试功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zuul.retryable=&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #对当前服务的重试次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ribbon.MaxAutoRetries=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #切换相同Server的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ribbon.MaxAutoRetriesNextServer=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;开启重试如果在短时间内大量请求重试、会造成雪崩、建议次数不要太多、根据部署的稳定性和容错性、适当调整重试次数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>zuul 配置</title>
    <link href="https://www.wuxinvip.com/2019/03/17/spring-cloud/zuul-1/"/>
    <id>https://www.wuxinvip.com/2019/03/17/spring-cloud/zuul-1/</id>
    <published>2019-03-17T00:00:00.000Z</published>
    <updated>2019-04-17T05:20:34.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zuul-配置"><a href="#zuul-配置" class="headerlink" title="zuul 配置"></a>zuul 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#url转发</span><br><span class="line">#zuul.routes.api-a-url.path=/api-a/**</span><br><span class="line">#zuul.routes.api-a-url.url=http://127.0.0.1:9000/</span><br><span class="line"></span><br><span class="line">#结合eureka 进行服务转发</span><br><span class="line">zuul.routes.agent.path=/project/**</span><br><span class="line">zuul.routes.agent.serviceId=project-center</span><br><span class="line"></span><br><span class="line">zuul.routes.user-center.path=/uc/**</span><br><span class="line">zuul.routes.user-center.serviceId=user-center</span><br><span class="line"></span><br><span class="line">zuul.routes.eureka=/eureka/**</span><br><span class="line">zuul.routes.eureka.serviceId=eureka-server</span><br><span class="line"></span><br><span class="line">#此外结合eureka </span><br><span class="line">eureka.client.service-url.defaultZone=http://eureka.wuxinvip.com/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#以及结合config配置【以下配置需要放到bootstrap.properties中】</span><br><span class="line"></span><br><span class="line">#可以通过eureka注册中心获取配置中心</span><br><span class="line">spring.application.name=api-gateway</span><br><span class="line">#eureka.client.service-url.defaultZone=http://eureka.wuxinvip.com/</span><br><span class="line">#spring.cloud.config.discovery.enabled=true</span><br><span class="line">#spring.cloud.config.discovery.service-id=CONFIG-SERVER</span><br><span class="line"></span><br><span class="line">#也可以采用此种配置获取uri地址</span><br><span class="line">spring.application.name=api-gateway</span><br><span class="line">spring.cloud.config.uri=http://config.wuxinvip.com</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="zuul自定义拦截器"><a href="#zuul自定义拦截器" class="headerlink" title="zuul自定义拦截器"></a>zuul自定义拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 无心</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:2019/4/17 13:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@location</span> com.wuxinvip.apigateway.route.DemoFilter.class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DemoFilter.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//前置过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//优先级，数字越大，优先级越低</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否执行该过滤器，true代表需要过滤</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取传来的参数accessToken</span></span><br><span class="line">        Object accessToken = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">        <span class="comment">//toke验证 可以选择连接redis、也可以选择连接权限组件、</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里return的值没有意义，zuul框架没有使用该返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;zuul-配置&quot;&gt;&lt;a href=&quot;#zuul-配置&quot; class=&quot;headerlink&quot; title=&quot;zuul 配置&quot;&gt;&lt;/a&gt;zuul 配置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#url转发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#zuul.routes.api-a-url.path=/api-a/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#zuul.routes.api-a-url.url=http://127.0.0.1:9000/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#结合eureka 进行服务转发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul.routes.agent.path=/project/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul.routes.agent.serviceId=project-center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul.routes.user-center.path=/uc/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul.routes.user-center.serviceId=user-center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul.routes.eureka=/eureka/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul.routes.eureka.serviceId=eureka-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#此外结合eureka &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eureka.client.service-url.defaultZone=http://eureka.wuxinvip.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#以及结合config配置【以下配置需要放到bootstrap.properties中】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#可以通过eureka注册中心获取配置中心&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.application.name=api-gateway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#eureka.client.service-url.defaultZone=http://eureka.wuxinvip.com/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#spring.cloud.config.discovery.enabled=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#spring.cloud.config.discovery.service-id=CONFIG-SERVER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#也可以采用此种配置获取uri地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.application.name=api-gateway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.cloud.config.uri=http://config.wuxinvip.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度遍历与广度遍历</title>
    <link href="https://www.wuxinvip.com/2019/03/16/jdk/jdk-tree-2/"/>
    <id>https://www.wuxinvip.com/2019/03/16/jdk/jdk-tree-2/</id>
    <published>2019-03-15T16:00:00.000Z</published>
    <updated>2019-04-16T05:34:56.314Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）"><a href="#二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）" class="headerlink" title="二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）"></a>二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）</h4><p><strong>  深度优先遍历：从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。 </strong></p><p><strong>  广度优先遍历：从根节点出发，在横向遍历二叉树层段节点的基础上纵向遍历二叉树的层次。 </strong><br><a id="more"></a></p><p><img src="/img/jdk/jdk-tree-2.png" alt="jdktree"></p><pre><code>DFS:A-B-D-E-C-F-GBFS:A-B-C-D-E-F-GDFS实现：数据结构：栈父节点入栈，父节点出栈，先右子节点入栈，后左子节点入栈。递归遍历全部节点即可BFS实现：数据结构：队列父节点入队，父节点出队列，先左子节点入队，后右子节点入队。递归遍历全部节点即可</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line">#include &lt;Stack&gt;</span><br><span class="line">#include &lt;Queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    char data;</span><br><span class="line">    struct Node *lchild;</span><br><span class="line">    struct Node *rchild;</span><br><span class="line">&#125; *Tree;</span><br><span class="line">//Tree 是一个node指针的类型定义</span><br><span class="line"> </span><br><span class="line">int index = 0;  //全局索引变量</span><br><span class="line">//二叉树构造器,按先序遍历顺序构造二叉树</span><br><span class="line">//无左子树或右子树用&apos;#&apos;表示</span><br><span class="line">void treeNodeConstructor(Tree &amp;root, char data[])&#123;</span><br><span class="line">    char e = data[index++];</span><br><span class="line">    if(e == &apos;#&apos;)&#123;</span><br><span class="line">        root = NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        root = (Node *)malloc(sizeof(Node));</span><br><span class="line">        root-&gt;data = e;</span><br><span class="line">        treeNodeConstructor(root-&gt;lchild, data);  //递归构建左子树</span><br><span class="line">        treeNodeConstructor(root-&gt;rchild, data);  //递归构建右子树</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//深度优先遍历</span><br><span class="line">void depthFirstSearch(Tree root)&#123;</span><br><span class="line">    stack&lt;Node *&gt; nodeStack;  //使用C++的STL标准模板库</span><br><span class="line">    nodeStack.push(root);</span><br><span class="line">    Node *node;</span><br><span class="line">    while(!nodeStack.empty())&#123;</span><br><span class="line">    node = nodeStack.top();</span><br><span class="line">cout&lt;&lt;node-&gt;data;//遍历根结点</span><br><span class="line">        nodeStack.pop();</span><br><span class="line">        if(node-&gt;rchild)&#123;</span><br><span class="line">            nodeStack.push(node-&gt;rchild);  //先将右子树压栈</span><br><span class="line">        &#125;</span><br><span class="line">        if(node-&gt;lchild)&#123;</span><br><span class="line">            nodeStack.push(node-&gt;lchild);  //再将左子树压栈</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//广度优先遍历</span><br><span class="line">void breadthFirstSearch(Tree root)&#123;</span><br><span class="line">    queue&lt;Node *&gt; nodeQueue;  //使用C++的STL标准模板库</span><br><span class="line">    nodeQueue.push(root);</span><br><span class="line">    Node *node;</span><br><span class="line">    while(!nodeQueue.empty())&#123;</span><br><span class="line">        node = nodeQueue.front();</span><br><span class="line">        nodeQueue.pop();</span><br><span class="line">        cout&lt;&lt;node-&gt;data;//遍历根结点</span><br><span class="line">        if(node-&gt;lchild)&#123;</span><br><span class="line">            nodeQueue.push(node-&gt;lchild);  //先将左子树入队</span><br><span class="line">        &#125;</span><br><span class="line">        if(node-&gt;rchild)&#123;</span><br><span class="line">            nodeQueue.push(node-&gt;rchild);  //再将右子树入队</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    //上图所示的二叉树先序遍历序列,其中用&apos;#&apos;表示结点无左子树或无右子树</span><br><span class="line">    char data[15] = &#123;&apos;A&apos;, &apos;B&apos;, &apos;D&apos;, &apos;#&apos;, &apos;#&apos;, &apos;E&apos;, &apos;#&apos;, &apos;#&apos;, &apos;C&apos;, &apos;F&apos;,&apos;#&apos;, &apos;#&apos;, &apos;G&apos;, &apos;#&apos;, &apos;#&apos;&#125;;</span><br><span class="line">    Tree tree;</span><br><span class="line">    treeNodeConstructor(tree, data);</span><br><span class="line">    printf(&quot;深度优先遍历二叉树结果: &quot;);</span><br><span class="line">    depthFirstSearch(tree);</span><br><span class="line">    printf(&quot;\n\n广度优先遍历二叉树结果: &quot;);</span><br><span class="line">    breadthFirstSearch(tree);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/mingwanganyu/article/details/72033122#commentBox" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&quot;&gt;&lt;a href=&quot;#二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&quot; class=&quot;headerlink&quot; title=&quot;二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&quot;&gt;&lt;/a&gt;二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;  深度优先遍历：从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  广度优先遍历：从根节点出发，在横向遍历二叉树层段节点的基础上纵向遍历二叉树的层次。 &lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="jdk" scheme="https://www.wuxinvip.com/categories/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://www.wuxinvip.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>遐想--定制应用</title>
    <link href="https://www.wuxinvip.com/2019/01/12/essay/essay-20/"/>
    <id>https://www.wuxinvip.com/2019/01/12/essay/essay-20/</id>
    <published>2019-01-12T00:00:00.000Z</published>
    <updated>2019-01-11T16:31:16.975Z</updated>
    
    <content type="html"><![CDATA[<p>随意遐想、马云说过、未来从普遍化走向定制化、在泛滥得互联网app中、会不会也会也有这么一条路子</p><p>现在各种app都是提供特殊的功能、</p><p>社交、微信、QQ、陌陌、<br>音乐、网易云音乐、QQ音乐、酷狗音乐、酷我音乐、百度音乐<br>等等</p><p>那么、我可不可以做一个定制应用、这个应用接入各种互联网应用后台？<br>前期没有开放接口是不是可以做页面入口、web展示或者唤起、没有的就启用应用唤醒播放、</p><p>一家一个定制应用、在这个应用中、如有付费可以统一付费等等</p><p>然后把应用商店中得app全部做上权限管理、再把统一付费的钱、使用时间差打向各个服务应用</p><p>还可以加上阅读时间计时、以提醒用户沉浸使用、防沉迷机制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随意遐想、马云说过、未来从普遍化走向定制化、在泛滥得互联网app中、会不会也会也有这么一条路子&lt;/p&gt;
&lt;p&gt;现在各种app都是提供特殊的功能、&lt;/p&gt;
&lt;p&gt;社交、微信、QQ、陌陌、&lt;br&gt;音乐、网易云音乐、QQ音乐、酷狗音乐、酷我音乐、百度音乐&lt;br&gt;等等&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="essay" scheme="https://www.wuxinvip.com/categories/essay/"/>
    
    
      <category term="随笔" scheme="https://www.wuxinvip.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>TOGAF架构认证</title>
    <link href="https://www.wuxinvip.com/2018/12/22/essay/essay-19/"/>
    <id>https://www.wuxinvip.com/2018/12/22/essay/essay-19/</id>
    <published>2018-12-22T00:00:00.000Z</published>
    <updated>2018-12-22T11:57:02.905Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一入架构深似海啊</li></ul><p><img src="/img/essay/19/19.jpg" alt="TOGAF"></p><a id="more"></a><ul><li><p>没有梦想和咸鱼有什么区别</p></li><li><p><a href="https://www.opengroup.org/togaf" target="_blank" rel="noopener">open group网站</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E7%BB%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">wiki</a></p></li><li><p><a href="http://www.opengroup.org.cn/resources?field_download_category_value=1" target="_blank" rel="noopener">TOGAF图书馆</a></p></li><li><p><a href="http://pubs.opengroup.org/architecture/togaf9-doc/arch/" target="_blank" rel="noopener">TOGAF9.2</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;一入架构深似海啊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/essay/19/19.jpg&quot; alt=&quot;TOGAF&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="essay" scheme="https://www.wuxinvip.com/categories/essay/"/>
    
    
      <category term="随笔" scheme="https://www.wuxinvip.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>编程的套路</title>
    <link href="https://www.wuxinvip.com/2018/12/12/essay/essay-18/"/>
    <id>https://www.wuxinvip.com/2018/12/12/essay/essay-18/</id>
    <published>2018-12-12T00:00:00.000Z</published>
    <updated>2018-12-11T16:32:58.179Z</updated>
    
    <content type="html"><![CDATA[<ul><li>有人讲linux底层原理是一切编程原理所在</li></ul><a id="more"></a><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><ul><li>Kafka中消息序列化使用avro序列化、avro使用注册表机制</li><li>spring 容器初始化中的bean初始化使用注册表机制</li><li><p>win系统启动也是采用了注册表机制</p></li><li><p><a href="https://www.wuxinvip.com/2018/11/10/essay/avro/">avro 详解</a></p></li><li>avro 使用注册表来存储 协议schema、以便于消费者和生产者采用双方认可解析协议 解析数据</li><li>spring bean注册中、注册每一个bean类初始化类信息、方法、常量等等、在使用的时候注入应用中使用</li><li>windows的注册表是二进制的数据库、作为整个系统和应用上的核心数据库在各个应用中共享数据</li></ul><p>套路：注册表:数据唯一识别、也可以作为协议、也可以作为数据库、<br>共同点：数据特征识别、</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><ul><li>主副本数据存储</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>hash索引【mysql】</li><li>btree索引【mysql】</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;有人讲linux底层原理是一切编程原理所在&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="essay" scheme="https://www.wuxinvip.com/categories/essay/"/>
    
    
      <category term="随笔" scheme="https://www.wuxinvip.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO浅析【转】</title>
    <link href="https://www.wuxinvip.com/2018/12/11/jdk/jdk-nio/"/>
    <id>https://www.wuxinvip.com/2018/12/11/jdk/jdk-nio/</id>
    <published>2018-12-11T00:00:00.000Z</published>
    <updated>2019-03-31T15:54:44.251Z</updated>
    
    <content type="html"><![CDATA[<ul><li>写的很不错 从浅入深、还有代码示例、还有模型示例</li></ul><h2 id="转-美团技术团队-以示版权"><a href="#转-美团技术团队-以示版权" class="headerlink" title="转-美团技术团队-以示版权"></a><a href="https://tech.meituan.com/nio.html" target="_blank" rel="noopener">转-美团技术团队-以示版权</a></h2><p>NIO（Non-blocking I/O，在Java领域，也称为New I/O），是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，成为解决高并发与大量连接、I/O处理问题的有效方式。</p><p>那么NIO的本质是什么样的呢？它是怎样与事件模型结合来解放线程、提高系统吞吐的呢？</p><p>本文会从传统的阻塞I/O和线程池模型面临的问题讲起，然后对比几种常见I/O模型，一步步分析NIO怎么利用事件模型处理I/O，解决线程池瓶颈处理海量连接，包括利用面向事件的方式编写服务端/客户端程序。最后延展到一些高级主题，如Reactor与Proactor模型的对比、Selector的唤醒、Buffer的选择等。</p><p>注：本文的代码都是伪代码，主要是为了示意，不可用于生产环境。</p><a id="more"></a><h2 id="传统BIO模型分析"><a href="#传统BIO模型分析" class="headerlink" title="传统BIO模型分析"></a>传统BIO模型分析</h2><p>让我们先回忆一下传统的服务器端同步阻塞I/O处理（也就是BIO，Blocking I/O）的经典编程模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> ExecutorService executor = Excutors.newFixedThreadPollExecutor(100);//线程池</span><br><span class="line"></span><br><span class="line"> ServerSocket serverSocket = new ServerSocket();</span><br><span class="line"> serverSocket.bind(8088);</span><br><span class="line"> while(!Thread.currentThread.isInturrupted())&#123;//主线程死循环等待新连接到来</span><br><span class="line"> Socket socket = serverSocket.accept();</span><br><span class="line"> executor.submit(new ConnectIOnHandler(socket));//为新的连接创建新的线程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConnectIOnHandler extends Thread&#123;</span><br><span class="line">    private Socket socket;</span><br><span class="line">    public ConnectIOnHandler(Socket socket)&#123;</span><br><span class="line">       this.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">      while(!Thread.currentThread.isInturrupted()&amp;&amp;!socket.isClosed())&#123;死循环处理读写事件</span><br><span class="line">          String someThing = socket.read()....//读取数据</span><br><span class="line">          if(someThing!=null)&#123;</span><br><span class="line">             ......//处理数据</span><br><span class="line">             socket.write()....//写数据</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个经典的每连接每线程的模型，之所以使用多线程，主要原因在于socket.accept()、socket.read()、socket.write()三个主要函数都是同步阻塞的，当一个连接在处理I/O的时候，系统是阻塞的，如果是单线程的话必然就挂死在那里；但CPU是被释放出来的，开启多线程，就可以让CPU去处理更多的事情。其实这也是所有使用多线程的本质：</p><ul><li>利用多核。</li><li>当I/O阻塞系统，但CPU空闲的时候，可以利用多线程使用CPU资源。</li></ul><p>现在的多线程一般都使用线程池，可以让线程的创建和回收成本相对较低。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的I/O并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。</p><p>不过，这个模型最本质的问题在于，严重依赖于线程。但线程是很”贵”的资源，主要表现在：</p><ul><li>线程的创建和销毁成本很高，在Linux这样的操作系统中，线程本质上就是一个进程。创建和销毁都是重量级的系统函数。</li><li>线程本身占用较大内存，像Java的线程栈，一般至少分配512K～1M的空间，如果系统中的线程数过千，恐怕整个JVM的内存都会被吃掉一半。</li><li>线程的切换成本是很高的。操作系统发生线程切换的时候，需要保留线程的上下文，然后执行系统调用。如果线程数过高，可能执行线程切换的时间甚至会大于线程执行的时间，这时候带来的表现往往是系统load偏高、CPU sy使用率特别高（超过20%以上)，导致系统几乎陷入不可用的状态。</li><li>容易造成锯齿状的系统负载。因为系统负载是用活动线程数或CPU核心数，一旦线程数量高但外部网络环境不是很稳定，就很容易造成大量请求的结果同时返回，激活大量阻塞线程从而使系统负载压力过大。</li></ul><p>所以，当面对十万甚至百万级连接的时候，传统的BIO模型是无能为力的。随着移动端应用的兴起和各种网络游戏的盛行，百万级长连接日趋普遍，此时，必然需要一种更高效的I/O处理模型。</p><h2 id="NIO是怎么工作的"><a href="#NIO是怎么工作的" class="headerlink" title="NIO是怎么工作的"></a>NIO是怎么工作的</h2><p>很多刚接触NIO的人，第一眼看到的就是Java相对晦涩的API，比如：Channel，Selector，Socket什么的；然后就是一坨上百行的代码来演示NIO的服务端Demo……瞬间头大有没有？</p><p>我们不管这些，抛开现象看本质，先分析下NIO是怎么工作的。</p><h3 id="常见I-O模型对比"><a href="#常见I-O模型对比" class="headerlink" title="常见I/O模型对比"></a>常见I/O模型对比</h3><p>所有的系统I/O都分为两个阶段：等待就绪和操作。举例来说，读函数，分为等待系统可读和真正的读；同理，写函数分为等待网卡可以写和真正的写。</p><p>需要说明的是等待就绪的阻塞是不使用CPU的，是在“空等”；而真正的读写操作的阻塞是使用CPU的，真正在”干活”，而且这个过程非常快，属于memory copy，带宽通常在1GB/s级别以上，可以理解为基本不耗时。</p><p>下图是几种常见I/O模型的对比：</p><p><img src="/img/jdk/nio2.jpg" alt="NIO模型对比"></p><p>以socket.read()为例子：</p><p>传统的BIO里面socket.read()，如果TCP RecvBuffer里没有数据，函数会一直阻塞，直到收到数据，返回读到的数据。</p><p>对于NIO，如果TCP RecvBuffer有数据，就把数据从网卡读到内存，并且返回给用户；反之则直接返回0，永远不会阻塞。</p><p>最新的AIO(Async I/O)里面会更进一步：不但等待就绪是非阻塞的，就连数据从网卡到内存的过程也是异步的。</p><p>换句话说，BIO里用户最关心“我要读”，NIO里用户最关心”我可以读了”，在AIO模型里用户更需要关注的是“读完了”。</p><p>NIO一个重要的特点是：socket主要的读、写、注册和接收函数，在等待就绪阶段都是非阻塞的，真正的I/O操作是同步阻塞的（消耗CPU但性能非常高）。</p><h2 id="如何结合事件模型使用NIO同步非阻塞特性"><a href="#如何结合事件模型使用NIO同步非阻塞特性" class="headerlink" title="如何结合事件模型使用NIO同步非阻塞特性"></a>如何结合事件模型使用NIO同步非阻塞特性</h2><p>回忆BIO模型，之所以需要多线程，是因为在进行I/O操作的时候，一是没有办法知道到底能不能写、能不能读，只能”傻等”，即使通过各种估算，算出来操作系统没有能力进行读写，也没法在socket.read()和socket.write()函数中返回，这两个函数无法进行有效的中断。所以除了多开线程另起炉灶，没有好的办法利用CPU。</p><p>NIO的读写函数可以立刻返回，这就给了我们不开线程利用CPU的最好机会：如果一个连接不能读写（socket.read()返回0或者socket.write()返回0），我们可以把这件事记下来，记录的方式通常是在Selector上注册标记位，然后切换到其它就绪的连接（channel）继续进行读写。</p><p>下面具体看下如何利用事件模型单线程处理所有I/O请求：</p><p>NIO的主要事件有几个：读就绪、写就绪、有新连接到来。</p><p>我们首先需要注册当这几个事件到来的时候所对应的处理器。然后在合适的时机告诉事件选择器：我对这个事件感兴趣。对于写操作，就是写不出去的时候对写事件感兴趣；对于读操作，就是完成连接和系统没有办法承载新读入的数据的时；对于accept，一般是服务器刚启动的时候；而对于connect，一般是connect失败需要重连或者直接异步调用connect的时候。</p><p>其次，用一个死循环选择就绪的事件，会执行系统调用（Linux 2.6之前是select、poll，2.6之后是epoll，Windows是IOCP），还会阻塞的等待新事件的到来。新事件到来的时候，会在selector上注册标记位，标示可读、可写或者有连接到来。</p><p>注意，select是阻塞的，无论是通过操作系统的通知（epoll）还是不停的轮询(select，poll)，这个函数是阻塞的。所以你可以放心大胆地在一个while(true)里面调用这个函数而不用担心CPU空转。</p><p>所以我们的程序大概的模样是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface ChannelHandler&#123;</span><br><span class="line">    void channelReadable(Channel channel);</span><br><span class="line">    void channelWritable(Channel channel);</span><br><span class="line"> &#125;</span><br><span class="line"> class Channel&#123;</span><br><span class="line">   Socket socket;</span><br><span class="line">   Event event;//读，写或者连接</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //IO线程主循环:</span><br><span class="line"> class IoThread extends Thread&#123;</span><br><span class="line"> public void run()&#123;</span><br><span class="line"> Channel channel;</span><br><span class="line"> while(channel=Selector.select())&#123;//选择就绪的事件和对应的连接</span><br><span class="line">    if(channel.event==accept)&#123;</span><br><span class="line">       registerNewChannelHandler(channel);//如果是新连接，则注册一个新的读写处理器</span><br><span class="line">    &#125;</span><br><span class="line">    if(channel.event==write)&#123;</span><br><span class="line">       getChannelHandler(channel).channelWritable(channel);//如果可以写，则执行写事件</span><br><span class="line">    &#125;</span><br><span class="line">    if(channel.event==read)&#123;</span><br><span class="line">        getChannelHandler(channel).channelReadable(channel);//如果可以读，则执行读事件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> Map&lt;Channel，ChannelHandler&gt; handlerMap;//所有channel的对应事件处理器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序很简短，也是最简单的Reactor模式：注册所有感兴趣的事件处理器，单线程轮询选择就绪事件，执行事件处理器。</p><h2 id="优化线程模型"><a href="#优化线程模型" class="headerlink" title="优化线程模型"></a>优化线程模型</h2><p>由上面的示例我们大概可以总结出NIO是怎么解决掉线程的瓶颈并处理海量连接的：</p><p>NIO由原来的阻塞读写（占用线程）变成了单线程轮询事件，找到可以进行读写的网络描述符进行读写。除了事件的轮询是阻塞的（没有可干的事情必须要阻塞），剩余的I/O操作都是纯CPU操作，没有必要开启多线程。</p><p>并且由于线程的节约，连接数大的时候因为线程切换带来的问题也随之解决，进而为处理海量连接提供了可能。</p><p>单线程处理I/O的效率确实非常高，没有线程切换，只是拼命的读、写、选择事件。但现在的服务器，一般都是多核处理器，如果能够利用多核心进行I/O，无疑对效率会有更大的提高。</p><p>仔细分析一下我们需要的线程，其实主要包括以下几种：</p><ul><li>事件分发器，单线程选择就绪的事件。</li><li>I/O处理器，包括connect、read、write等，这种纯CPU操作，一般开启CPU核心个线程就可以。</li><li>业务线程，在处理完I/O后，业务一般还会有自己的业务逻辑，有的还会有其他的阻塞I/O，如DB操作，RPC等。只要有阻塞，就需要单独的线程。</li></ul><p>Java的Selector对于Linux系统来说，有一个致命限制：同一个channel的select不能被并发的调用。因此，如果有多个I/O线程，必须保证：一个socket只能属于一个IoThread，而一个IoThread可以管理多个socket。</p><p>另外连接的处理和读写的处理通常可以选择分开，这样对于海量连接的注册和读写就可以分发。虽然read()和write()是比较高效无阻塞的函数，但毕竟会占用CPU，如果面对更高的并发则无能为力。</p><p><img src="/img/jdk/reactor.png" alt=""></p><h2 id="NIO在客户端的魔力"><a href="#NIO在客户端的魔力" class="headerlink" title="NIO在客户端的魔力"></a>NIO在客户端的魔力</h2><p>通过上面的分析，可以看出NIO在服务端对于解放线程，优化I/O和处理海量连接方面，确实有自己的用武之地。那么在客户端上，NIO又有什么使用场景呢?</p><p>常见的客户端BIO+连接池模型，可以建立n个连接，然后当某一个连接被I/O占用的时候，可以使用其他连接来提高性能。</p><p>但多线程的模型面临和服务端相同的问题：如果指望增加连接数来提高性能，则连接数又受制于线程数、线程很贵、无法建立很多线程，则性能遇到瓶颈。</p><h3 id="每连接顺序请求的Redis"><a href="#每连接顺序请求的Redis" class="headerlink" title="每连接顺序请求的Redis"></a>每连接顺序请求的Redis</h3><p>对于Redis来说，由于服务端是全局串行的，能够保证同一连接的所有请求与返回顺序一致。这样可以使用单线程＋队列，把请求数据缓冲。然后pipeline发送，返回future，然后channel可读时，直接在队列中把future取回来，done()就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">伪代码如下：</span><br><span class="line">class RedisClient Implements ChannelHandler&#123;</span><br><span class="line">     private BlockingQueue CmdQueue;</span><br><span class="line">     private EventLoop eventLoop;</span><br><span class="line">     private Channel channel;</span><br><span class="line">     class Cmd&#123;</span><br><span class="line">      String cmd;</span><br><span class="line">      Future result;</span><br><span class="line">     &#125;</span><br><span class="line">     public Future get(String key)&#123;</span><br><span class="line">       Cmd cmd= new Cmd(key);</span><br><span class="line">       queue.offer(cmd);</span><br><span class="line">       eventLoop.submit(new Runnable()&#123;</span><br><span class="line">            List list = new ArrayList();</span><br><span class="line">            queue.drainTo(list);</span><br><span class="line">            if(channel.isWritable())&#123;</span><br><span class="line">             channel.writeAndFlush(list);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">     public void ChannelReadFinish(Channel channel，Buffer Buffer)&#123;</span><br><span class="line">        List result = handleBuffer();//处理数据</span><br><span class="line">        //从cmdQueue取出future，并设值，future.done();</span><br><span class="line">    &#125;</span><br><span class="line">     public void ChannelWritable(Channel channel)&#123;</span><br><span class="line">       channel.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做，能够充分的利用pipeline来提高I/O能力，同时获取异步处理能力。</p><h3 id="多连接短连接的HttpClient"><a href="#多连接短连接的HttpClient" class="headerlink" title="多连接短连接的HttpClient"></a>多连接短连接的HttpClient</h3><p>类似于竞对抓取的项目，往往需要建立无数的HTTP短连接，然后抓取，然后销毁，当需要单机抓取上千网站线程数又受制的时候，怎么保证性能呢?</p><p>何不尝试NIO，单线程进行连接、写、读操作？如果连接、读、写操作系统没有能力处理，简单的注册一个事件，等待下次循环就好了。</p><p>如何存储不同的请求/响应呢？由于http是无状态没有版本的协议，又没有办法使用队列，好像办法不多。比较笨的办法是对于不同的socket，直接存储socket的引用作为map的key。</p><h3 id="常见的RPC框架，如Thrift，Dubbo"><a href="#常见的RPC框架，如Thrift，Dubbo" class="headerlink" title="常见的RPC框架，如Thrift，Dubbo"></a>常见的RPC框架，如Thrift，Dubbo</h3><p>这种框架内部一般维护了请求的协议和请求号，可以维护一个以请求号为key，结果的result为future的map，结合NIO+长连接，获取非常不错的性能。</p><h2 id="NIO高级主题"><a href="#NIO高级主题" class="headerlink" title="NIO高级主题"></a>NIO高级主题</h2><h3 id="Proactor与Reactor"><a href="#Proactor与Reactor" class="headerlink" title="Proactor与Reactor"></a>Proactor与Reactor</h3><p>一般情况下，I/O 复用机制需要事件分发器（event dispatcher）。 事件分发器的作用，即将那些读写事件源分发给各读写事件的处理者，就像送快递的在楼下喊: 谁谁谁的快递到了， 快来拿吧！开发人员在开始的时候需要在分发器那里注册感兴趣的事件，并提供相应的处理者（event handler)，或者是回调函数；事件分发器在适当的时候，会将请求的事件分发给这些handler或者回调函数。</p><p>涉及到事件分发器的两种模式称为：Reactor和Proactor。 Reactor模式是基于同步I/O的，而Proactor模式是和异步I/O相关的。在Reactor模式中，事件分发器等待某个事件或者可应用或个操作的状态发生（比如文件描述符可读写，或者是socket可读写），事件分发器就把这个事件传给事先注册的事件处理函数或者回调函数，由后者来做实际的读写操作。</p><p>而在Proactor模式中，事件处理者（或者代由事件分发器发起）直接发起一个异步读写操作（相当于请求），而实际的工作是由操作系统来完成的。发起时，需要提供的参数包括用于存放读到数据的缓存区、读的数据大小或用于存放外发数据的缓存区，以及这个请求完后的回调函数等信息。事件分发器得知了这个请求，它默默等待这个请求的完成，然后转发完成事件给相应的事件处理者或者回调。举例来说，在Windows上事件处理者投递了一个异步IO操作（称为overlapped技术），事件分发器等IO Complete事件完成。这种异步模式的典型实现是基于操作系统底层异步API的，所以我们可称之为“系统级别”的或者“真正意义上”的异步，因为具体的读写是由操作系统代劳的。</p><p>举个例子，将有助于理解Reactor与Proactor二者的差异，以读操作为例（写操作类似）。</p><h4 id="在Reactor中实现读"><a href="#在Reactor中实现读" class="headerlink" title="在Reactor中实现读"></a>在Reactor中实现读</h4><ul><li>注册读就绪事件和相应的事件处理器。</li><li>事件分发器等待事件。</li><li>事件到来，激活分发器，分发器调用事件对应的处理器。</li><li>事件处理器完成实际的读操作，处理读到的数据，注册新的事件，然后返还控制权。</li></ul><h4 id="在Proactor中实现读："><a href="#在Proactor中实现读：" class="headerlink" title="在Proactor中实现读："></a>在Proactor中实现读：</h4><ul><li>处理器发起异步读操作（注意：操作系统必须支持异步IO）。在这种情况下，处理器无视IO就绪事件，它关注的是完成事件。</li><li>事件分发器等待操作完成事件。</li><li>在分发器等待过程中，操作系统利用并行的内核线程执行实际的读操作，并将结果数据存入用户自定义缓冲区，最后通知事件分发器读操作完成。</li><li>事件分发器呼唤处理器。</li><li>事件处理器处理用户自定义缓冲区中的数据，然后启动一个新的异步操作，并将控制权返回事件分发器。</li></ul><p>可以看出，两个模式的相同点，都是对某个I/O事件的事件通知（即告诉某个模块，这个I/O操作可以进行或已经完成)。在结构上，两者也有相同点：事件分发器负责提交IO操作（异步)、查询设备是否可操作（同步)，然后当条件满足时，就回调handler；不同点在于，异步情况下（Proactor)，当回调handler时，表示I/O操作已经完成；同步情况下（Reactor)，回调handler时，表示I/O设备可以进行某个操作（can read 或 can write)。</p><p>下面，我们将尝试应对为Proactor和Reactor模式建立可移植框架的挑战。在改进方案中，我们将Reactor原来位于事件处理器内的Read/Write操作移至分发器（不妨将这个思路称为“模拟异步”），以此寻求将Reactor多路同步I/O转化为模拟异步I/O。以读操作为例子，改进过程如下：</p><ul><li>注册读就绪事件和相应的事件处理器。并为分发器提供数据缓冲区地址，需要读取数据量等信息。</li><li>分发器等待事件（如在select()上等待）。</li><li>事件到来，激活分发器。分发器执行一个非阻塞读操作（它有完成这个操作所需的全部信息），最后调用对应处理器。</li><li>事件处理器处理用户自定义缓冲区的数据，注册新的事件（当然同样要给出数据缓冲区地址，需要读取的数据量等信息），最后将控制权返还分发器。</li></ul><p>如我们所见，通过对多路I/O模式功能结构的改造，可将Reactor转化为Proactor模式。改造前后，模型实际完成的工作量没有增加，只不过参与者间对工作职责稍加调换。没有工作量的改变，自然不会造成性能的削弱。对如下各步骤的比较，可以证明工作量的恒定：</p><h4 id="标准-典型的Reactor："><a href="#标准-典型的Reactor：" class="headerlink" title="标准/典型的Reactor："></a>标准/典型的Reactor：</h4><ul><li>步骤1：等待事件到来（Reactor负责）。</li><li>步骤2：将读就绪事件分发给用户定义的处理器（Reactor负责）。</li><li>步骤3：读数据（用户处理器负责）。</li><li>步骤4：处理数据（用户处理器负责）。</li></ul><h4 id="标准-改进实现的模拟Proactor："><a href="#标准-改进实现的模拟Proactor：" class="headerlink" title="标准/改进实现的模拟Proactor："></a>标准/改进实现的模拟Proactor：</h4><ul><li>步骤1：等待事件到来（Proactor负责）。</li><li>步骤2：得到读就绪事件，执行读数据（现在由Proactor负责）。</li><li>步骤3：将读完成事件分发给用户处理器（Proactor负责）。</li><li>步骤4：处理数据（用户处理器负责）。</li></ul><p>对于不提供异步I/O API的操作系统来说，这种办法可以隐藏Socket API的交互细节，从而对外暴露一个完整的异步接口。借此，我们就可以进一步构建完全可移植的，平台无关的，有通用对外接口的解决方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">代码示例如下：</span><br><span class="line"></span><br><span class="line">interface ChannelHandler&#123;</span><br><span class="line">      void channelReadComplate(Channel channel，byte[] data);</span><br><span class="line">      void channelWritable(Channel channel);</span><br><span class="line">   &#125;</span><br><span class="line">   class Channel&#123;</span><br><span class="line">     Socket socket;</span><br><span class="line">     Event event;//读，写或者连接</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //IO线程主循环：</span><br><span class="line">   class IoThread extends Thread&#123;</span><br><span class="line">   public void run()&#123;</span><br><span class="line">   Channel channel;</span><br><span class="line">   while(channel=Selector.select())&#123;//选择就绪的事件和对应的连接</span><br><span class="line">      if(channel.event==accept)&#123;</span><br><span class="line">         registerNewChannelHandler(channel);//如果是新连接，则注册一个新的读写处理器</span><br><span class="line">         Selector.interested(read);</span><br><span class="line">      &#125;</span><br><span class="line">      if(channel.event==write)&#123;</span><br><span class="line">         getChannelHandler(channel).channelWritable(channel);//如果可以写，则执行写事件</span><br><span class="line">      &#125;</span><br><span class="line">      if(channel.event==read)&#123;</span><br><span class="line">          byte[] data = channel.read();</span><br><span class="line">          if(channel.read()==0)//没有读到数据，表示本次数据读完了</span><br><span class="line">          &#123;</span><br><span class="line">          getChannelHandler(channel).channelReadComplate(channel，data;//处理读完成事件</span><br><span class="line">          &#125;</span><br><span class="line">          if(过载保护)&#123;</span><br><span class="line">          Selector.interested(read);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   Map&lt;Channel，ChannelHandler&gt; handlerMap;//所有channel的对应事件处理器</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Selector-wakeup"><a href="#Selector-wakeup" class="headerlink" title="Selector.wakeup()"></a>Selector.wakeup()</h3><h4 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h4><ul><li><p>解除阻塞在Selector.select()/select(long)上的线程，立即返回。</p></li><li><p>两次成功的select之间多次调用wakeup等价于一次调用。</p></li><li><p>如果当前没有阻塞在select上，则本次wakeup调用将作用于下一次select——“记忆”作用。</p></li><li><p>为什么要唤醒？</p></li><li><p>注册了新的channel或者事件。</p></li><li><p>channel关闭，取消注册。</p></li></ul><p>优先级更高的事件触发（如定时器事件），希望及时处理。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Linux上利用pipe调用创建一个管道，Windows上则是一个loopback的tcp连接。这是因为win32的管道无法加入select的fd set，将管道或者TCP连接加入select fd set。</p><p>wakeup往管道或者连接写入一个字节，阻塞的select因为有I/O事件就绪，立即返回。可见，wakeup的调用开销不可忽视。</p><h3 id="Buffer的选择"><a href="#Buffer的选择" class="headerlink" title="Buffer的选择"></a>Buffer的选择</h3><p>通常情况下，操作系统的一次写操作分为两步：</p><ul><li>将数据从用户空间拷贝到系统空间。</li><li>从系统空间往网卡写。同理，读操作也分为两步：<ul><li>① 将数据从网卡拷贝到系统空间；</li><li>② 将数据从系统空间拷贝到用户空间。</li></ul></li></ul><p>对于NIO来说，缓存的使用可以使用DirectByteBuffer和HeapByteBuffer。如果使用了DirectByteBuffer，一般来说可以减少一次系统空间到用户空间的拷贝。但Buffer创建和销毁的成本更高，更不宜维护，通常会用内存池来提高性能。</p><p>如果数据量比较小的中小应用情况下，可以考虑使用heapBuffer；反之可以用directBuffer。</p><h3 id="NIO存在的问题"><a href="#NIO存在的问题" class="headerlink" title="NIO存在的问题"></a>NIO存在的问题</h3><p>使用NIO != 高性能，当连接数&lt;1000，并发程度不高或者局域网环境下NIO并没有显著的性能优势。</p><p>NIO并没有完全屏蔽平台差异，它仍然是基于各个操作系统的I/O系统实现的，差异仍然存在。使用NIO做网络编程构建事件驱动模型并不容易，陷阱重重。</p><p>推荐大家使用成熟的NIO框架，如Netty，MINA等。解决了很多NIO的陷阱，并屏蔽了操作系统的差异，有较好的性能和编程模型。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下到底NIO给我们带来了些什么：</p><p>native函数库中封装一个方法 java/direct buffer对象 来操作对外内存、避免java堆和native堆来回复制数据</p><p>本地方发栈 【执行native方法栈】</p><p>虚拟机栈   【 执行java程序使用栈】</p><ul><li>事件驱动模型</li><li>避免多线程</li><li>单线程处理多任务</li><li>非阻塞I/O，I/O读写不再阻塞，而是返回0</li><li>基于block的传输，通常比基于流的传输更高效</li><li>更高级的IO函数，zero-copy</li><li>IO多路复用大大提高了Java网络应用的可伸缩性和实用性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;写的很不错 从浅入深、还有代码示例、还有模型示例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;转-美团技术团队-以示版权&quot;&gt;&lt;a href=&quot;#转-美团技术团队-以示版权&quot; class=&quot;headerlink&quot; title=&quot;转-美团技术团队-以示版权&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://tech.meituan.com/nio.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转-美团技术团队-以示版权&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;NIO（Non-blocking I/O，在Java领域，也称为New I/O），是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，成为解决高并发与大量连接、I/O处理问题的有效方式。&lt;/p&gt;
&lt;p&gt;那么NIO的本质是什么样的呢？它是怎样与事件模型结合来解放线程、提高系统吞吐的呢？&lt;/p&gt;
&lt;p&gt;本文会从传统的阻塞I/O和线程池模型面临的问题讲起，然后对比几种常见I/O模型，一步步分析NIO怎么利用事件模型处理I/O，解决线程池瓶颈处理海量连接，包括利用面向事件的方式编写服务端/客户端程序。最后延展到一些高级主题，如Reactor与Proactor模型的对比、Selector的唤醒、Buffer的选择等。&lt;/p&gt;
&lt;p&gt;注：本文的代码都是伪代码，主要是为了示意，不可用于生产环境。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="jdk" scheme="https://www.wuxinvip.com/categories/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://www.wuxinvip.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq使用示例</title>
    <link href="https://www.wuxinvip.com/2018/12/08/message-queue/rocketmq/04/"/>
    <id>https://www.wuxinvip.com/2018/12/08/message-queue/rocketmq/04/</id>
    <published>2018-12-08T00:00:00.000Z</published>
    <updated>2018-12-09T14:03:41.724Z</updated>
    
    <content type="html"><![CDATA[<ul><li>spring cloud中集成rocketmq</li></ul><a id="more"></a><h2 id="spring-cloud中集成rocketmq"><a href="#spring-cloud中集成rocketmq" class="headerlink" title="spring cloud中集成rocketmq"></a>spring cloud中集成rocketmq</h2><p><a href="https://github.com/wuxinvip/base-cloud/tree/2.0.X-boot/message-queue" target="_blank" rel="noopener">代码地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  接收bean 将消息发送到spring event事件中进行处理 解耦数据处理</span><br><span class="line"> *  屏蔽rockemq的依赖性 可以不影响业务转换别的消息组件</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ConsumerMessageListener implements MessageListener &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(ConsumerMessageListener.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    public Action consume(Message message, ConsumeContext context) &#123;</span><br><span class="line">        System.out.println(&quot;Receive: &quot; + message);</span><br><span class="line">        try &#123;</span><br><span class="line">            logger.info(&quot;rocket 接收到消息:&#123;&#125;&quot;,message);</span><br><span class="line">            //do something..</span><br><span class="line">            applicationContext.publishEvent(new RocketmqEvent(message));</span><br><span class="line"></span><br><span class="line">            return Action.CommitMessage; //消息处理正常</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            //消费失败</span><br><span class="line">            logger.error(&quot;rocket 消息处理失败 ：&#123;&#125;&quot;,message);</span><br><span class="line">            return Action.ReconsumeLater;//消息加入重试</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收示例</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @EventListener(condition = &quot;#event.topic==&apos;your.topic&apos; &amp;&amp; #event.tag==&apos;your.tag&apos;&quot;)</span><br><span class="line">    public void MessageListener(RocketmqEvent rocketmqEvent) throws IOException &#123;</span><br><span class="line">        String string = rocketmqEvent.getMsg();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 发送bean类</span><br><span class="line"> *  引用统一发送 解耦数据处理 </span><br><span class="line"> *  屏蔽rockemq的依赖性 可以不影响业务转换别的消息组件</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class MessageQueueTemplate &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ProducerBean producerBean;</span><br><span class="line"></span><br><span class="line">    public void send(RocketmqEvent rocketmqEvent)&#123;</span><br><span class="line"></span><br><span class="line">        Message message = new Message();</span><br><span class="line">        message.setTopic(rocketmqEvent.getTopic());</span><br><span class="line">        message.setTag(rocketmqEvent.getTag());</span><br><span class="line">        message.setBody(rocketmqEvent.getMsg().getBytes());</span><br><span class="line">        producerBean.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;spring cloud中集成rocketmq&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rocketmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rocketmq/"/>
    
    
      <category term="RocketMQ" scheme="https://www.wuxinvip.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq图解</title>
    <link href="https://www.wuxinvip.com/2018/12/07/message-queue/rocketmq/03/"/>
    <id>https://www.wuxinvip.com/2018/12/07/message-queue/rocketmq/03/</id>
    <published>2018-12-07T00:00:00.000Z</published>
    <updated>2018-12-09T13:57:54.285Z</updated>
    
    <content type="html"><![CDATA[<ul><li>组件结构图</li></ul><a id="more"></a><h2 id="RocketMQ-各个角色关系"><a href="#RocketMQ-各个角色关系" class="headerlink" title="RocketMQ 各个角色关系"></a>RocketMQ 各个角色关系</h2><p><img src="/img/rocketmq/01.jpg" alt="rocketmq组件结构图"></p><ul><li>与kafka区别就是 kafka使用zk来管理服务注册、rocketmq用的自己的rpc【nameserver】</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;组件结构图&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rocketmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rocketmq/"/>
    
    
      <category term="RocketMQ" scheme="https://www.wuxinvip.com/tags/RocketMQ/"/>
    
  </entry>
  
</feed>
