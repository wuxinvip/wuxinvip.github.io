<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>上善若水の技术簿</title>
  
  <subtitle>时光荏苒、不浮青春.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wuxinvip.com/"/>
  <updated>2019-11-01T03:46:01.556Z</updated>
  <id>https://www.wuxinvip.com/</id>
  
  <author>
    <name>上善若水</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea 好用插件 plugins</title>
    <link href="https://www.wuxinvip.com/2019/10/12/essay/essay-21/"/>
    <id>https://www.wuxinvip.com/2019/10/12/essay/essay-21/</id>
    <published>2019-10-12T00:00:00.000Z</published>
    <updated>2019-11-01T03:46:01.556Z</updated>
    
    <content type="html"><![CDATA[<h4 id="阿里规则校验"><a href="#阿里规则校验" class="headerlink" title="阿里规则校验"></a>阿里规则校验</h4><ul><li>Alibaba Java Coding Guidelines</li><li><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="当前窗口地图"><a href="#当前窗口地图" class="headerlink" title="当前窗口地图"></a>当前窗口地图</h4><ul><li>CodeGlance</li><li><a href="https://plugins.jetbrains.com/plugin/7275-codeglance/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="光标跳转"><a href="#光标跳转" class="headerlink" title="光标跳转"></a>光标跳转</h4><ul><li>AceJump</li><li><a href="https://plugins.jetbrains.com/plugin/7086-acejump/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="bug查找"><a href="#bug查找" class="headerlink" title="bug查找"></a>bug查找</h4><ul><li>FindBugs-IDEA</li><li><a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="setter生成"><a href="#setter生成" class="headerlink" title="setter生成"></a>setter生成</h4><ul><li>GenerateAllSetter</li><li><a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="配置console颜色"><a href="#配置console颜色" class="headerlink" title="配置console颜色"></a>配置console颜色</h4><ul><li>Grep Console</li><li><a href="https://plugins.jetbrains.com/plugin/7125-grep-console/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="根据JSON直接生成bean"><a href="#根据JSON直接生成bean" class="headerlink" title="根据JSON直接生成bean"></a>根据JSON直接生成bean</h4><ul><li>GsonFormat</li><li><a href="https://plugins.jetbrains.com/plugin/7654-gsonformat/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="idea轻量级主题"><a href="#idea轻量级主题" class="headerlink" title="idea轻量级主题"></a>idea轻量级主题</h4><ul><li>IntelliJ Light Theme</li><li><a href="https://plugins.jetbrains.com/plugin/12697-intellij-light-theme/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="日志代生成"><a href="#日志代生成" class="headerlink" title="日志代生成"></a>日志代生成</h4><ul><li>Lombok</li><li><a href="https://plugins.jetbrains.com/plugin/6317-lombok/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="Junit生成"><a href="#Junit生成" class="headerlink" title="Junit生成"></a>Junit生成</h4><ul><li>JUnitGenerator V2.​0</li><li><a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0/" target="_blank" rel="noopener">插件首页</a></li><li>setting<ul><li>–&gt;修改Output Path[输出路径]为${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}</li><li>–&gt;将package test.$entry.packageName;修改成package $entry.packageName;</li></ul></li></ul><h4 id="Markdown编辑"><a href="#Markdown编辑" class="headerlink" title="Markdown编辑"></a>Markdown编辑</h4><ul><li>Markdown Navigator</li><li><a href="https://plugins.jetbrains.com/plugin/7896-markdown-navigator/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="Maven右键RUN"><a href="#Maven右键RUN" class="headerlink" title="Maven右键RUN"></a>Maven右键RUN</h4><ul><li>Maven Helper</li><li><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="Mybatis生成测试"><a href="#Mybatis生成测试" class="headerlink" title="Mybatis生成测试"></a>Mybatis生成测试</h4><ul><li>MyBatisCodeHelperPro</li><li><a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="谷歌翻译"><a href="#谷歌翻译" class="headerlink" title="谷歌翻译"></a>谷歌翻译</h4><ul><li>Translation</li><li><a href="https://plugins.jetbrains.com/plugin/8579-translation/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="GitToolBox"><a href="#GitToolBox" class="headerlink" title="GitToolBox"></a>GitToolBox</h4><ul><li>GitToolBox</li><li><a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/" target="_blank" rel="noopener">插件首页</a></li></ul><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><ul><li>demo</li><li><a href="">插件首页</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;阿里规则校验&quot;&gt;&lt;a href=&quot;#阿里规则校验&quot; class=&quot;headerlink&quot; title=&quot;阿里规则校验&quot;&gt;&lt;/a&gt;阿里规则校验&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Alibaba Java Coding Guidelines&lt;/li&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
      <category term="essay" scheme="https://www.wuxinvip.com/categories/essay/"/>
    
    
      <category term="随笔" scheme="https://www.wuxinvip.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>spring-data-redis小坑</title>
    <link href="https://www.wuxinvip.com/2019/09/24/spring-cloud/spring-data-redis/"/>
    <id>https://www.wuxinvip.com/2019/09/24/spring-cloud/spring-data-redis/</id>
    <published>2019-09-24T00:00:00.000Z</published>
    <updated>2019-10-23T10:43:51.903Z</updated>
    
    <content type="html"><![CDATA[<h4 id="StringRedisTemplate-和-RedisTemplate区别"><a href="#StringRedisTemplate-和-RedisTemplate区别" class="headerlink" title="StringRedisTemplate 和 RedisTemplate区别"></a>StringRedisTemplate 和 RedisTemplate区别</h4><h5 id="StringRedisTemplate-对key进行了getBytes-也推荐使用这种"><a href="#StringRedisTemplate-对key进行了getBytes-也推荐使用这种" class="headerlink" title="StringRedisTemplate 对key进行了getBytes 也推荐使用这种"></a>StringRedisTemplate 对key进行了getBytes 也推荐使用这种</h5><ul><li>安全、迅速效率高</li></ul><h5 id="RedisTemplate-key是String形式"><a href="#RedisTemplate-key是String形式" class="headerlink" title="RedisTemplate key是String形式"></a>RedisTemplate key是String形式</h5><h6 id="挖坑点是-stringRedisTemplate和RedisTempalte存放不共用。"><a href="#挖坑点是-stringRedisTemplate和RedisTempalte存放不共用。" class="headerlink" title="挖坑点是 stringRedisTemplate和RedisTempalte存放不共用。"></a>挖坑点是 stringRedisTemplate和RedisTempalte存放不共用。</h6><ul><li><p>简单来说就是 使用StringRedisTemplate放入的数据 不能用RedisTemplate取出  </p></li><li><p>因为 StringRedisTemplate在放入redis之前 将key进行getBytes了</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;StringRedisTemplate-和-RedisTemplate区别&quot;&gt;&lt;a href=&quot;#StringRedisTemplate-和-RedisTemplate区别&quot; class=&quot;headerlink&quot; title=&quot;StringRedisTemplat
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-data" scheme="https://www.wuxinvip.com/tags/spring-data/"/>
    
  </entry>
  
  <entry>
    <title>AES加密 </title>
    <link href="https://www.wuxinvip.com/2019/09/02/encryption/aes/"/>
    <id>https://www.wuxinvip.com/2019/09/02/encryption/aes/</id>
    <published>2019-09-02T00:00:00.000Z</published>
    <updated>2019-11-01T09:51:59.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h2><h3 id="关于AES加解密java-security-InvalidKeyException的错误解决方法"><a href="#关于AES加解密java-security-InvalidKeyException的错误解决方法" class="headerlink" title="关于AES加解密java.security.InvalidKeyException的错误解决方法"></a>关于AES加解密java.security.InvalidKeyException的错误解决方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.security.InvalidKeyException: Illegal key size</span><br></pre></td></tr></table></figure><h4 id="Java实现AES加密-异常java-security-InvalidKeyException-Illegal-key-size-的解决"><a href="#Java实现AES加密-异常java-security-InvalidKeyException-Illegal-key-size-的解决" class="headerlink" title="Java实现AES加密,异常java.security.InvalidKeyException: Illegal key size 的解决"></a>Java实现AES加密,异常java.security.InvalidKeyException: Illegal key size 的解决</h4><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><h6 id="限制-jdk1-8-0-151版本之后可采用次解决方案-不需要改JCE包"><a href="#限制-jdk1-8-0-151版本之后可采用次解决方案-不需要改JCE包" class="headerlink" title="限制 jdk1.8.0 151版本之后可采用次解决方案 不需要改JCE包"></a>限制 jdk1.8.0 151版本之后可采用次解决方案 不需要改JCE包</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 初始化中执行解除密钥长度限制</span><br><span class="line"> */</span><br><span class="line">static &#123;</span><br><span class="line">    Security.setProperty(&quot;crypto.policy&quot;, &quot;unlimited&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AES加密&quot;&gt;&lt;a href=&quot;#AES加密&quot; class=&quot;headerlink&quot; title=&quot;AES加密&quot;&gt;&lt;/a&gt;AES加密&lt;/h2&gt;&lt;h3 id=&quot;关于AES加解密java-security-InvalidKeyException的错误解决方法&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="password" scheme="https://www.wuxinvip.com/categories/java/password/"/>
    
    
      <category term="密码加密" scheme="https://www.wuxinvip.com/tags/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>mysql X锁和S锁</title>
    <link href="https://www.wuxinvip.com/2019/08/24/mysql/mysql-lock/"/>
    <id>https://www.wuxinvip.com/2019/08/24/mysql/mysql-lock/</id>
    <published>2019-08-24T00:00:00.000Z</published>
    <updated>2019-09-02T05:30:27.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql-X锁和S锁基本的封锁类型有两种"><a href="#mysql-X锁和S锁基本的封锁类型有两种" class="headerlink" title="mysql X锁和S锁基本的封锁类型有两种:"></a>mysql X锁和S锁基本的封锁类型有两种:</h3><p>排它锁(X锁)和共享锁(S锁)：</p><p>所谓X锁,是事务T对数据A加上X锁时,只允许事务T读取和修改数据A</p><p>所谓S锁,是事务T对数据A加上S锁时,其他事务只能再对数据A加S锁,而不能加X锁,直到T释放A上的S锁</p><p>若事务T对数据对象A加了S锁,则T就可以对A进行读取,但不能进行更新(S锁因此又称为读锁),在T释放A上的S锁以前,其他事务可以再对A加S锁,但不能加X锁,从而可以读取A,但不能更新A.</p><p><a href="http://www.cnblogs.com/digdeep/archive/2015/11/16/4968453.html" target="_blank" rel="noopener">http://www.cnblogs.com/digdeep/archive/2015/11/16/4968453.html</a></p><p>学习了mysql加锁机制，RC，RR，与字段的索引还有关系，如何防止死锁，不同情况的加锁。</p><p>学习where条件的过滤</p><p>给定一条SQL，如何提取其中的where条件？where条件中的每个子条件，在SQL执行的过程中有分别起着什么样的作用？</p><p><a href="http://hedengcheng.com/?p=577" target="_blank" rel="noopener">http://hedengcheng.com/?p=577</a></p><p>Index Key 索引查找，第一遍找出最小值，随后需要逐个比较是否满足最大值的条件，得到最大值。</p><p>Index First Key — Index Last Key</p><p>Index Filter 索引过滤，对于索引查找出的值，均需要与索引过滤条件对比</p><p>Table Filter 对于没有命中索引的字段，需要回表查出完整记录，对其进行过滤</p><h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a><a href="https://www.jianshu.com/p/342f526dbbc2" target="_blank" rel="noopener">原文地址</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mysql-X锁和S锁基本的封锁类型有两种&quot;&gt;&lt;a href=&quot;#mysql-X锁和S锁基本的封锁类型有两种&quot; class=&quot;headerlink&quot; title=&quot;mysql X锁和S锁基本的封锁类型有两种:&quot;&gt;&lt;/a&gt;mysql X锁和S锁基本的封锁类型有两种:
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="mysql" scheme="https://www.wuxinvip.com/categories/java/mysql/"/>
    
    
      <category term="mysql-lock" scheme="https://www.wuxinvip.com/tags/mysql-lock/"/>
    
  </entry>
  
  <entry>
    <title>DB 图谱</title>
    <link href="https://www.wuxinvip.com/2019/07/12/xmind/xmind-db/"/>
    <id>https://www.wuxinvip.com/2019/07/12/xmind/xmind-db/</id>
    <published>2019-07-12T00:00:00.000Z</published>
    <updated>2019-09-03T05:45:10.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="v1-5-1"><a href="#v1-5-1" class="headerlink" title="v1.5.1"></a>v1.5.1</h3><h4 id="更新mysql-添加"><a href="#更新mysql-添加" class="headerlink" title="更新mysql 添加"></a>更新mysql 添加</h4><ul><li>索引类型【主键、普通、唯一、全文、组合】</li><li>索引原理【hash、fulltext、B+Tree】</li><li>索引结构【聚簇索引、非聚簇索引】</li></ul><p>{———-}</p><p><img src="/img/xmind/img/db/mysql.png" alt="图片">mysql 图谱<br><img src="/img/xmind/img/db/mongodb.png" alt="图片">mongodb 图谱</p><p>2019 - 8 更新mysql 添加 </p><ul><li>索引类型【主键、普通、唯一、全文、组合】</li><li>索引原理【hash、fulltext、B+Tree】</li><li>索引结构【聚簇索引、非聚簇索引】</li></ul>]]></content>
    
    <summary type="html">
    
      xmind DB图谱
    
    </summary>
    
      <category term="xmind" scheme="https://www.wuxinvip.com/categories/xmind/"/>
    
      <category term="我的技术图谱" scheme="https://www.wuxinvip.com/categories/xmind/%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
    
    
      <category term="我的图谱" scheme="https://www.wuxinvip.com/tags/%E6%88%91%E7%9A%84%E5%9B%BE%E8%B0%B1/"/>
    
  </entry>
  
  <entry>
    <title>线程 图谱</title>
    <link href="https://www.wuxinvip.com/2019/07/12/xmind/xmind-thread/"/>
    <id>https://www.wuxinvip.com/2019/07/12/xmind/xmind-thread/</id>
    <published>2019-07-12T00:00:00.000Z</published>
    <updated>2019-08-21T13:52:09.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="v1-5-1"><a href="#v1-5-1" class="headerlink" title="v1.5.1"></a>v1.5.1</h3><h4 id="更新线程"><a href="#更新线程" class="headerlink" title="更新线程"></a>更新线程</h4><ul><li>ThreadPoolExcutor 参数说明</li><li>更新队列配置说明</li><li>更新spring @Async注解</li></ul><p><img src="/img/xmind/img/线程.png" alt="图片"></p><p>java锁 详细见<a href="/blog/xmind/xmind-锁/">xmind-锁</a></p>]]></content>
    
    <summary type="html">
    
      xmind 线程图谱
    
    </summary>
    
      <category term="xmind" scheme="https://www.wuxinvip.com/categories/xmind/"/>
    
      <category term="我的技术图谱" scheme="https://www.wuxinvip.com/categories/xmind/%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
    
    
      <category term="我的图谱" scheme="https://www.wuxinvip.com/tags/%E6%88%91%E7%9A%84%E5%9B%BE%E8%B0%B1/"/>
    
  </entry>
  
  <entry>
    <title>jdk内存模型</title>
    <link href="https://www.wuxinvip.com/2019/05/26/jdk/jdk-model/"/>
    <id>https://www.wuxinvip.com/2019/05/26/jdk/jdk-model/</id>
    <published>2019-05-26T00:00:00.000Z</published>
    <updated>2019-05-28T11:09:12.792Z</updated>
    
    <content type="html"><![CDATA[<p>#8个原子操作<br>针对jvm主内存与工作内存的数据操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lock----锁定</span><br><span class="line">unlock----释放锁</span><br><span class="line">read----读</span><br><span class="line">write----写</span><br><span class="line">load----加载</span><br><span class="line">assign----赋值</span><br><span class="line">use----使用</span><br><span class="line">store----写入主内存</span><br></pre></td></tr></table></figure></p><p>特例：<br>long、double、64为内存、在32为虚拟机中分两次操作、<br>load、store、read、write都不是源自操作</p><p>#8个规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、不允许read、load、store、write单独出现</span><br><span class="line">2、不允许thread丢弃assign</span><br><span class="line">3、不允许任何一线程、没有assign的数据 从工作内存store到主内存</span><br><span class="line">4、一个新变量只能在主内存“诞生”、对一个变量“use/store”之前、执行assign、load操作</span><br><span class="line">5、一个变量在同一时刻只允许一个线程对其进行lock、但lock可以被执行多次、lock标记为累加、多次lock需要多次unlock</span><br><span class="line"></span><br><span class="line">6、对一个变量执行lock、会清空工作内存中变量值、使用之前需要重新load、assign</span><br><span class="line">7、如果未lock、不能unlock</span><br><span class="line">8、执行unlock之前、限制性工作内存同步主内存</span><br></pre></td></tr></table></figure><p>都挺好理解、计算机这个东西、没啥难度、<br>lock是做标记为int ++  –做锁标记位</p><p>#内存可见性</p><p>1、volatile<br>2、sychronized<br>3、final</p><p>#有序性<br>1、线程内表现为串行</p><p>#无序<br>1、指令重排序【使用volatile可以阻止指令重排序】<br>2、sychronized 同一个变量、在同一时刻、允许同一线程串行进入</p><p>3、编译器静态优化会打乱代码执行顺序<br>4、jvm动态优化会打乱代码执行顺序<br>5、硬件可以打乱执行顺序以优化其性能</p><p>#线程安全<br>1、不可变—final<br>2、绝对安全<br>3、相对安全<br>4、线程兼容<br>5、独立—对程序有害</p><p>#线程发展史</p><p>1、重量级、执行标记位 加sychronized的地方、我在内存中加一个标记为、标记该方法、该对象、我正在使用、你不能使用<br>2、偏向锁、object标记、Mark Word中偏向锁的标识<br>3、轻量级、reentranlock、线程中自建一个object标记、增加了trylock（times）、可队列执行锁方法、规则名aqs、<br>4、算法代替锁、设计思想是、假设没有竞争、竞争时候通过算法判断、cas、拿旧值和内存原值比较、一致则修改为新值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#8个原子操作&lt;br&gt;针对jvm主内存与工作内存的数据操作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="jdk" scheme="https://www.wuxinvip.com/categories/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://www.wuxinvip.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>AI 机器学习发展史</title>
    <link href="https://www.wuxinvip.com/2019/05/26/ai/ai-002/"/>
    <id>https://www.wuxinvip.com/2019/05/26/ai/ai-002/</id>
    <published>2019-05-26T00:00:00.000Z</published>
    <updated>2019-05-28T11:02:42.474Z</updated>
    
    <content type="html"><![CDATA[<p>1、模型 M-P神经网络模型</p><p>2、1949 Hebb规则 刺激–》加强 训练强化</p><p>3、1957 Perception模型</p><p>4、1969 感知机模型 不能解决XOR问题</p><p>5、1982 离散网络模型、连续网络模型</p><p>6、BP算法 多层网络误差反传</p><p>7、90中期 orther竞争力学习模型 低潮</p><p>8、2006 热点 梯度消失、梯度爆炸、计算机算力提升</p><h1 id="神经元传输"><a href="#神经元传输" class="headerlink" title="神经元传输"></a>神经元传输</h1><p>特性：多输入、单输出</p><p><img src="/img/ai/神经元模型.jpg" alt="图片"></p><p>神经元先对入参数据进行求和操作、之后经过激活函数、最终得到data值</p><p>感知机 ：<br>    线程分割<br>    不能XOR 【异或】<br>    加入隐藏层 支持XOR</p><p><img src="/img/ai/神经元传递参数.jpg" alt="图片"></p><ul><li>损失函数定义</li></ul><p><img src="/img/ai/损失函数.jpg" alt="图片"></p><h1 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h1><ul><li>定义域 obj定义</li><li>操作域 赋值</li></ul><p>namescope ： 在同一个变量名不同作用效果、好处、代码配置化</p><p>placeholder：运行时赋值<br>session.run{feed.dict=”指定初始值”}</p><ul><li>训练模式 ：分批小批数据训练</li></ul><p>*深度学习</p><p>1、CNN 卷积神经网络【图像识别】</p><p>流程：【卷积过程依据特征粒度（特征粒度自己创造的词汇）】<br>输入-》卷积-》池化-》卷积-》池化-》全连接</p><p>2、循环神经网络【语言识别、股票预测】</p><p>第一个如参值参与后边所有数据入参</p><p><img src="/img/ai/循环神经网络.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、模型 M-P神经网络模型&lt;/p&gt;
&lt;p&gt;2、1949 Hebb规则 刺激–》加强 训练强化&lt;/p&gt;
&lt;p&gt;3、1957 Perception模型&lt;/p&gt;
&lt;p&gt;4、1969 感知机模型 不能解决XOR问题&lt;/p&gt;
&lt;p&gt;5、1982 离散网络模型、连续网络模型&lt;/p&gt;

      
    
    </summary>
    
      <category term="AI" scheme="https://www.wuxinvip.com/categories/AI/"/>
    
    
      <category term="AI" scheme="https://www.wuxinvip.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>数据库链接已关闭</title>
    <link href="https://www.wuxinvip.com/2019/05/24/exception/exception-5/"/>
    <id>https://www.wuxinvip.com/2019/05/24/exception/exception-5/</id>
    <published>2019-05-24T00:00:00.000Z</published>
    <updated>2019-05-22T03:13:56.531Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Database access problem. Killing off this connection and all remaining connections </span><br><span class="line">    in the connection pool. SQL State = 08S01</span><br><span class="line"></span><br><span class="line"> org.springframework.transaction.CannotCreateTransactionException: </span><br><span class="line">    Could not open JPA EntityManager for transaction; nested exception is javax.persistence.</span><br><span class="line">        PersistenceException: java.sql.SQLException: Connection is closed!</span><br></pre></td></tr></table></figure><p>原因： DBA数据库对连接时间比程序中的连接时间敏感得多、导致数据库连接在数据库端被关闭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="exception" scheme="https://www.wuxinvip.com/categories/java/exception/"/>
    
    
      <category term="exception" scheme="https://www.wuxinvip.com/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>linux 排查命令</title>
    <link href="https://www.wuxinvip.com/2019/05/15/shell/shell-7/"/>
    <id>https://www.wuxinvip.com/2019/05/15/shell/shell-7/</id>
    <published>2019-05-14T16:00:00.000Z</published>
    <updated>2019-05-28T09:33:57.767Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="shell">pid=11683<span class="meta">#</span><span class="bash">命令查看该进程的线程情况</span>ps -mp pid -o THREAD,tid,timetid 转为 16进制printf "%x\n" 67661a6e<span class="meta">#</span><span class="bash">使用jstack 查看线程使用情况</span>jstack 11683 | grep 2df4 -A 30"Thread-38" #51 daemon prio=5 os_prio=0 tid=0x00007f96ec675000 nid=0x2df4 runnable [0x00007f970065a000]<span class="meta">#</span><span class="bash">打印线程信息</span>jstack -l 11683 &gt; /logs/dump.txt<span class="meta">#</span><span class="bash">打印对象信息【死锁信息】</span>jstack -m 11683 &gt; /logs/dump.txt<span class="meta">#</span><span class="bash">IO使用率</span>iostat 5 <span class="meta">#</span><span class="bash">系统使用率</span>vmstat 5<span class="meta">#</span><span class="bash">网络使用率</span>nicstat 5<span class="meta">#</span><span class="bash">cpu 使用率</span>typeperf -si | "System\Processor\Queue\Length"jstat pid jstat -option pidoption:</code></pre><p>jstat pid<br>jstat -option pid</p><p>option:</p><pre><code>gc gcnewgcoldgc causegc capacitygc old capacitygc perm capacitygc utilgc new capacityprint compilationcompilerclass</code></pre><p>jmap option pid</p><pre><code>-permstat-histo-J-d64 -heap</code></pre><p>其他命令</p><pre><code>jcmdjconsolejhatjmapjinfojstatjstackjvisualvm</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;pid=11683

&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;命令查看该进程的线程情况&lt;/span&gt;
ps -mp pid -o THREAD,tid,time

tid 转为 
      
    
    </summary>
    
      <category term="shell" scheme="https://www.wuxinvip.com/categories/shell/"/>
    
    
      <category term="shell" scheme="https://www.wuxinvip.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>springboot logger  配置</title>
    <link href="https://www.wuxinvip.com/2019/05/12/spring-cloud/logger-config/"/>
    <id>https://www.wuxinvip.com/2019/05/12/spring-cloud/logger-config/</id>
    <published>2019-05-12T00:00:00.000Z</published>
    <updated>2019-05-06T06:18:10.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="logger-配置"><a href="#logger-配置" class="headerlink" title="logger 配置"></a>logger 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">    config:</span> <span class="attr">classpath:logback-spring.xml</span></span><br><span class="line"><span class="attr">    level:</span></span><br><span class="line"><span class="attr">        com:</span></span><br><span class="line"><span class="attr">            netflix:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">            wuxinvip:</span> <span class="string">info</span></span><br><span class="line">            <span class="string">wuxinvip.mapper:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">        org:</span></span><br><span class="line"><span class="attr">            springframework:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">        root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- For assistance related to logback-translator or configuration  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- files in general, please contact the logback user mailing list --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- at http://www.qos.ch/mailman/listinfo/logback-user             --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                                                --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- For professional support please see                            --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    http://www.qos.ch/shop/products/professionalSupport</span></span><br><span class="line"><span class="comment">      http://logback.qos.ch/translator/</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p [%c] - &amp;lt;%m&amp;gt;%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;logger-配置&quot;&gt;&lt;a href=&quot;#logger-配置&quot; class=&quot;headerlink&quot; title=&quot;logger 配置&quot;&gt;&lt;/a&gt;logger 配置&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>node--npm    命令</title>
    <link href="https://www.wuxinvip.com/2019/04/15/shell/shell-6/"/>
    <id>https://www.wuxinvip.com/2019/04/15/shell/shell-6/</id>
    <published>2019-04-14T16:00:00.000Z</published>
    <updated>2019-05-28T05:49:46.698Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="shell">tar xvf node-v10.15.3-linux-x64.tar<span class="meta">#</span><span class="bash">初始化</span>npm install<span class="meta">#</span><span class="bash">安装脚本编译</span>npm install -g typescriptnpm run build<span class="meta">#</span><span class="bash">jscheck</span>npm run check<span class="meta">#</span><span class="bash">部署dev</span>npm run dev<span class="meta">#</span><span class="bash">后台启动prod</span>npm start npm run start:redis<span class="meta">#</span><span class="bash"><span class="comment">##########</span></span>npm auditnpm update handlebars --depth 3npm auditnpm audit fix<span class="meta">#</span><span class="bash"><span class="comment">############</span></span>*   通过pm2启动管理pm2 statuspm2 start 1pm2 stop rap-server-delospm2 show rap-server-delospm2 restart 1pm2 show 1pm2 logs redis-serverpm2 logs 0pm2 show 1pm2 restart 1pm2 restart 0</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;tar xvf node-v10.15.3-linux-x64.tar



&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;初始化&lt;/span&gt;
npm install

&lt;span 
      
    
    </summary>
    
      <category term="shell" scheme="https://www.wuxinvip.com/categories/shell/"/>
    
    
      <category term="shell" scheme="https://www.wuxinvip.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>redis 锁</title>
    <link href="https://www.wuxinvip.com/2019/04/13/cache/redis-2/"/>
    <id>https://www.wuxinvip.com/2019/04/13/cache/redis-2/</id>
    <published>2019-04-13T00:00:00.000Z</published>
    <updated>2019-09-03T05:45:11.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-锁分类"><a href="#redis-锁分类" class="headerlink" title="redis 锁分类"></a>redis 锁分类</h3><ul><li>INCR、SETNX、SET</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$redis-&gt;incr($key);</span><br><span class="line">$redis-&gt;expire($key, $ttl); //设置生成时间为1秒</span><br><span class="line"></span><br><span class="line">1、 客户端A请求服务器获取key的值为1表示获取了锁</span><br><span class="line">2、 客户端B也去请求服务器获取key的值为2表示获取锁失败</span><br><span class="line">3、 客户端A执行代码完成，删除锁</span><br><span class="line">4、 客户端B在等待一段时间后在去请求的时候获取key的值为1表示获取锁成功</span><br><span class="line">5、 客户端B执行代码完成，删除锁</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$redis-&gt;setNX($key, $value);</span><br><span class="line">$redis-&gt;expire($key, $ttl);</span><br><span class="line"></span><br><span class="line">1、 客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</span><br><span class="line">2、 客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</span><br><span class="line">3、 客户端A执行代码完成，删除锁</span><br><span class="line">4、 客户端B在等待一段时间后在去请求设置key的值，设置成功</span><br><span class="line">5、 客户端B执行代码完成，删除锁</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$redis-&gt;set($key, $value, array(&apos;nx&apos;, &apos;ex&apos; =&gt; $ttl));  //ex表示秒</span><br><span class="line"></span><br><span class="line">1、 客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</span><br><span class="line">2、 客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</span><br><span class="line">3、 客户端A执行代码完成，删除锁</span><br><span class="line">4、 客户端B在等待一段时间后在去请求设置key的值，设置成功</span><br><span class="line">5、 客户端B执行代码完成，删除锁</span><br></pre></td></tr></table></figure><ul><li><p>锁临界问题</p><ul><li>解决方案 【循环锁】</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">do &#123;  </span><br><span class="line">    $timeout = 10;</span><br><span class="line">    $roomid = 10001;</span><br><span class="line">    $key = &apos;room_lock&apos;;</span><br><span class="line">    $value = &apos;room_&apos;.$roomid;  //分配一个随机的值针对问题3</span><br><span class="line">    $isLock = Redis::set($key, $value, &apos;ex&apos;, $timeout, &apos;nx&apos;);//ex 秒</span><br><span class="line">    if ($isLock) &#123;</span><br><span class="line">        if (Redis::get($key) == $value) &#123;  //防止提前过期，误删其它请求创建的锁</span><br><span class="line">            //执行内部代码</span><br><span class="line">            Redis::del($key);</span><br><span class="line">            continue;//执行成功删除key并跳出循环</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        usleep(5000); //睡眠，降低抢锁频率，缓解redis压力，针对问题2</span><br><span class="line">    &#125;</span><br><span class="line">&#125; while(!$isLock);</span><br></pre></td></tr></table></figure><p>{———-}</p><h3 id="封装spring-data-redis操作redis分布式锁"><a href="#封装spring-data-redis操作redis分布式锁" class="headerlink" title="封装spring-data-redis操作redis分布式锁"></a>封装spring-data-redis操作redis分布式锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 操作redis获取全局锁</span><br><span class="line">    *</span><br><span class="line">    * @param redisLock           锁的名称</span><br><span class="line">    * @param timeout        获取的超时时间</span><br><span class="line">    * @param tryInterval    多少ms尝试一次</span><br><span class="line">    * @return true 获取成功，false获取失败</span><br><span class="line">    */</span><br><span class="line">   public boolean getLock(RedisLock redisLock, long timeout, long tryInterval)&#123;</span><br><span class="line">       try&#123;</span><br><span class="line">           if(StringUtils.isEmpty(redisLock.getKey()) || StringUtils.isEmpty(redisLock.getValue()))&#123;</span><br><span class="line">               return false;</span><br><span class="line">           &#125;</span><br><span class="line">           while (true)&#123;</span><br><span class="line">               List&lt;String&gt; keys = new ArrayList&lt;&gt;(1);</span><br><span class="line">               keys.add(redisLock.getKey());</span><br><span class="line">               String result = this.execute(new RedisCallback&lt;String&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public String doInRedis(RedisConnection connection) throws DataAccessException &#123;</span><br><span class="line">                       JedisCommands commands = (JedisCommands) connection.getNativeConnection();</span><br><span class="line">                       return commands.set(redisLock.getKey(), redisLock.getValue(), &quot;NX&quot;, &quot;PX&quot;, redisLock.getLockExpireTime());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               if (StringUtils.isNotEmpty(result))&#123;</span><br><span class="line">                   return true;</span><br><span class="line">               &#125;</span><br><span class="line">               Thread.sleep(tryInterval);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;catch (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>this.execute(new RedisCallback<string>() //封装 spring-data-redis 分布式锁<br>//获取redisnativeConnection 初始化为 JedisCommands返回操作类<br>JedisCommands commands = (JedisCommands) connection.getNativeConnection();<br>//使用commands操作类设置数据锁<br>return commands.set(redisLock.getKey(), redisLock.getValue(), “NX”, “PX”, redisLock.getLockExpireTime());</string></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 释放锁</span><br><span class="line">     */</span><br><span class="line">    public void releaseLock(RedisLock redisLock) &#123;</span><br><span class="line">        final List&lt;String&gt; keys = new ArrayList(1);</span><br><span class="line">        final List&lt;String&gt; args = new ArrayList(1);</span><br><span class="line">        keys.add(redisLock.getKey());</span><br><span class="line">        args.add(redisLock.getValue());</span><br><span class="line">        Long result = this.execute(new RedisCallback&lt;Long&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Long doInRedis(RedisConnection connection) throws DataAccessException &#123;</span><br><span class="line">                Object nativeConnection = connection.getNativeConnection();</span><br><span class="line">                // 集群模式和单机模式虽然执行脚本的方法一样，但是没有共同的接口，所以只能分开执行</span><br><span class="line">                // 集群模式</span><br><span class="line">                if (nativeConnection instanceof JedisCluster) &#123;</span><br><span class="line">                    return (Long) ((JedisCluster) nativeConnection).eval(EQ_DEL_STR, keys, args);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 单机模式</span><br><span class="line">                else if (nativeConnection instanceof Jedis) &#123;</span><br><span class="line">                    return (Long) ((Jedis) nativeConnection).eval(EQ_DEL_STR, keys, args);</span><br><span class="line">                &#125;</span><br><span class="line">                return 0L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>释放锁 调用spring-data-redis封装类 ResdTemplate.excute()</p><p>返回类型初始化为 JedisCluster 或者 Jedis操作类 调用 eval方法  解锁数据</p>]]></content>
    
    <summary type="html">
    
      封装spring-data-redis操作redis分布式锁 
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="cache" scheme="https://www.wuxinvip.com/categories/java/cache/"/>
    
    
      <category term="缓存" scheme="https://www.wuxinvip.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>feign ribbon 配置</title>
    <link href="https://www.wuxinvip.com/2019/04/12/spring-cloud/hystrix-config/"/>
    <id>https://www.wuxinvip.com/2019/04/12/spring-cloud/hystrix-config/</id>
    <published>2019-04-12T00:00:00.000Z</published>
    <updated>2019-04-25T18:12:11.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="feign-配置"><a href="#feign-配置" class="headerlink" title="feign 配置"></a>feign 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html" target="_blank" rel="noopener">官方文档配置</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      feignName:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">        errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line"><span class="attr">        retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line"><span class="attr">        requestInterceptors:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line"><span class="attr">        decode404:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line"><span class="attr">        decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line"><span class="attr">        contract:</span> <span class="string">com.example.SimpleContract</span></span><br><span class="line"><span class="attr">      default:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">basic</span></span><br><span class="line"><span class="comment"># To disable Hystrix in Feign</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># To set thread isolation to SEMAPHORE</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 配置请求GZIP压缩</span><br><span class="line">feign.compression.request.enabled=true</span><br><span class="line"># 配置响应GZIP压缩</span><br><span class="line">feign.compression.response.enabled=true</span><br><span class="line"># 配置压缩支持的MIME TYPE</span><br><span class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="line"># 配置压缩数据大小的下限</span><br><span class="line">feign.compression.request.min-request-size=2048</span><br><span class="line"></span><br><span class="line">#熔断</span><br><span class="line">feign.hystrix.enabled=false</span><br></pre></td></tr></table></figure><h3 id="ribbon-配置"><a href="#ribbon-配置" class="headerlink" title="ribbon 配置"></a>ribbon 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NIWSServerListClassName:</span> <span class="string">com.netflix.loadbalancer.ConfigurationBasedServerList</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span></span><br><span class="line"><span class="attr">stores:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,google.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">   enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  eager-load:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    clients:</span> <span class="string">client1,</span> <span class="string">client2,</span> <span class="string">client3</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置连接超时时间</span><br><span class="line">ribbon.ConnectTimeout=3000</span><br><span class="line"># 设置读取超时时间</span><br><span class="line">ribbon.ReadTimeout=2000</span><br><span class="line"># 对所有操作请求都进行重试</span><br><span class="line">ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 对当前实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetries=1</span><br><span class="line">#切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#暂不开启重试,以防请求重复</span><br><span class="line">spring.cloud.loadbalancer.retry.enabled=false</span><br></pre></td></tr></table></figure><ul><li>这种配置是一种全局配置，就是是对所有的请求生效的，如果我想针对不同的服务配置不同的连接超时和读取超时，那么我们可以在属性的前面加上服务的名字，如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置针对hello-service服务的连接超时时间</span><br><span class="line">hello-service.ribbon.ConnectTimeout=600</span><br><span class="line"># 设置针对hello-service服务的读取超时时间</span><br><span class="line">hello-service.ribbon.ReadTimeout=6000</span><br><span class="line"># 设置针对hello-service服务所有操作请求都进行重试</span><br><span class="line">hello-service.ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 设置针对hello-service服务切换实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 设置针对hello-service服务的当前实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetries=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;feign-配置&quot;&gt;&lt;a href=&quot;#feign-配置&quot; class=&quot;headerlink&quot; title=&quot;feign 配置&quot;&gt;&lt;/a&gt;feign 配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>feign ribbon 配置</title>
    <link href="https://www.wuxinvip.com/2019/04/12/spring-cloud/feign-ribbon-config/"/>
    <id>https://www.wuxinvip.com/2019/04/12/spring-cloud/feign-ribbon-config/</id>
    <published>2019-04-12T00:00:00.000Z</published>
    <updated>2019-04-25T18:12:11.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="feign-配置"><a href="#feign-配置" class="headerlink" title="feign 配置"></a>feign 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html" target="_blank" rel="noopener">官方文档配置</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      feignName:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">        errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line"><span class="attr">        retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line"><span class="attr">        requestInterceptors:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line"><span class="attr">        decode404:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line"><span class="attr">        decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line"><span class="attr">        contract:</span> <span class="string">com.example.SimpleContract</span></span><br><span class="line"><span class="attr">      default:</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">basic</span></span><br><span class="line"><span class="comment"># To disable Hystrix in Feign</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># To set thread isolation to SEMAPHORE</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 配置请求GZIP压缩</span><br><span class="line">feign.compression.request.enabled=true</span><br><span class="line"># 配置响应GZIP压缩</span><br><span class="line">feign.compression.response.enabled=true</span><br><span class="line"># 配置压缩支持的MIME TYPE</span><br><span class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="line"># 配置压缩数据大小的下限</span><br><span class="line">feign.compression.request.min-request-size=2048</span><br><span class="line"></span><br><span class="line">#熔断</span><br><span class="line">feign.hystrix.enabled=false</span><br></pre></td></tr></table></figure><h3 id="ribbon-配置"><a href="#ribbon-配置" class="headerlink" title="ribbon 配置"></a>ribbon 配置</h3><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NIWSServerListClassName:</span> <span class="string">com.netflix.loadbalancer.ConfigurationBasedServerList</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.WeightedResponseTimeRule</span></span><br><span class="line"><span class="attr">stores:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,google.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">   enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  eager-load:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    clients:</span> <span class="string">client1,</span> <span class="string">client2,</span> <span class="string">client3</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置连接超时时间</span><br><span class="line">ribbon.ConnectTimeout=3000</span><br><span class="line"># 设置读取超时时间</span><br><span class="line">ribbon.ReadTimeout=2000</span><br><span class="line"># 对所有操作请求都进行重试</span><br><span class="line">ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 对当前实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetries=1</span><br><span class="line">#切换实例的重试次数</span><br><span class="line">ribbon.MaxAutoRetriesNextServer=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#暂不开启重试,以防请求重复</span><br><span class="line">spring.cloud.loadbalancer.retry.enabled=false</span><br></pre></td></tr></table></figure><ul><li>这种配置是一种全局配置，就是是对所有的请求生效的，如果我想针对不同的服务配置不同的连接超时和读取超时，那么我们可以在属性的前面加上服务的名字，如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置针对hello-service服务的连接超时时间</span><br><span class="line">hello-service.ribbon.ConnectTimeout=600</span><br><span class="line"># 设置针对hello-service服务的读取超时时间</span><br><span class="line">hello-service.ribbon.ReadTimeout=6000</span><br><span class="line"># 设置针对hello-service服务所有操作请求都进行重试</span><br><span class="line">hello-service.ribbon.OkToRetryOnAllOperations=true</span><br><span class="line"># 设置针对hello-service服务切换实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetriesNextServer=2</span><br><span class="line"># 设置针对hello-service服务的当前实例的重试次数</span><br><span class="line">hello-service.ribbon.MaxAutoRetries=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;feign-配置&quot;&gt;&lt;a href=&quot;#feign-配置&quot; class=&quot;headerlink&quot; title=&quot;feign 配置&quot;&gt;&lt;/a&gt;feign 配置&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.spring.io/spring-cloud-
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>redis 规范</title>
    <link href="https://www.wuxinvip.com/2019/04/11/cache/redis-1/"/>
    <id>https://www.wuxinvip.com/2019/04/11/cache/redis-1/</id>
    <published>2019-04-11T00:00:00.000Z</published>
    <updated>2019-09-03T05:45:10.922Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px?from=timeline" target="_blank" rel="noopener">原文链接</a></p><ul><li>键值设计</li><li>命令使用</li><li>客户端使用</li><li>相关工具</li><li>附录【4.0遍历删除】</li></ul><p>{———-}</p><h2 id="1、键值设计"><a href="#1、键值设计" class="headerlink" title="1、键值设计"></a>1、键值设计</h2><ul><li><p>1、key名设计</p><p>   1、可读性和可管理性</p><pre><code>以业务名 (或数据库名) 为前缀 (防止 key 冲突)，用冒号分隔，比如业务名: 表名:idugc:video:1</code></pre><p>   2、简洁性</p><pre><code>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。</code></pre><p>   3、不要包含特殊字符</p><pre><code>反例：包含空格、换行、单双引号以及其他转义字符</code></pre></li><li><p>2、value设计</p><p>   1、拒绝bigkey</p><pre><code>防止网卡流量、慢查询，string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。反例：一个包含200万个元素的list。非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan、[相关文章](http://doc.redisfans.com/key/scan.html)方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，查找方法和删除方法</code></pre><p>   2、选择适合的数据类型</p><pre><code>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)。了解下，Redis 为什么这么快？    反例：    set user: 1 :name tom    set user: 1 :age 19    set user: 1 :favor football    正例:    hmset user: 1 name tom age  19 favor football</code></pre></li><li><p>3、控制key的生命周期</p><pre><code>redis不是垃圾桶，建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</code></pre></li></ul><h2 id="2、命令使用"><a href="#2、命令使用" class="headerlink" title="2、命令使用"></a>2、命令使用</h2><ul><li><p>1、O(N)命令关注N的数量</p><p>   例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。<br>   有遍历的需求可以使用hscan、sscan、zscan、<a href="http://doc.redisfans.com/key/scan.html" target="_blank" rel="noopener">相关文章</a>代替。</p></li><li><p>2、禁用命令</p><p>   禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan、<a href="http://doc.redisfans.com/key/scan.html" target="_blank" rel="noopener">相关文章</a>的方式渐进式处理。<br>   一个致命的 Redis 命令，导致公司损失 400 万！！</p></li><li><p>3、合理使用select</p><p>   redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p></li><li><p>4、使用批量操作提高效率</p><p>   原生命令：例如mget、mset。<br>   非原生命令：可以使用pipeline提高效率。</p><p>   但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p><p>   注意两者不同：</p><p>   原生是原子操作，pipeline是非原子操作。</p><p>   pipeline可以打包不同的命令，原生做不到</p><p>   pipeline需要客户端和服务端同时支持。</p></li><li><p>5、不建议过多使用Redis事务功能</p><pre><code>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)。</code></pre></li><li><p>6、Redis集群版本在使用Lua上有特殊要求</p><p>   1、所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，</p><pre><code>必须是KEYS array, 否则直接返回error，&quot;-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS arrayrn&quot;</code></pre><p>   2、所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slotrn”</p></li><li><p>7、monitor命令</p><p>   必要情况下使用monitor命令时，要注意不要长时间使用。</p></li></ul><h2 id="3、客户端使用"><a href="#3、客户端使用" class="headerlink" title="3、客户端使用"></a>3、客户端使用</h2><ul><li><p>1、避免多个应用使用一个Redis实例<br>   不相干的业务拆分，公共数据做服务化。</p></li><li><p>2、使用连接池</p><p>   可以有效控制连接，同时提高效率，标准使用方式：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jedis = jedisPool.getResource();</span><br><span class="line">    <span class="comment">//具体的命令</span></span><br><span class="line">    jedis.executeCommand()</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">"op key &#123;&#125; error: "</span> + e.getMessage(), key, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) </span><br><span class="line">        jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、熔断功能<br>   高并发下建议客户端添加熔断功能(例如netflix hystrix)</p></li><li><p>4、合理的加密<br>   设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p></li><li><p>5、淘汰策略<br>   根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</p><p>   默认策略是volatile-lru</p><pre><code>即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</code></pre><p>   其他策略如下：</p><pre><code>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。allkeys-random：随机删除所有键，直到腾出足够空间为止。volatile-random:随机删除过期键，直到腾出足够空间为止。volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息    &quot;(error) OOM command not allowed when used memory&quot;，此时Redis只响应读操作。</code></pre></li></ul><h2 id="4、相关工具"><a href="#4、相关工具" class="headerlink" title="4、相关工具"></a>4、相关工具</h2><ul><li><p>1、数据同步</p><p>redis间数据同步可以使用：redis-port</p></li><li><p>2、big key搜索</p><p>redis大key搜索工具</p></li><li><p>3、热点key寻找</p><p>内部实现使用monitor，所以建议短时间使用facebook的redis-faina<br>阿里云Redis已经在内核层面解决热点key问题</p></li></ul><h2 id="5、附录"><a href="#5、附录" class="headerlink" title="5、附录"></a>5、附录</h2><ul><li><p>1、删除 bigkey</p><pre><code>下面操作可以使用pipeline加速。redis 4.0已经支持key的异步删除，欢迎使用。</code></pre></li></ul><ul><li><p>1、Hash删除: hscan + hdel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBigHash</span><span class="params">(String host, <span class="keyword">int</span> port, String password, String bigHashKey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = <span class="keyword">new</span> ScanParams().count(<span class="number">100</span>);</span><br><span class="line">    String cursor = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span><br><span class="line">        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult();</span><br><span class="line">        <span class="keyword">if</span> (entryList != <span class="keyword">null</span> &amp;&amp; !entryList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entryList) &#123;</span><br><span class="line">                jedis.hdel(bigHashKey, entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="string">"0"</span>.equals(cursor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除bigkey</span></span><br><span class="line">    jedis.del(bigHashKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、List删除: ltrim </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void delBigList(String host, int port, String password, String bigListKey) &#123;</span><br><span class="line">    Jedis jedis = new Jedis(host, port);</span><br><span class="line">    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    long llen = jedis.llen(bigListKey);</span><br><span class="line">    int counter = 0;</span><br><span class="line">    int left = 100;</span><br><span class="line">    while (counter &lt; llen) &#123;</span><br><span class="line">        //每次从左侧截掉100个</span><br><span class="line">        jedis.ltrim(bigListKey, left, llen);</span><br><span class="line">        counter += left;</span><br><span class="line">    &#125;</span><br><span class="line">    //最终删除key</span><br><span class="line">    jedis.del(bigListKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、Set删除: sscan + srem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void delBigSet(String host, int port, String password, String bigSetKey) &#123;</span><br><span class="line">    Jedis jedis = new Jedis(host, port);</span><br><span class="line">    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = new ScanParams().count(100);</span><br><span class="line">    String cursor = &quot;0&quot;;</span><br><span class="line">    do &#123;</span><br><span class="line">        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams);</span><br><span class="line">        List&lt;String&gt; memberList = scanResult.getResult();</span><br><span class="line">        if (memberList != null &amp;&amp; !memberList.isEmpty()) &#123;</span><br><span class="line">            for (String member : memberList) &#123;</span><br><span class="line">                jedis.srem(bigSetKey, member);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; while (!&quot;0&quot;.equals(cursor));</span><br><span class="line"></span><br><span class="line">    //删除bigkey</span><br><span class="line">    jedis.del(bigSetKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4、SortedSet删除: zscan + zrem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void delBigZset(String host, int port, String password, String bigZsetKey) &#123;</span><br><span class="line">    Jedis jedis = new Jedis(host, port);</span><br><span class="line">    if (password != null &amp;&amp; !&quot;&quot;.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = new ScanParams().count(100);</span><br><span class="line">    String cursor = &quot;0&quot;;</span><br><span class="line">    do &#123;</span><br><span class="line">        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams);</span><br><span class="line">        List&lt;Tuple&gt; tupleList = scanResult.getResult();</span><br><span class="line">        if (tupleList != null &amp;&amp; !tupleList.isEmpty()) &#123;</span><br><span class="line">            for (Tuple tuple : tupleList) &#123;</span><br><span class="line">                jedis.zrem(bigZsetKey, tuple.getElement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; while (!&quot;0&quot;.equals(cursor));</span><br><span class="line"></span><br><span class="line">    //删除bigkey</span><br><span class="line">    jedis.del(bigZsetKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px?from=timeline&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键值设计&lt;/li&gt;

      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="cache" scheme="https://www.wuxinvip.com/categories/java/cache/"/>
    
    
      <category term="缓存" scheme="https://www.wuxinvip.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>zuul 熔断和重试</title>
    <link href="https://www.wuxinvip.com/2019/03/18/spring-cloud/zuul-2/"/>
    <id>https://www.wuxinvip.com/2019/03/18/spring-cloud/zuul-2/</id>
    <published>2019-03-18T00:00:00.000Z</published>
    <updated>2019-09-03T05:45:11.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zuul-重试"><a href="#zuul-重试" class="headerlink" title="zuul 重试"></a>zuul 重试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">结合spring retry</span><br><span class="line">依赖jar导入</span><br><span class="line"></span><br><span class="line">    &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework.retry/spring-retry --&gt;</span></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">    or</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/org.springframework.retry/spring-retry</span></span><br><span class="line">    compile group: <span class="string">'org.springframework.retry'</span>, name: <span class="string">'spring-retry'</span>, version: <span class="string">'1.2.4.RELEASE'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">properties</span><br><span class="line"></span><br><span class="line">    #retry</span><br><span class="line">    #是否开启重试功能</span><br><span class="line">    zuul.retryable=<span class="keyword">true</span></span><br><span class="line">    #对当前服务的重试次数</span><br><span class="line">    ribbon.MaxAutoRetries=<span class="number">2</span></span><br><span class="line">    #切换相同Server的次数</span><br><span class="line">    ribbon.MaxAutoRetriesNextServer=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">开启重试如果在短时间内大量请求重试、会造成雪崩、建议次数不要太多、根据部署的稳定性和容错性、适当调整重试次数</span><br></pre></td></tr></table></figure><p>{———-}</p><h3 id="zuul-熔断"><a href="#zuul-熔断" class="headerlink" title="zuul 熔断"></a>zuul 熔断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title:</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: wuxin</span><br><span class="line"> * @date:2019/4/17 13:27</span><br><span class="line"> * @location com.wuxinvip.apigateway.fallback.DemoFallBack.class</span><br><span class="line"> */</span><br><span class="line">public class DemoFallBack extends FallBack implements FallbackProvider &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(DemoFallBack.class);</span><br><span class="line"></span><br><span class="line">    //指定要处理的 service。</span><br><span class="line">    @Override</span><br><span class="line">    public String getRoute() &#123;</span><br><span class="line">        return &quot;project-center&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //返回响应</span><br><span class="line">    @Override</span><br><span class="line">    public ClientHttpResponse fallbackResponse(String route, Throwable cause) &#123;</span><br><span class="line">        if (cause != null &amp;&amp; cause.getCause() != null) &#123;</span><br><span class="line">            String reason = cause.getCause().getMessage();</span><br><span class="line">            logger.info(&quot;Excption &#123;&#125;&quot;,reason);</span><br><span class="line">        &#125;</span><br><span class="line">        return fallbackResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title:</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: wuxin</span><br><span class="line"> * @date:2019/4/17 13:31</span><br><span class="line"> * @location com.wuxinvip.apigateway.common.FallBackUtil.class</span><br><span class="line"> */</span><br><span class="line">public class FallBack &#123;</span><br><span class="line"></span><br><span class="line">    public ClientHttpResponse fallbackResponse() &#123;</span><br><span class="line">        return new ClientHttpResponse() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line">                return HttpStatus.OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int getRawStatusCode() throws IOException &#123;</span><br><span class="line">                return 200;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String getStatusText() throws IOException &#123;</span><br><span class="line">                return &quot;OK&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void close() &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public InputStream getBody() throws IOException &#123;</span><br><span class="line">                return new ByteArrayInputStream(&quot;The service is unavailable.&quot;.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public HttpHeaders getHeaders() &#123;</span><br><span class="line">                HttpHeaders headers = new HttpHeaders();</span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">                return headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;zuul-重试&quot;&gt;&lt;a href=&quot;#zuul-重试&quot; class=&quot;headerlink&quot; title=&quot;zuul 重试&quot;&gt;&lt;/a&gt;zuul 重试&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring boot mybatis 配置</title>
    <link href="https://www.wuxinvip.com/2019/03/18/spring-cloud/spring-boot-mybatis-config/"/>
    <id>https://www.wuxinvip.com/2019/03/18/spring-cloud/spring-boot-mybatis-config/</id>
    <published>2019-03-18T00:00:00.000Z</published>
    <updated>2019-05-24T08:40:00.756Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#MYBATIS</span><br><span class="line">#---------------------------mybatis-plus-------------------------#</span><br><span class="line"># mapper 位置</span><br><span class="line">mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml</span><br><span class="line">#实体类扫描包</span><br><span class="line">#mybatis-plus.type-aliases-package=cn.wuxinvip.demo.entity</span><br><span class="line">#主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;</span><br><span class="line">mybatis-plus.global-config.id-type=1</span><br><span class="line">#字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;</span><br><span class="line">mybatis-plus.global-config.field-strategy=2</span><br><span class="line">#驼峰下划线转换</span><br><span class="line">mybatis-plus.global-config.db-column-underline=true</span><br><span class="line">#刷新mapper 调试神器，开发环境使用，部署环境必须关掉</span><br><span class="line">mybatis-plus.global-config.refresh-mapper=true</span><br><span class="line">#数据库大写下划线转换</span><br><span class="line">#mybatis-plus.global-config.capital-mode=true</span><br><span class="line">#序列接口实现类配置</span><br><span class="line">#mybatis-plus.global-config.key-generator=com.baomidou.springboot.xxx</span><br><span class="line">#逻辑删除配置</span><br><span class="line">#mybatis-plus.global-config.logic-delete-value=0</span><br><span class="line">#mybatis-plus.global-config.logic-not-delete-value=1</span><br><span class="line">#自定义填充策略接口实现</span><br><span class="line">#mybatis-plus.global-config.meta-object-handler=com.baomidou.springboot.xxx</span><br><span class="line">#自定义SQL注入器</span><br><span class="line">#mybatis-plus.global-config.sql-injector=com.baomidou.springboot.xxx</span><br><span class="line">#mybatis-plus.global-config.meta-object-handler=cn.wuxinvip.demo.base.ObjectHandler</span><br><span class="line">#下划线转驼峰</span><br><span class="line">mybatis-plus.configuration.map-underscore-to-camel-case=true</span><br><span class="line"># 缓存开关</span><br><span class="line">mybatis-plus.configuration.cache-enabled=false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>zuul 配置</title>
    <link href="https://www.wuxinvip.com/2019/03/17/spring-cloud/zuul-1/"/>
    <id>https://www.wuxinvip.com/2019/03/17/spring-cloud/zuul-1/</id>
    <published>2019-03-17T00:00:00.000Z</published>
    <updated>2019-09-03T05:45:10.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zuul-配置"><a href="#zuul-配置" class="headerlink" title="zuul 配置"></a>zuul 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#url转发</span><br><span class="line">#zuul.routes.api-a-url.path=/api-a/**</span><br><span class="line">#zuul.routes.api-a-url.url=http://127.0.0.1:9000/</span><br><span class="line"></span><br><span class="line">#结合eureka 进行服务转发</span><br><span class="line">zuul.routes.agent.path=/project/**</span><br><span class="line">zuul.routes.agent.serviceId=project-center</span><br><span class="line"></span><br><span class="line">zuul.routes.user-center.path=/uc/**</span><br><span class="line">zuul.routes.user-center.serviceId=user-center</span><br><span class="line"></span><br><span class="line">zuul.routes.eureka=/eureka/**</span><br><span class="line">zuul.routes.eureka.serviceId=eureka-server</span><br><span class="line"></span><br><span class="line">#此外结合eureka </span><br><span class="line">eureka.client.service-url.defaultZone=http://eureka.wuxinvip.com/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#以及结合config配置【以下配置需要放到bootstrap.properties中】</span><br><span class="line"></span><br><span class="line">#可以通过eureka注册中心获取配置中心</span><br><span class="line">spring.application.name=api-gateway</span><br><span class="line">#eureka.client.service-url.defaultZone=http://eureka.wuxinvip.com/</span><br><span class="line">#spring.cloud.config.discovery.enabled=true</span><br><span class="line">#spring.cloud.config.discovery.service-id=CONFIG-SERVER</span><br><span class="line"></span><br><span class="line">#也可以采用此种配置获取uri地址</span><br><span class="line">spring.application.name=api-gateway</span><br><span class="line">spring.cloud.config.uri=http://config.wuxinvip.com</span><br></pre></td></tr></table></figure><p>{———-}</p><h3 id="zuul自定义拦截器"><a href="#zuul自定义拦截器" class="headerlink" title="zuul自定义拦截器"></a>zuul自定义拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 无心</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>:2019/4/17 13:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@location</span> com.wuxinvip.apigateway.route.DemoFilter.class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DemoFilter.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//前置过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//优先级，数字越大，优先级越低</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否执行该过滤器，true代表需要过滤</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取传来的参数accessToken</span></span><br><span class="line">        Object accessToken = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">        <span class="comment">//toke验证 可以选择连接redis、也可以选择连接权限组件、</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里return的值没有意义，zuul框架没有使用该返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;zuul-配置&quot;&gt;&lt;a href=&quot;#zuul-配置&quot; class=&quot;headerlink&quot; title=&quot;zuul 配置&quot;&gt;&lt;/a&gt;zuul 配置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/categories/java/spring-cloud/"/>
    
    
      <category term="spring-cloud" scheme="https://www.wuxinvip.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度遍历与广度遍历</title>
    <link href="https://www.wuxinvip.com/2019/03/16/jdk/jdk-tree-2/"/>
    <id>https://www.wuxinvip.com/2019/03/16/jdk/jdk-tree-2/</id>
    <published>2019-03-15T16:00:00.000Z</published>
    <updated>2019-09-03T05:45:11.900Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）"><a href="#二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）" class="headerlink" title="二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）"></a>二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）</h4><p><strong>  深度优先遍历：从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。 </strong></p><p><strong>  广度优先遍历：从根节点出发，在横向遍历二叉树层段节点的基础上纵向遍历二叉树的层次。 </strong><br>{———-}</p><p><img src="/img/jdk/jdk-tree-2.png" alt="jdktree"></p><pre><code>DFS:A-B-D-E-C-F-GBFS:A-B-C-D-E-F-GDFS实现：数据结构：栈父节点入栈，父节点出栈，先右子节点入栈，后左子节点入栈。递归遍历全部节点即可BFS实现：数据结构：队列父节点入队，父节点出队列，先左子节点入队，后右子节点入队。递归遍历全部节点即可</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line">#include &lt;Stack&gt;</span><br><span class="line">#include &lt;Queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    char data;</span><br><span class="line">    struct Node *lchild;</span><br><span class="line">    struct Node *rchild;</span><br><span class="line">&#125; *Tree;</span><br><span class="line">//Tree 是一个node指针的类型定义</span><br><span class="line"> </span><br><span class="line">int index = 0;  //全局索引变量</span><br><span class="line">//二叉树构造器,按先序遍历顺序构造二叉树</span><br><span class="line">//无左子树或右子树用&apos;#&apos;表示</span><br><span class="line">void treeNodeConstructor(Tree &amp;root, char data[])&#123;</span><br><span class="line">    char e = data[index++];</span><br><span class="line">    if(e == &apos;#&apos;)&#123;</span><br><span class="line">        root = NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        root = (Node *)malloc(sizeof(Node));</span><br><span class="line">        root-&gt;data = e;</span><br><span class="line">        treeNodeConstructor(root-&gt;lchild, data);  //递归构建左子树</span><br><span class="line">        treeNodeConstructor(root-&gt;rchild, data);  //递归构建右子树</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//深度优先遍历</span><br><span class="line">void depthFirstSearch(Tree root)&#123;</span><br><span class="line">    stack&lt;Node *&gt; nodeStack;  //使用C++的STL标准模板库</span><br><span class="line">    nodeStack.push(root);</span><br><span class="line">    Node *node;</span><br><span class="line">    while(!nodeStack.empty())&#123;</span><br><span class="line">    node = nodeStack.top();</span><br><span class="line">cout&lt;&lt;node-&gt;data;//遍历根结点</span><br><span class="line">        nodeStack.pop();</span><br><span class="line">        if(node-&gt;rchild)&#123;</span><br><span class="line">            nodeStack.push(node-&gt;rchild);  //先将右子树压栈</span><br><span class="line">        &#125;</span><br><span class="line">        if(node-&gt;lchild)&#123;</span><br><span class="line">            nodeStack.push(node-&gt;lchild);  //再将左子树压栈</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//广度优先遍历</span><br><span class="line">void breadthFirstSearch(Tree root)&#123;</span><br><span class="line">    queue&lt;Node *&gt; nodeQueue;  //使用C++的STL标准模板库</span><br><span class="line">    nodeQueue.push(root);</span><br><span class="line">    Node *node;</span><br><span class="line">    while(!nodeQueue.empty())&#123;</span><br><span class="line">        node = nodeQueue.front();</span><br><span class="line">        nodeQueue.pop();</span><br><span class="line">        cout&lt;&lt;node-&gt;data;//遍历根结点</span><br><span class="line">        if(node-&gt;lchild)&#123;</span><br><span class="line">            nodeQueue.push(node-&gt;lchild);  //先将左子树入队</span><br><span class="line">        &#125;</span><br><span class="line">        if(node-&gt;rchild)&#123;</span><br><span class="line">            nodeQueue.push(node-&gt;rchild);  //再将右子树入队</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    //上图所示的二叉树先序遍历序列,其中用&apos;#&apos;表示结点无左子树或无右子树</span><br><span class="line">    char data[15] = &#123;&apos;A&apos;, &apos;B&apos;, &apos;D&apos;, &apos;#&apos;, &apos;#&apos;, &apos;E&apos;, &apos;#&apos;, &apos;#&apos;, &apos;C&apos;, &apos;F&apos;,&apos;#&apos;, &apos;#&apos;, &apos;G&apos;, &apos;#&apos;, &apos;#&apos;&#125;;</span><br><span class="line">    Tree tree;</span><br><span class="line">    treeNodeConstructor(tree, data);</span><br><span class="line">    printf(&quot;深度优先遍历二叉树结果: &quot;);</span><br><span class="line">    depthFirstSearch(tree);</span><br><span class="line">    printf(&quot;\n\n广度优先遍历二叉树结果: &quot;);</span><br><span class="line">    breadthFirstSearch(tree);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/mingwanganyu/article/details/72033122#commentBox" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&quot;&gt;&lt;a href=&quot;#二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&quot; class=&quot;headerlink&quot; title=&quot;二叉树的深度优先遍历（DFS）与广度优先遍历（BFS）&quot;&gt;&lt;/a&gt;二叉树的深
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="jdk" scheme="https://www.wuxinvip.com/categories/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://www.wuxinvip.com/tags/jdk/"/>
    
  </entry>
  
</feed>
