<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>上善若水の技术簿</title>
  
  <subtitle>时光荏苒、不浮青春.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wuxinvip.com/"/>
  <updated>2018-12-09T14:03:41.724Z</updated>
  <id>https://www.wuxinvip.com/</id>
  
  <author>
    <name>上善若水</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rocketmq使用示例</title>
    <link href="https://www.wuxinvip.com/2018/12/08/message-queue/rocketmq/04/"/>
    <id>https://www.wuxinvip.com/2018/12/08/message-queue/rocketmq/04/</id>
    <published>2018-12-08T00:00:00.000Z</published>
    <updated>2018-12-09T14:03:41.724Z</updated>
    
    <content type="html"><![CDATA[<ul><li>spring cloud中集成rocketmq</li></ul><a id="more"></a><h2 id="spring-cloud中集成rocketmq"><a href="#spring-cloud中集成rocketmq" class="headerlink" title="spring cloud中集成rocketmq"></a>spring cloud中集成rocketmq</h2><p><a href="https://github.com/wuxinvip/base-cloud/tree/2.0.X-boot/message-queue" target="_blank" rel="noopener">代码地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  接收bean 将消息发送到spring event事件中进行处理 解耦数据处理</span><br><span class="line"> *  屏蔽rockemq的依赖性 可以不影响业务转换别的消息组件</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ConsumerMessageListener implements MessageListener &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(ConsumerMessageListener.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    public Action consume(Message message, ConsumeContext context) &#123;</span><br><span class="line">        System.out.println(&quot;Receive: &quot; + message);</span><br><span class="line">        try &#123;</span><br><span class="line">            logger.info(&quot;rocket 接收到消息:&#123;&#125;&quot;,message);</span><br><span class="line">            //do something..</span><br><span class="line">            applicationContext.publishEvent(new RocketmqEvent(message));</span><br><span class="line"></span><br><span class="line">            return Action.CommitMessage; //消息处理正常</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            //消费失败</span><br><span class="line">            logger.error(&quot;rocket 消息处理失败 ：&#123;&#125;&quot;,message);</span><br><span class="line">            return Action.ReconsumeLater;//消息加入重试</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收示例</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @EventListener(condition = &quot;#event.topic==&apos;your.topic&apos; &amp;&amp; #event.tag==&apos;your.tag&apos;&quot;)</span><br><span class="line">    public void MessageListener(RocketmqEvent rocketmqEvent) throws IOException &#123;</span><br><span class="line">        String string = rocketmqEvent.getMsg();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 发送bean类</span><br><span class="line"> *  引用统一发送 解耦数据处理 </span><br><span class="line"> *  屏蔽rockemq的依赖性 可以不影响业务转换别的消息组件</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class MessageQueueTemplate &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    ProducerBean producerBean;</span><br><span class="line"></span><br><span class="line">    public void send(RocketmqEvent rocketmqEvent)&#123;</span><br><span class="line"></span><br><span class="line">        Message message = new Message();</span><br><span class="line">        message.setTopic(rocketmqEvent.getTopic());</span><br><span class="line">        message.setTag(rocketmqEvent.getTag());</span><br><span class="line">        message.setBody(rocketmqEvent.getMsg().getBytes());</span><br><span class="line">        producerBean.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;spring cloud中集成rocketmq&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rocketmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rocketmq/"/>
    
    
      <category term="RocketMQ" scheme="https://www.wuxinvip.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq图解</title>
    <link href="https://www.wuxinvip.com/2018/12/07/message-queue/rocketmq/03/"/>
    <id>https://www.wuxinvip.com/2018/12/07/message-queue/rocketmq/03/</id>
    <published>2018-12-07T00:00:00.000Z</published>
    <updated>2018-12-09T13:57:54.285Z</updated>
    
    <content type="html"><![CDATA[<ul><li>组件结构图</li></ul><a id="more"></a><h2 id="RocketMQ-各个角色关系"><a href="#RocketMQ-各个角色关系" class="headerlink" title="RocketMQ 各个角色关系"></a>RocketMQ 各个角色关系</h2><p><img src="/img/rocketmq/01.jpg" alt="rocketmq组件结构图"></p><ul><li>与kafka区别就是 kafka使用zk来管理服务注册、rocketmq用的自己的rpc【nameserver】</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;组件结构图&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rocketmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rocketmq/"/>
    
    
      <category term="RocketMQ" scheme="https://www.wuxinvip.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq安装</title>
    <link href="https://www.wuxinvip.com/2018/12/06/message-queue/rocketmq/02/"/>
    <id>https://www.wuxinvip.com/2018/12/06/message-queue/rocketmq/02/</id>
    <published>2018-12-06T00:00:00.000Z</published>
    <updated>2018-12-09T13:40:17.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#   基础环境</span><br><span class="line">64bit OS, Linux/Unix/Mac is recommended;</span><br><span class="line">64bit JDK 1.8+;</span><br><span class="line">Maven 3.2.x;</span><br><span class="line">Git;</span><br><span class="line">4g+ free disk for Broker server</span><br><span class="line"></span><br><span class="line">curl -L -O https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-bin-release.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; unzip rocketmq-all-4.3.2-source-release.zip</span><br><span class="line">  &gt; cd rocketmq-all-4.3.2/</span><br><span class="line">  &gt; mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line">  &gt; cd distribution/target/apache-rocketmq</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#启动nameserver</span><br><span class="line"></span><br><span class="line">&gt; nohup sh bin/mqnamesrv &amp;</span><br><span class="line">&gt; tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">The Name Server boot success...</span><br><span class="line">#启动broker</span><br><span class="line">&gt; nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line">&gt; tail -f ~/logs/rocketmqlogs/broker.log </span><br><span class="line">The broker[%s, 172.30.30.233:10911] boot success...</span><br><span class="line"></span><br><span class="line">#发送消息</span><br><span class="line">&gt; export NAMESRV_ADDR=localhost:9876</span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId= ...</span><br><span class="line"></span><br><span class="line">&gt; sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line">ConsumeMessageThread_%d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; sh bin/mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line">&gt; sh bin/mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#   基础环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64bit OS, Linux/Unix/Mac is recommended;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64bit JDK 1.8+;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Maven 3.2.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Git;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4g+ free disk for Broker server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -L -O https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-bin-release.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; unzip rocketmq-all-4.3.2-source-release.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; cd rocketmq-all-4.3.2/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; mvn -Prelease-all -DskipTests clean install -U&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; cd distribution/target/apache-rocketmq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rocketmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rocketmq/"/>
    
    
      <category term="RocketMQ" scheme="https://www.wuxinvip.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq简介</title>
    <link href="https://www.wuxinvip.com/2018/12/05/message-queue/rocketmq/01/"/>
    <id>https://www.wuxinvip.com/2018/12/05/message-queue/rocketmq/01/</id>
    <published>2018-12-05T00:00:00.000Z</published>
    <updated>2018-12-09T13:40:17.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>互联网应用拆分为微服务、解决各个微服务模块的互相通信问题、并能够提供大流量技术支撑</li></ul><a id="more"></a><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>微服务之间的通信问题<ul><li>具体的业务场景有很多、比如、支付完成后的订单状态修改、用户充值后的vip等级提升、物流信息等等</li><li>各个微服务之间的消息、业务场景有：按实时性可分为实时消息、非实时消息；</li></ul></li></ul><h2 id="组成部件"><a href="#组成部件" class="headerlink" title="组成部件"></a>组成部件</h2><ul><li>rocketmq 有两个部件 nameserver：服务管理中心、broker：消息存储中心<ul><li>nameserver管理业务服务注册、保证服务稳定运行</li><li>broker负责消息的持久化、保证消息不丢失</li></ul></li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul><li>应用解耦<ul><li>替换应用上的https协议、又能保证服务之间的动态性</li></ul></li><li>流量削峰<ul><li>非即时消息、延后处理</li></ul></li><li>消息分发<ul><li>消息生产者只负责消息生产、消息消费者只负责消息消费、只管把消息发到消息队列、而不关心、哪台服务消费这个消息</li><li>消息轮询消费、不会造成只在某一台机器上消费、压跨服务器</li></ul></li><li>保证分布式事务的最终一致性</li><li>动态扩容</li></ul><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><ul><li>目前已是apache的顶级项目、</li><li>2017年双十一的主要驱动力、处理消息万亿级别、tps:5600万</li><li>java语言开发、对java开发者亲和度较高</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li><p>rocketmq、rabbitmq、kafka</p><ul><li>没有谁好谁坏</li><li>kafka起源最早、解决消息流处理问题、最早解决监控平台对各个服务模块的消息监控、</li><li>rabbitmq、采用AMQP协议开发、建立了最早的消息模型、定义了消息驱动模式、</li><li>rocketmq、类似于kafka、不过语言是java、经历了阿里的双十一足以证明它的性能。</li></ul></li><li><p>个人见解</p><ul><li>吞吐量优先、消息丢失小事、选择kafka、kafka的吞吐量要强一个量级</li><li>稳定不丢消息：rocketmq、tabbitmq、</li><li>rabbitmq底层是erlang语言、erlang语言特性、并发性能优秀、</li><li>rocketmq底层netty、异步机制优秀</li><li>实时性要求高、同时又要求高的吞吐量 rabbitmq</li><li>非实时性要求高、同时又要求高吞吐量 rocketmq</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;互联网应用拆分为微服务、解决各个微服务模块的互相通信问题、并能够提供大流量技术支撑&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rocketmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rocketmq/"/>
    
    
      <category term="RocketMQ" scheme="https://www.wuxinvip.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>app版本更新</title>
    <link href="https://www.wuxinvip.com/2018/12/04/version/version-1/"/>
    <id>https://www.wuxinvip.com/2018/12/04/version/version-1/</id>
    <published>2018-12-04T00:00:00.000Z</published>
    <updated>2018-12-10T02:27:09.033Z</updated>
    
    <content type="html"><![CDATA[<p>app版本更新 </p><h2 id="v1-1-0"><a href="#v1-1-0" class="headerlink" title="v1.1.0"></a>v1.1.0</h2><ul><li><a href="https://github.com/wuxinvip/wuxinvip.github.io/releases/download/1.1.0/com.wuxinvip.blog_v1.1.0.apk" target="_blank" rel="noopener">下载地址</a></li><li>新增分享功能</li><li>更新微信分享 选择性微信朋友圈和微信好友分享</li><li>修复返回直接退出问题</li></ul><h2 id="v1-0-0"><a href="#v1-0-0" class="headerlink" title="v1.0.0"></a>v1.0.0</h2><ul><li><a href="https://github.com/wuxinvip/wuxinvip.github.io/releases/download/1.0.0/com.wuxinvip.blog.apk" target="_blank" rel="noopener">下载地址</a></li></ul><p><a href="https://gra.u2sk.com/?url=https://github.com/wuxinvip/wuxinvip.github.io" target="_blank" rel="noopener">下载次数</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;app版本更新 &lt;/p&gt;
&lt;h2 id=&quot;v1-1-0&quot;&gt;&lt;a href=&quot;#v1-1-0&quot; class=&quot;headerlink&quot; title=&quot;v1.1.0&quot;&gt;&lt;/a&gt;v1.1.0&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuxinvip/wuxinvip.github.io/releases/download/1.1.0/com.wuxinvip.blog_v1.1.0.apk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新增分享功能&lt;/li&gt;
&lt;li&gt;更新微信分享 选择性微信朋友圈和微信好友分享&lt;/li&gt;
&lt;li&gt;修复返回直接退出问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;v1-0-0&quot;&gt;&lt;a href=&quot;#v1-0-0&quot; class=&quot;headerlink&quot; title=&quot;v1.0.0&quot;&gt;&lt;/a&gt;v1.0.0&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wuxinvip/wuxinvip.github.io/releases/download/1.0.0/com.wuxinvip.blog.apk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://gra.u2sk.com/?url=https://github.com/wuxinvip/wuxinvip.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载次数&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="app" scheme="https://www.wuxinvip.com/categories/app/"/>
    
      <category term="version" scheme="https://www.wuxinvip.com/categories/app/version/"/>
    
    
      <category term="app版本更新" scheme="https://www.wuxinvip.com/tags/app%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>kafka构建数据管道需要注意的问题</title>
    <link href="https://www.wuxinvip.com/2018/12/01/message-queue/kafka/09/"/>
    <id>https://www.wuxinvip.com/2018/12/01/message-queue/kafka/09/</id>
    <published>2018-12-01T00:00:00.000Z</published>
    <updated>2018-12-09T12:54:33.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka构建数据管道需要注意的问题"><a href="#kafka构建数据管道需要注意的问题" class="headerlink" title="kafka构建数据管道需要注意的问题"></a>kafka构建数据管道需要注意的问题</h2><ul><li>及时性</li><li>可靠性</li><li>高吞吐量和动态吞吐量</li><li>数据格式</li><li>转换</li><li>安全性</li><li>故障处理能力</li><li>耦合性和灵活性</li></ul><a id="more"></a><h2 id="及时性"><a href="#及时性" class="headerlink" title="及时性"></a>及时性</h2><ul><li>在业务需求变更时、具有不同及时性需求的数据之间可以方便的进行迁移</li><li>数据支持实时性处理、也支持延迟批处理</li><li>消费者可以实时拉取处理、也可以延迟批量处理一批数据</li></ul><h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><ul><li>能够在各种故障中快速回复</li><li>支持、至少一次传递【本身支持】</li><li>支持、仅一次传递、避免幂等消费【需结合实物模型或者唯一键特性的外部存储系统】</li></ul><h2 id="高吞吐量和动态吞吐量"><a href="#高吞吐量和动态吞吐量" class="headerlink" title="高吞吐量和动态吞吐量"></a>高吞吐量和动态吞吐量</h2><ul><li>自动伸缩功能</li><li>管理员可以调整压缩来网络和存储资源的使用【支持多种类型压缩】</li></ul><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><ul><li>avro、xml也可以使用自定义</li><li>读取数据源schema载入数据</li></ul><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><ul><li>ETL【提取、转换、加载】<ul><li>过滤掉部分数据、为下游服务过滤不必要数据信息</li><li>缺点、下游的调整可能需要重新调整数据管道</li></ul></li><li>ELT【提取、加载、转换】<ul><li>高保真数据管道、数据湖结构</li><li>占用了目标系统太多的CPU和存储资源、使得目标系统造价高昂、不过也给下游保证了最原始的数据、利于调整需求</li></ul></li></ul><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><ul><li>支持加密数据、</li><li>支持认证【SASL实现】、授权消费</li><li>支持数据追踪、时间来源、事件修改者、日志审计、访问记录</li></ul><h2 id="故障处理能力"><a href="#故障处理能力" class="headerlink" title="故障处理能力"></a>故障处理能力</h2><ul><li>数据保留一周、一月、任意时间以便于追溯</li></ul><h2 id="耦合性和灵活性"><a href="#耦合性和灵活性" class="headerlink" title="耦合性和灵活性"></a>耦合性和灵活性</h2><ul><li><p>临时数据管道</p><ul><li>常用数据管道<ul><li>logstash—–&gt; elasticsearch</li><li>flume——&gt; HDFS</li><li>GoldenGate——&gt;Oracle</li><li>mysql【xml】——–&gt;Informatica——-&gt;oracle</li><li>当有新的需求时候有需要重新构建新的管道、增加新技术成本</li></ul></li></ul></li><li><p>元数据丢失</p><ul><li>元数据没有保留schema数据、导致数据交换过程中、没有处理元数据新增字段【因为新的schema中没有该字段】</li><li>而如果数据管道允许修改schema信息、那么双方只需要修改内部数据处理就可以了</li></ul></li><li><p>末端处理</p><ul><li>让下端可以自己决定数据处理、而不是数据管道直接处理、直接处理会对下游数据的完整性造成破坏<br>同时新的需求更迭、也会造成成本提升</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kafka构建数据管道需要注意的问题&quot;&gt;&lt;a href=&quot;#kafka构建数据管道需要注意的问题&quot; class=&quot;headerlink&quot; title=&quot;kafka构建数据管道需要注意的问题&quot;&gt;&lt;/a&gt;kafka构建数据管道需要注意的问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;及时性&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;高吞吐量和动态吞吐量&lt;/li&gt;
&lt;li&gt;数据格式&lt;/li&gt;
&lt;li&gt;转换&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;li&gt;故障处理能力&lt;/li&gt;
&lt;li&gt;耦合性和灵活性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群复制</title>
    <link href="https://www.wuxinvip.com/2018/11/30/message-queue/kafka/08/"/>
    <id>https://www.wuxinvip.com/2018/11/30/message-queue/kafka/08/</id>
    <published>2018-11-30T00:00:00.000Z</published>
    <updated>2018-12-07T08:29:04.669Z</updated>
    
    <content type="html"><![CDATA[<ul><li>kafka集群复制</li><li>kafka数据结构</li><li>kafka请求处理流程</li><li>kafka消息格式</li></ul><a id="more"></a><h2 id="kafka集群复制"><a href="#kafka集群复制" class="headerlink" title="kafka集群复制"></a>kafka集群复制</h2><h3 id="kafka数据结构"><a href="#kafka数据结构" class="headerlink" title="kafka数据结构"></a>kafka数据结构</h3><ul><li>kafka是以主题来组织数据</li><li>每个主题下有多个分区、每个分区下有多个副本【数据元】、</li><li>【玩过 mongodb 和 elasticsearch 的一看就懂、一个东西】</li><li>每个broker可以存储不同主题和不同分区的副本</li><li>副本分为两种<ul><li>首领副本【数据存储、对接客户端请求、消费】</li><li>跟随者副本【数据备份、不处理来自客户端的任何请求、待首领挂掉、迅速顶上】</li><li>另、首领还会处理副本的备份请求、以判断哪个副本是最新的、最新的版本才可以当“储君”</li></ul></li></ul><h4 id="图纸解说"><a href="#图纸解说" class="headerlink" title="图纸解说"></a>图纸解说</h4><p><img src="/img/kafka/04.png" alt="kafka储存结构"></p><ul><li>照了一张差不多的图、不是kafka的、是es的 不过解释起来足够了</li><li>主节点 node3、为broker协调者</li><li>所有数据都是一个主题topic通过tag来区分数据【一般一个应用要给同topic、这里就当1个多个tag、】</li><li>每个tag下有很多数据、每个数据有多个副本、【这里配置就2个、一个首领副本、一个跟随着副本】</li></ul><h3 id="kafka请求处理流程"><a href="#kafka请求处理流程" class="headerlink" title="kafka请求处理流程"></a>kafka请求处理流程</h3><h4 id="图纸解说-1"><a href="#图纸解说-1" class="headerlink" title="图纸解说"></a>图纸解说</h4><p><img src="/img/kafka/05.jpg" alt="kafka请求流程"></p><ul><li>请求通过processor线程发向请求队列、处理IO逻辑、将响应发向响应队列</li></ul><h3 id="kafka消息格式"><a href="#kafka消息格式" class="headerlink" title="kafka消息格式"></a>kafka消息格式</h3><ul><li>Request type 【API key】</li><li>Request version 【version版本号】</li><li>Correlation ID【消息唯一id】</li><li>Client ID【客户端唯一id】</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;kafka集群复制&lt;/li&gt;
&lt;li&gt;kafka数据结构&lt;/li&gt;
&lt;li&gt;kafka请求处理流程&lt;/li&gt;
&lt;li&gt;kafka消息格式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka消费者接收和配置</title>
    <link href="https://www.wuxinvip.com/2018/11/29/message-queue/kafka/07/"/>
    <id>https://www.wuxinvip.com/2018/11/29/message-queue/kafka/07/</id>
    <published>2018-11-29T00:00:00.000Z</published>
    <updated>2018-12-07T07:50:05.892Z</updated>
    
    <content type="html"><![CDATA[<ul><li>kafka消息接收方式</li><li>kafka消息偏移量提交</li><li><p>kafka序列化</p></li><li><p>kafka消费者配置</p></li></ul><a id="more"></a><h2 id="kafka消息接收方式"><a href="#kafka消息接收方式" class="headerlink" title="kafka消息接收方式"></a>kafka消息接收方式</h2><ul><li>kafka有两种消息接收方式、1:主动拉取、2:服务器端推送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * kafka消费者</span><br><span class="line"> */</span><br><span class="line">public void test04() &#123;</span><br><span class="line">    Properties properties = new Properties();</span><br><span class="line">    properties.put(&quot;bootstrap.servers&quot;, &quot;broker1:9002,broker2:9002&quot;);</span><br><span class="line">    properties.put(&quot;group.id&quot;, &quot;CountryCounter&quot;);</span><br><span class="line">    properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">    properties.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">    KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line">    //订阅主题</span><br><span class="line">    consumer.subscribe(Collections.singletonList(&quot;customerCountries&quot;));</span><br><span class="line">    //订阅所有主题</span><br><span class="line">    consumer.subscribe(Collections.singletonList(&quot;test.*&quot;));</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                logger.debug(&quot;topic=%s,partition=%s,offset=%d,constomer=%s,country=%s\n&quot;,</span><br><span class="line">                        record.topic(),record.partition(),record.offset(),record.key(),record.value());</span><br><span class="line"></span><br><span class="line">                //todo 执行消费逻辑</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kafka消息偏移量提交"><a href="#kafka消息偏移量提交" class="headerlink" title="kafka消息偏移量提交"></a>kafka消息偏移量提交</h2><ul><li>提交已处理消息标记位</li></ul><h2 id="kafka序列化"><a href="#kafka序列化" class="headerlink" title="kafka序列化"></a>kafka序列化</h2><ul><li>kafka使用avro序列化</li><li>可以看这边文章、<a href="https://www.wuxinvip.com/2018/11/10/essay/avro/">Apache Avro</a></li></ul><h2 id="kafka消费者配置"><a href="#kafka消费者配置" class="headerlink" title="kafka消费者配置"></a>kafka消费者配置</h2><ul><li>fetch.min.bytes<ul><li>指定消费者从服务器获取记录的最小字节数</li></ul></li><li>fetch.max.wait.ms<ul><li>累积多少时间把数据返还给消费者</li><li>数值大、吞吐量大、延迟高、</li><li>数值小、吞吐量小、延迟低、</li></ul></li><li><p>max.partition.fetch.bytes</p><ul><li>指定每个分区返给消费者的最大字节数、默认值1MB</li><li>如果有20个分区、5个消费者、那么这里就可以配置4MB</li><li>该值一定要大于broker能够接收数据最大值、否则会一直挂起重试</li></ul></li><li><p>session.timeout.ms</p><ul><li>指定消费者在被认为死亡之前可以与服务器断开连接时间、默认3s</li><li>如果规定时间内没有发送心跳、认为死亡、触发再均衡</li></ul></li><li><p>auto.offset.reset</p><ul><li>指定 消费者在读取一个没有偏移量的分区或者偏移量无效情况下（因消费者长时间失效、包含偏移量的记录已经过时并被删除）该如何处理</li><li>默认值 latest、最新数据</li><li>earliest 在偏移量无效情况下、消费者将从起始位置读取分区记录【幂等消费？】</li></ul></li><li><p>enable.auto.commit</p><ul><li>指定消费者是否自动提交偏移量 默认值true</li></ul></li><li><p>partition.assignment.strategy</p><ul><li>指定分配主题分区给消费者的分配策略</li><li>Range   轮询、如果分区数量大于消费者数量、那么排在前面的消费者会被分配到更多的分区</li><li>RoundRobin  给消费者分配更加平等数量的分区、或者最多小差一个分区</li></ul></li><li><p>client.id</p><ul><li>分区id 标识分区唯一、以及客户端、识别消息、也被用在日志和度量指标和配额里</li></ul></li><li><p>max.poll.records</p><ul><li>指定单次调用call()方法能够返回的记录数量</li></ul></li><li><p>receive.buffer.bytes、send.buffer.bytes</p><ul><li>socket在读写数据时用到的TCP缓冲区 -1使用系统默认值</li><li>如果消费者和生产者不再统一数据中心内、可以适当增大该值</li></ul></li></ul><h2 id="kafka消费者注意点"><a href="#kafka消费者注意点" class="headerlink" title="kafka消费者注意点"></a>kafka消费者注意点</h2><ul><li>消费者数量大于主题分区数量、否则消费者会被闲置；比如5个主题分区、4个消费者、那么会有一个主题分区会被闲置</li></ul><ul><li>再均衡<ul><li>分区所有权从一个消费者转移到另一个消费者、这样的行为被称为再均衡</li><li>再均衡期间、消费者不能消费消息</li><li>也是这样的设置、能是消费者分区能动态增减</li><li>维持：消费者通过向消费者协调者broker发送心跳、来维持他们与群组的从属关系以及他们对分区的所有权关系</li><li>消费者死亡、消费协调者broker会等待几秒钟、确认死亡后会触发再均衡</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;kafka消息接收方式&lt;/li&gt;
&lt;li&gt;kafka消息偏移量提交&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka序列化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka消费者配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka生产者发送和配置</title>
    <link href="https://www.wuxinvip.com/2018/11/28/message-queue/kafka/06/"/>
    <id>https://www.wuxinvip.com/2018/11/28/message-queue/kafka/06/</id>
    <published>2018-11-28T00:00:00.000Z</published>
    <updated>2018-12-06T08:59:54.351Z</updated>
    
    <content type="html"><![CDATA[<ul><li>kafka消息发送</li><li>kafka消息同步发送</li><li><p>kafka消息异步发送</p></li><li><p>kafka生产者配置</p></li></ul><a id="more"></a><h2 id="kafka消息发送"><a href="#kafka消息发送" class="headerlink" title="kafka消息发送"></a>kafka消息发送</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 最简单发送</span><br><span class="line">     */</span><br><span class="line">    public void test01() &#123;</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">                new ProducerRecord&lt;&gt;(&quot;CustomerCountory&quot;, &quot;Precision Products&quot;, &quot;France&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            producer.send(record);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="kafka消息同步发送"><a href="#kafka消息同步发送" class="headerlink" title="kafka消息同步发送"></a>kafka消息同步发送</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * kafka同步发送</span><br><span class="line"> */</span><br><span class="line">public void test02() &#123;</span><br><span class="line">    ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">            new ProducerRecord&lt;&gt;(&quot;CustomerCountory&quot;, &quot;Precision Products&quot;, &quot;France&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        Future result = producer.send(record);</span><br><span class="line">        result.get();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kafka消息异步发送"><a href="#kafka消息异步发送" class="headerlink" title="kafka消息异步发送"></a>kafka消息异步发送</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * kafka 异步发送</span><br><span class="line"> */</span><br><span class="line">public void test03()&#123;</span><br><span class="line">    ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">            new ProducerRecord&lt;&gt;(&quot;CustomerCountory&quot;, &quot;Precision Products&quot;, &quot;France&quot;);</span><br><span class="line">    try&#123;</span><br><span class="line">        Future result = producer.send(record,new DemoProducerCallback());</span><br><span class="line">        result.get();</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DemoProducerCallback implements Callback &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCompletion(RecordMetadata recordMetadata, Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kafka生产者配置"><a href="#kafka生产者配置" class="headerlink" title="kafka生产者配置"></a>kafka生产者配置</h2><ul><li><p>acks</p><ul><li>acks = 0<ul><li>不回调通知</li></ul></li><li>acks = a<ul><li>只保存首领节点、即返回消息确认</li></ul></li><li>acks = all<ul><li>保存首领节点和所有副节点后、即返回消息确认</li></ul></li></ul></li><li><p>buffer.memory</p><ul><li>设置生产者内存缓存大小、生产者又来缓冲发送到服务器的消息、</li><li>0.9.00版本中、被替换为max.block.ms 表示抛出异常前可以阻塞一段时间</li></ul></li><li><p>compression.type</p><ul><li>消息压缩、可设置为snappy、gzip、lz4</li><li>指定消息被发送给broker之前使用哪一种压缩算法进行压缩</li></ul></li><li><p>retries</p><ul><li>重试次数</li><li>默认每次重试等待100ms、可以通过retry.backoff.ms 设置</li><li>一般首领选举中易发生重试、建议该时间大于选举时间、崩溃恢复时间长等</li></ul></li><li><p>batch.size</p><ul><li>消息批次大小、累积到一定大小发送消息</li></ul></li><li><p>linger.ms</p><ul><li>指定生产者在发送批次之前等待更多消息加入批次时间</li><li>消息发送两个控制点、一个是累计大小、一个是这个时间、规定时间内没有达到累积值、也要发送消息</li></ul></li><li><p>client.id</p><ul><li>可以设置任意字符串</li><li>服务器用来判断消息来源、用来标记消息</li></ul></li><li><p>max.in.flight.requests.pre.connection</p><ul><li>指定、生产者在受到服务器响应之前可以发送多少个消息、</li><li>值越高、就会占用更多内存、也会提升吞吐量、</li><li>设置为1 可保证消息桉顺序写入broker服务器</li></ul></li><li><p>timeout.ms、request.timeout.ms、metadata.fetch.timeout.ms</p><ul><li>timeout.ms 生产者发送数据时等待服务器返回响应时间</li><li>request.timeout.ms 指定生产者在获取元数据（比如broker首领是谁）等待服务器返回响应时间、超时重试</li><li>metadata.fetch.timeout.ms 指定 broker等待同步副本返回消息确认时间、超时认为失败</li></ul></li></ul><ul><li><p>max.block.ms</p><ul><li>指定调用send方法或者使用partitionFor()方法获取元数据生产者的阻塞时间</li><li>超时抛出异常</li></ul></li><li><p>max.request.size</p><ul><li>控制生产者发送消息大小、单个请求大小、单个请求中一个批次消息的总大小</li></ul></li><li><p>receive.buffer.bytes、send.buffer.bytes</p><ul><li>tcp、socket的接收和发送缓冲区大小</li></ul></li></ul><ul><li>kafka顺序<ul><li>可设置max.in.flight.request.pre.connection = 1、但会严重影响吞吐量</li><li>这点或许rabbitmq和rocketmq做的更好</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;kafka消息发送&lt;/li&gt;
&lt;li&gt;kafka消息同步发送&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka消息异步发送&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka生产者配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka数据流向图</title>
    <link href="https://www.wuxinvip.com/2018/11/27/message-queue/kafka/05/"/>
    <id>https://www.wuxinvip.com/2018/11/27/message-queue/kafka/05/</id>
    <published>2018-11-27T00:00:00.000Z</published>
    <updated>2018-12-06T07:29:54.724Z</updated>
    
    <content type="html"><![CDATA[<ul><li>kafka简单集群</li><li>kafka生产者</li><li>kafka消费者</li></ul><a id="more"></a><h2 id="kafka简单集群"><a href="#kafka简单集群" class="headerlink" title="kafka简单集群"></a>kafka简单集群</h2><p><img src="/img/kafka/01.jpg" alt="kafka简单集群"></p><h2 id="kafka生产者"><a href="#kafka生产者" class="headerlink" title="kafka生产者"></a>kafka生产者</h2><p><img src="/img/kafka/02.jpg" alt="kafka简单集群"></p><h2 id="kafka消费者"><a href="#kafka消费者" class="headerlink" title="kafka消费者"></a>kafka消费者</h2><p><img src="/img/kafka/03.jpg" alt="kafka简单集群"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;kafka简单集群&lt;/li&gt;
&lt;li&gt;kafka生产者&lt;/li&gt;
&lt;li&gt;kafka消费者&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka集群</title>
    <link href="https://www.wuxinvip.com/2018/11/26/message-queue/kafka/04/"/>
    <id>https://www.wuxinvip.com/2018/11/26/message-queue/kafka/04/</id>
    <published>2018-11-26T00:00:00.000Z</published>
    <updated>2018-12-06T08:58:52.997Z</updated>
    
    <content type="html"><![CDATA[<ul><li>需要多少个broker</li><li>broker配置</li><li>操作系统调优<ul><li>虚拟内存</li><li>磁盘</li><li>网络</li></ul></li></ul><a id="more"></a><h2 id="需要多少个broker"><a href="#需要多少个broker" class="headerlink" title="需要多少个broker"></a>需要多少个broker</h2><ul><li>两个因素：需要多少磁盘空间来保留数据、单个broker有多少空间可用</li><li>例：复制系数为1，整个集群要保留10TB数据、每个broker可以保留2TB、那么需要5个broker、复制系数为2，那就需要10个broker</li></ul><h2 id="broker配置"><a href="#broker配置" class="headerlink" title="broker配置"></a>broker配置</h2><ul><li>两个必须配置项：zookeeper.connect 、broker.id </li><li>整个集群连接一个服务管理中心、每个broker.id 集群内唯一、如果重复第二个启动会失败</li></ul><h2 id="操作系统调优"><a href="#操作系统调优" class="headerlink" title="操作系统调优"></a>操作系统调优</h2><ul><li><p>虚拟内存</p><ul><li>kafkaa会利用虚拟机内存做页面缓存、减少与磁盘交互数据、减小延迟</li><li>一般虚拟内存都会根据软件所需内存分配内存、如果分配不到了就是没有更多内存了</li></ul></li><li><p>磁盘</p><ul><li>EXT4</li><li>XFS：提供更好的性能、不需要额外的调优、批量磁盘写入具有更高的效率、可以提升整体IO吞吐量,现linux发行版多采用该磁盘、较少的调优可以获取更大的工作负荷</li></ul></li><li><p>网络</p><ul><li>tcp缓冲区</li><li>socket缓冲区</li><li>tcp时间窗 可以增加客户端传输数据效率、</li><li>net.ipv4.tcp_max_syn_backlog设置大于1024 可以接收更多的并发连接</li><li>net.core.netdev_max_backlog设置大于1000 有助于应对网络流量爆发、能允许更多的数据包排队等待内核处理</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;需要多少个broker&lt;/li&gt;
&lt;li&gt;broker配置&lt;/li&gt;
&lt;li&gt;操作系统调优&lt;ul&gt;
&lt;li&gt;虚拟内存&lt;/li&gt;
&lt;li&gt;磁盘&lt;/li&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka硬件选择</title>
    <link href="https://www.wuxinvip.com/2018/11/25/message-queue/kafka/03/"/>
    <id>https://www.wuxinvip.com/2018/11/25/message-queue/kafka/03/</id>
    <published>2018-11-25T00:00:00.000Z</published>
    <updated>2018-12-06T08:58:26.674Z</updated>
    
    <content type="html"><![CDATA[<ul><li>磁盘吞吐量</li><li>磁盘容量</li><li>内存</li><li>网络</li><li>CPU</li></ul><a id="more"></a><h2 id="磁盘吞吐量"><a href="#磁盘吞吐量" class="headerlink" title="磁盘吞吐量"></a>磁盘吞吐量</h2><ul><li>直接因素-影响生产者</li><li>磁盘写入越快、生成消息延迟越低</li></ul><h2 id="磁盘容量"><a href="#磁盘容量" class="headerlink" title="磁盘容量"></a>磁盘容量</h2><ul><li>如果每天存储消息量为1TB 、保存周期为7天、那么就需要7TB</li><li>除此之外还要保留10%额外空间</li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul><li>直接因素-影像消费者</li><li>运行kafka不需要jvm太大内存、大部分内存作为页面缓存、或者kafka日志片段</li><li>内存过低会影响消费者性能</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>直接因素-影响吞吐量</li><li>当内存瓶颈和磁盘瓶颈不存在的时候、如果网络服务接口成为瓶颈也会大大降低消费者和生产者的性能</li></ul><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><ul><li>kafka对cpu性能要求较低、但也不是随便就能糊弄</li><li>kafka有自己的消息压缩和解压、都需要使用cpu进行计算</li><li>另 无论什么时候cpu都涉及到并发性能</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;磁盘吞吐量&lt;/li&gt;
&lt;li&gt;磁盘容量&lt;/li&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka安装</title>
    <link href="https://www.wuxinvip.com/2018/11/24/message-queue/kafka/02/"/>
    <id>https://www.wuxinvip.com/2018/11/24/message-queue/kafka/02/</id>
    <published>2018-11-24T00:00:00.000Z</published>
    <updated>2018-12-05T09:58:10.323Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">官网</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">##前置</span><br><span class="line">java、zookeeper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/kafka/2.1.0/kafka_2.12-2.1.0.tgz</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">curl -L -O http://mirror.bit.edu.cn/apache/kafka/2.1.0/kafka_2.12-2.1.0.tgz</span><br><span class="line"></span><br><span class="line">tar -zxvf kafka_2.12-2.1.0.tgz</span><br><span class="line"></span><br><span class="line">cd kafka_2.12-2.1.0/bin</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./kafka-server-start.sh -daemon</span><br><span class="line"></span><br><span class="line">./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#test 主题上发布消息</span><br><span class="line">./kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#test 主题上接收消息</span><br><span class="line">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure><h2 id="broker配置"><a href="#broker配置" class="headerlink" title="broker配置"></a>broker配置</h2><p>1、broker.id</p><ul><li>集群唯一 整数</li></ul><p>2、port</p><ul><li>端口</li></ul><p>3、zookeeper.connect</p><ul><li>zk连接地址</li></ul><p>4、log.dirs</p><ul><li>log地址</li></ul><p>5、num.recovery.threads.pre.data.dir</p><ul><li>配置线程处理日志片段<ul><li>服务器正常启动、用于打开每个分区的日志片段</li><li>服务器崩溃后重启、用于检查和截短每个分区的日志片段</li><li>服务器正常关闭、用于关闭日志片段</li></ul></li></ul><p>默认每个日志目录只用一个线程、如果配置了num.recovery.threads.pre.data.dir=8<br>那么如果有3个log.dir 那么就需要24个线程</p><p>6、auto.create.topics.enable</p><ul><li>默认情况下、kafka会在以下三种情况下自动创建主题<ul><li>当一个生产者开始往主题写入消息时</li><li>当一个消费者开始从主题读取消息时</li><li>当任意一个客户端向主题发送元数据请求时</li></ul></li></ul><p>如果已经显示的创建主题、那么这里可以配置为auto.create.topics.enable=false</p><h2 id="topic默认配置"><a href="#topic默认配置" class="headerlink" title="topic默认配置"></a>topic默认配置</h2><p>1、num.partitions</p><ul><li>选定分区数量</li></ul><p>2、log.retention.ms</p><ul><li>根据时间保留数据和最后修改时间</li></ul><p>3、log.retention.bytes</p><ul><li>根据字节大小和时间保留数据</li></ul><p>4、log.segment.bytes</p><ul><li>使用时间戳获取偏移量</li></ul><p>5、log.segment.ms</p><ul><li>基于时间的日志片段和磁盘性能的影响</li></ul><p>6、message.max.bytes</p><ul><li>在服务端和客户端之间协调消息大小的配置</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;##前置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java、zookeeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://mirror.bit.edu.cn/apache/kafka/2.1.0/kafka_2.12-2.1.0.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -L -O http://mirror.bit.edu.cn/apache/kafka/2.1.0/kafka_2.12-2.1.0.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf kafka_2.12-2.1.0.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd kafka_2.12-2.1.0/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka简介</title>
    <link href="https://www.wuxinvip.com/2018/11/23/message-queue/kafka/01/"/>
    <id>https://www.wuxinvip.com/2018/11/23/message-queue/kafka/01/</id>
    <published>2018-11-23T00:00:00.000Z</published>
    <updated>2018-12-06T08:57:46.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>kafka最初为limkedIn的一个内部基础服务</li><li>最早的设计观念是、把数据看作流、消费者、订阅和发布各种各样的消息、这在大数据上应用非常广泛</li></ul><h2 id="组成部件"><a href="#组成部件" class="headerlink" title="组成部件"></a>组成部件</h2><ul><li>一个部件broker、每一个broker就是一个单独的服务器</li><li>每一个集群有一个broker作为集群控制器角色【分区选举】、与rocketmq区别是、rocketmq使用了nameserver作为注册中心</li><li>多级群中、kafka提供了一个mirrorMaker工具实现集群间消息复制</li><li>mirroMaker核心部分是一个生产者一个消费者、中间是一个队列、也是kafka的最基本原理、实际上在复杂的集群环境中、对于数据的可靠性更复杂些</li></ul><a id="more"></a><h2 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h2><ul><li>kafka的愿景做一个数据生态系统、提供消息发布和消息订阅、</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>活动跟踪、点击量</li><li>传递消息</li><li>度量指标和日志记录</li><li>提交日志</li><li>流处理<ul><li>结合hadoop做数据流的队列</li></ul></li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>rocketmq、rabbitmq、kafka<ul><li>没有谁好谁坏</li><li>kafka起源最早、解决消息流处理问题、最早解决监控平台对各个服务模块的消息监控、</li><li>rabbitmq、采用AMQP协议开发、建立了最早的消息模型、定义了消息驱动模式、</li><li>rocketmq、类似于kafka、不过语言是java、经历了阿里的双十一足以证明它的性能。</li></ul></li></ul><h2 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h2><ul><li>吞吐量优先、消息丢失小事、选择kafka、kafka的吞吐量要强一个量级</li><li>稳定不丢消息：rocketmq、tabbitmq、</li><li>rabbitmq底层是erlang语言、erlang语言特性、并发性能优秀、</li><li>rocketmq底层netty、异步机制优秀</li><li>实时性要求高、同时又要求高的吞吐量 rabbitmq</li><li>非实时性要求高、同时又要求高吞吐量 rocketmq</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kafka最初为limkedIn的一个内部基础服务&lt;/li&gt;
&lt;li&gt;最早的设计观念是、把数据看作流、消费者、订阅和发布各种各样的消息、这在大数据上应用非常广泛&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;组成部件&quot;&gt;&lt;a href=&quot;#组成部件&quot; class=&quot;headerlink&quot; title=&quot;组成部件&quot;&gt;&lt;/a&gt;组成部件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个部件broker、每一个broker就是一个单独的服务器&lt;/li&gt;
&lt;li&gt;每一个集群有一个broker作为集群控制器角色【分区选举】、与rocketmq区别是、rocketmq使用了nameserver作为注册中心&lt;/li&gt;
&lt;li&gt;多级群中、kafka提供了一个mirrorMaker工具实现集群间消息复制&lt;/li&gt;
&lt;li&gt;mirroMaker核心部分是一个生产者一个消费者、中间是一个队列、也是kafka的最基本原理、实际上在复杂的集群环境中、对于数据的可靠性更复杂些&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="kafka" scheme="https://www.wuxinvip.com/categories/java/message-queue/kafka/"/>
    
    
      <category term="kafka" scheme="https://www.wuxinvip.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq简介</title>
    <link href="https://www.wuxinvip.com/2018/11/23/message-queue/rabbitmq/01/"/>
    <id>https://www.wuxinvip.com/2018/11/23/message-queue/rabbitmq/01/</id>
    <published>2018-11-23T00:00:00.000Z</published>
    <updated>2018-12-05T01:55:13.806Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li><p>rocketmq、rabbitmq、kafka</p><ul><li>没有谁好谁坏</li><li>kafka起源最早、解决消息流处理问题、最早解决监控平台对各个服务模块的消息监控、</li><li>rabbitmq、采用AMQP协议开发、建立了最早的消息模型、定义了消息驱动模式、</li><li>rocketmq、类似于kafka、不过语言是java、经历了阿里的双十一足以证明它的性能。</li></ul></li><li><p>个人见解</p><ul><li>吞吐量优先、消息丢失小事、选择kafka、kafka的吞吐量要强一个量级</li><li>稳定不丢消息：rocketmq、tabbitmq、</li><li>rabbitmq底层是erlang语言、erlang语言特性、并发性能优秀、</li><li>rocketmq底层netty、异步机制优秀</li><li>实时性要求高、同时又要求高的吞吐量 rabbitmq</li><li>非实时性要求高、同时又要求高吞吐量 rocketmq</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;技术选型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;rocketmq、rabbitmq、kafka&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="message-queue" scheme="https://www.wuxinvip.com/categories/java/message-queue/"/>
    
      <category term="rabbitmq" scheme="https://www.wuxinvip.com/categories/java/message-queue/rabbitmq/"/>
    
    
      <category term="RabbitMQ" scheme="https://www.wuxinvip.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>linux 删除命令 rm 改为 mv</title>
    <link href="https://www.wuxinvip.com/2018/11/15/shell/shell-5/"/>
    <id>https://www.wuxinvip.com/2018/11/15/shell/shell-5/</id>
    <published>2018-11-15T00:00:00.000Z</published>
    <updated>2018-11-22T03:14:15.079Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>非常实用</p></li><li><p>rm </p></li><li><p>Linux下修改rm命令为mv，使rm命令原有功能失效</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.trash   #在家目录下创建一个.trash文件夹</span><br><span class="line">alias rm=del        #使用别名del代替rm   </span><br><span class="line">del()               #函数del，作用：将rm命令修改为mv命令</span><br><span class="line">&#123;  </span><br><span class="line">  mv $@ ~/.trash/  </span><br><span class="line">&#125;  </span><br><span class="line">cleardel()          #函数cleardel，作用：清空回收站.trash文件夹，y或Y表示确认，n表示取消</span><br><span class="line">&#123;  </span><br><span class="line">    read -p &quot;clear sure?[Input &apos;y&apos; or &apos;Y&apos; to confirm. &amp;&amp; Input &apos;n&apos; to cancel.]&quot; confirm   </span><br><span class="line">    [ $confirm == &apos;y&apos; ] || [ $confirm == &apos;Y&apos; ]  &amp;&amp; /bin/rm -rf ~/.trash/*   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后 加载配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>清空回收站<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleardel</span><br></pre></td></tr></table></figure></li></ul><p>注：rm命令已经删除，所以要彻底删除文件的话，可以先del删除文件到垃圾箱，然后进入~/.trash文件夹使用cleardel命令来彻底清除垃圾箱里的所有文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;非常实用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rm &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux下修改rm命令为mv，使rm命令原有功能失效&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p ~/.trash   #在家目录下创建一个.trash文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias rm=del        #使用别名del代替rm   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;del()               #函数del，作用：将rm命令修改为mv命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mv $@ ~/.trash/  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cleardel()          #函数cleardel，作用：清空回收站.trash文件夹，y或Y表示确认，n表示取消&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    read -p &amp;quot;clear sure?[Input &amp;apos;y&amp;apos; or &amp;apos;Y&amp;apos; to confirm. &amp;amp;&amp;amp; Input &amp;apos;n&amp;apos; to cancel.]&amp;quot; confirm   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ $confirm == &amp;apos;y&amp;apos; ] || [ $confirm == &amp;apos;Y&amp;apos; ]  &amp;amp;&amp;amp; /bin/rm -rf ~/.trash/*   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="shell" scheme="https://www.wuxinvip.com/categories/shell/"/>
    
    
      <category term="shell" scheme="https://www.wuxinvip.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>apache avro 序列化</title>
    <link href="https://www.wuxinvip.com/2018/11/10/essay/avro/"/>
    <id>https://www.wuxinvip.com/2018/11/10/essay/avro/</id>
    <published>2018-11-10T00:00:00.000Z</published>
    <updated>2018-11-21T06:23:20.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>当前序列化最常用的两种数据格式 json xml</p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p><a href="https://zh.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">wiki</a></p><p>常用包 jackson 、gson 【google】、fastjson【alibaba】</p><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p><a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a><br>现在用的比较少、起源比json要早很多、有点类似与html<br>应该是依据html的dom树形式创建的一套信息序列化</p><p>现在不常用了，原因是占用文件大部分内容的都是标签语言、实际有效信息占比太少 </p><a id="more"></a><h2 id="Avro"><a href="#Avro" class="headerlink" title="Avro"></a>Avro</h2><p>最近看kafka 组件 解决 服务端与客户端序列化问题是 看到这种解决方案 avro</p><p>文中也提到要想实现一种自己的序列化格式太难、需要考虑版本兼容、服务消费端和服务提供者都对序列化样式兼容<br>文中推荐了这个序列化方式 Avro</p><p>另 之前在研究 es搜索引擎 对于es的sql也是使用avro序列化方式</p><p>可以说是比较不错的一种解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;namespace&quot;: &quot;com.wuxinvip.data&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;record&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;User&quot;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &#123;&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;&#125;,</span><br><span class="line">    &#123;&quot;name&quot;: &quot;address&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种序列化 采用了一种注册表方式 双方都从注册表中获取一个schema 标准<br>然后采用这种标准来解析数据<br>形式类似于json 不过补充了json在迭代上的不足</p><p><img src="/img/essay/img/avro.webp" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h2&gt;&lt;p&gt;当前序列化最常用的两种数据格式 json xml&lt;/p&gt;
&lt;h2 id=&quot;json&quot;&gt;&lt;a href=&quot;#json&quot; class=&quot;headerlink&quot; title=&quot;json&quot;&gt;&lt;/a&gt;json&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/JSON&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常用包 jackson 、gson 【google】、fastjson【alibaba】&lt;/p&gt;
&lt;h2 id=&quot;xml&quot;&gt;&lt;a href=&quot;#xml&quot; class=&quot;headerlink&quot; title=&quot;xml&quot;&gt;&lt;/a&gt;xml&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/XML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XML&lt;/a&gt;&lt;br&gt;现在用的比较少、起源比json要早很多、有点类似与html&lt;br&gt;应该是依据html的dom树形式创建的一套信息序列化&lt;/p&gt;
&lt;p&gt;现在不常用了，原因是占用文件大部分内容的都是标签语言、实际有效信息占比太少 &lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="序列化" scheme="https://www.wuxinvip.com/categories/java/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    
      <category term="随笔" scheme="https://www.wuxinvip.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>centos7.4 MariaDB 安装</title>
    <link href="https://www.wuxinvip.com/2018/11/05/mysql/mysql-mariadb/"/>
    <id>https://www.wuxinvip.com/2018/11/05/mysql/mysql-mariadb/</id>
    <published>2018-11-05T00:00:00.000Z</published>
    <updated>2018-11-21T03:28:45.945Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">yum install mariadb mariadb-server</span><br><span class="line"></span><br><span class="line">==&gt; 启动mariadb</span><br><span class="line">systemctl start mariadb </span><br><span class="line"></span><br><span class="line">==&gt; 开机自启动</span><br><span class="line">systemctl enable mariadb </span><br><span class="line"></span><br><span class="line">==&gt; 设置 root密码等相关</span><br><span class="line">mysql_secure_installation </span><br><span class="line"></span><br><span class="line">==&gt; 测试登录！</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><a id="more"></a><p>会遇到的问题<br>mysql_secure_installation  输入密码 验权失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">关闭服务</span><br><span class="line">service mysql stop</span><br><span class="line"></span><br><span class="line">重置root</span><br><span class="line">mysqld_safe --skip-grant-tables &amp;</span><br><span class="line"></span><br><span class="line">登录</span><br><span class="line">mysql -u root</span><br><span class="line">切换database</span><br><span class="line">use mysql;</span><br><span class="line">修改密码</span><br><span class="line">update user SET PASSWORD=PASSWORD(&quot;&lt;my_new_password&gt;&quot;) WHERE USER=&apos;root&apos;; </span><br><span class="line">刷新权限表</span><br><span class="line">flush privileges;</span><br><span class="line">退出 </span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install mariadb mariadb-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; 启动mariadb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start mariadb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; 开机自启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable mariadb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; 设置 root密码等相关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql_secure_installation &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==&amp;gt; 测试登录！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="mysql" scheme="https://www.wuxinvip.com/categories/java/mysql/"/>
    
    
      <category term="MariaDB" scheme="https://www.wuxinvip.com/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>java 红黑树</title>
    <link href="https://www.wuxinvip.com/2018/11/01/jdk/jdk-tree/"/>
    <id>https://www.wuxinvip.com/2018/11/01/jdk/jdk-tree/</id>
    <published>2018-11-01T00:00:00.000Z</published>
    <updated>2018-11-19T07:40:11.570Z</updated>
    
    <content type="html"><![CDATA[<p>(1) 除了上面所说的”左旋”、”右旋”、”添加”、”删除”等基本操作之后，还实现了”遍历”、”查找”、”打印”、”最小值”、”最大值”、”创建”、”销毁”等接口。<br>(2) 函数接口大多分为内部接口和外部接口。内部接口是private函数，外部接口则是public函数。<br>(3) 测试代码中提供了”插入”和”删除”动作的检测开关。默认是关闭的，打开方法可以参考”代码中的说明”。建议在打开开关后，在草稿上自己动手绘制一下红黑树。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Java 语言: 红黑树</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class RBTree&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private RBTNode&lt;T&gt; mRoot;    // 根结点</span><br><span class="line"></span><br><span class="line">    private static final boolean RED   = false;</span><br><span class="line">    private static final boolean BLACK = true;</span><br><span class="line"></span><br><span class="line">    public class RBTNode&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line">        boolean color;        // 颜色</span><br><span class="line">        T key;                // 关键字(键值)</span><br><span class="line">        RBTNode&lt;T&gt; left;    // 左孩子</span><br><span class="line">        RBTNode&lt;T&gt; right;    // 右孩子</span><br><span class="line">        RBTNode&lt;T&gt; parent;    // 父结点</span><br><span class="line"></span><br><span class="line">        public RBTNode(T key, boolean color, RBTNode&lt;T&gt; parent, RBTNode&lt;T&gt; left, RBTNode&lt;T&gt; right) &#123;</span><br><span class="line">            this.key = key;</span><br><span class="line">            this.color = color;</span><br><span class="line">            this.parent = parent;</span><br><span class="line">            this.left = left;</span><br><span class="line">            this.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public T getKey() &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;&quot;+key+(this.color==RED?&quot;(R)&quot;:&quot;B&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RBTree() &#123;</span><br><span class="line">        mRoot=null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RBTNode&lt;T&gt; parentOf(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        return node!=null ? node.parent : null;</span><br><span class="line">    &#125;</span><br><span class="line">    private boolean colorOf(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        return node!=null ? node.color : BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">    private boolean isRed(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        return ((node!=null)&amp;&amp;(node.color==RED)) ? true : false;</span><br><span class="line">    &#125;</span><br><span class="line">    private boolean isBlack(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        return !isRed(node);</span><br><span class="line">    &#125;</span><br><span class="line">    private void setBlack(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        if (node!=null)</span><br><span class="line">            node.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">    private void setRed(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        if (node!=null)</span><br><span class="line">            node.color = RED;</span><br><span class="line">    &#125;</span><br><span class="line">    private void setParent(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent) &#123;</span><br><span class="line">        if (node!=null)</span><br><span class="line">            node.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    private void setColor(RBTNode&lt;T&gt; node, boolean color) &#123;</span><br><span class="line">        if (node!=null)</span><br><span class="line">            node.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 前序遍历&quot;红黑树&quot;</span><br><span class="line">     */</span><br><span class="line">    private void preOrder(RBTNode&lt;T&gt; tree) &#123;</span><br><span class="line">        if(tree != null) &#123;</span><br><span class="line">            System.out.print(tree.key+&quot; &quot;);</span><br><span class="line">            preOrder(tree.left);</span><br><span class="line">            preOrder(tree.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void preOrder() &#123;</span><br><span class="line">        preOrder(mRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 中序遍历&quot;红黑树&quot;</span><br><span class="line">     */</span><br><span class="line">    private void inOrder(RBTNode&lt;T&gt; tree) &#123;</span><br><span class="line">        if(tree != null) &#123;</span><br><span class="line">            inOrder(tree.left);</span><br><span class="line">            System.out.print(tree.key+&quot; &quot;);</span><br><span class="line">            inOrder(tree.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inOrder() &#123;</span><br><span class="line">        inOrder(mRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 后序遍历&quot;红黑树&quot;</span><br><span class="line">     */</span><br><span class="line">    private void postOrder(RBTNode&lt;T&gt; tree) &#123;</span><br><span class="line">        if(tree != null)</span><br><span class="line">        &#123;</span><br><span class="line">            postOrder(tree.left);</span><br><span class="line">            postOrder(tree.right);</span><br><span class="line">            System.out.print(tree.key+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void postOrder() &#123;</span><br><span class="line">        postOrder(mRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * (递归实现)查找&quot;红黑树x&quot;中键值为key的节点</span><br><span class="line">     */</span><br><span class="line">    private RBTNode&lt;T&gt; search(RBTNode&lt;T&gt; x, T key) &#123;</span><br><span class="line">        if (x==null)</span><br><span class="line">            return x;</span><br><span class="line"></span><br><span class="line">        int cmp = key.compareTo(x.key);</span><br><span class="line">        if (cmp &lt; 0)</span><br><span class="line">            return search(x.left, key);</span><br><span class="line">        else if (cmp &gt; 0)</span><br><span class="line">            return search(x.right, key);</span><br><span class="line">        else</span><br><span class="line">            return x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RBTNode&lt;T&gt; search(T key) &#123;</span><br><span class="line">        return search(mRoot, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * (非递归实现)查找&quot;红黑树x&quot;中键值为key的节点</span><br><span class="line">     */</span><br><span class="line">    private RBTNode&lt;T&gt; iterativeSearch(RBTNode&lt;T&gt; x, T key) &#123;</span><br><span class="line">        while (x!=null) &#123;</span><br><span class="line">            int cmp = key.compareTo(x.key);</span><br><span class="line"></span><br><span class="line">            if (cmp &lt; 0) </span><br><span class="line">                x = x.left;</span><br><span class="line">            else if (cmp &gt; 0) </span><br><span class="line">                x = x.right;</span><br><span class="line">            else</span><br><span class="line">                return x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RBTNode&lt;T&gt; iterativeSearch(T key) &#123;</span><br><span class="line">        return iterativeSearch(mRoot, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 查找最小结点：返回tree为根结点的红黑树的最小结点。</span><br><span class="line">     */</span><br><span class="line">    private RBTNode&lt;T&gt; minimum(RBTNode&lt;T&gt; tree) &#123;</span><br><span class="line">        if (tree == null)</span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line">        while(tree.left != null)</span><br><span class="line">            tree = tree.left;</span><br><span class="line">        return tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T minimum() &#123;</span><br><span class="line">        RBTNode&lt;T&gt; p = minimum(mRoot);</span><br><span class="line">        if (p != null)</span><br><span class="line">            return p.key;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    /* </span><br><span class="line">     * 查找最大结点：返回tree为根结点的红黑树的最大结点。</span><br><span class="line">     */</span><br><span class="line">    private RBTNode&lt;T&gt; maximum(RBTNode&lt;T&gt; tree) &#123;</span><br><span class="line">        if (tree == null)</span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line">        while(tree.right != null)</span><br><span class="line">            tree = tree.right;</span><br><span class="line">        return tree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T maximum() &#123;</span><br><span class="line">        RBTNode&lt;T&gt; p = maximum(mRoot);</span><br><span class="line">        if (p != null)</span><br><span class="line">            return p.key;</span><br><span class="line"></span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 找结点(x)的后继结点。即，查找&quot;红黑树中数据值大于该结点&quot;的&quot;最小结点&quot;。</span><br><span class="line">     */</span><br><span class="line">    public RBTNode&lt;T&gt; successor(RBTNode&lt;T&gt; x) &#123;</span><br><span class="line">        // 如果x存在右孩子，则&quot;x的后继结点&quot;为 &quot;以其右孩子为根的子树的最小结点&quot;。</span><br><span class="line">        if (x.right != null)</span><br><span class="line">            return minimum(x.right);</span><br><span class="line"></span><br><span class="line">        // 如果x没有右孩子。则x有以下两种可能：</span><br><span class="line">        // (01) x是&quot;一个左孩子&quot;，则&quot;x的后继结点&quot;为 &quot;它的父结点&quot;。</span><br><span class="line">        // (02) x是&quot;一个右孩子&quot;，则查找&quot;x的最低的父结点，并且该父结点要具有左孩子&quot;，找到的这个&quot;最低的父结点&quot;就是&quot;x的后继结点&quot;。</span><br><span class="line">        RBTNode&lt;T&gt; y = x.parent;</span><br><span class="line">        while ((y!=null) &amp;&amp; (x==y.right)) &#123;</span><br><span class="line">            x = y;</span><br><span class="line">            y = y.parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return y;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    /* </span><br><span class="line">     * 找结点(x)的前驱结点。即，查找&quot;红黑树中数据值小于该结点&quot;的&quot;最大结点&quot;。</span><br><span class="line">     */</span><br><span class="line">    public RBTNode&lt;T&gt; predecessor(RBTNode&lt;T&gt; x) &#123;</span><br><span class="line">        // 如果x存在左孩子，则&quot;x的前驱结点&quot;为 &quot;以其左孩子为根的子树的最大结点&quot;。</span><br><span class="line">        if (x.left != null)</span><br><span class="line">            return maximum(x.left);</span><br><span class="line"></span><br><span class="line">        // 如果x没有左孩子。则x有以下两种可能：</span><br><span class="line">        // (01) x是&quot;一个右孩子&quot;，则&quot;x的前驱结点&quot;为 &quot;它的父结点&quot;。</span><br><span class="line">        // (01) x是&quot;一个左孩子&quot;，则查找&quot;x的最低的父结点，并且该父结点要具有右孩子&quot;，找到的这个&quot;最低的父结点&quot;就是&quot;x的前驱结点&quot;。</span><br><span class="line">        RBTNode&lt;T&gt; y = x.parent;</span><br><span class="line">        while ((y!=null) &amp;&amp; (x==y.left)) &#123;</span><br><span class="line">            x = y;</span><br><span class="line">            y = y.parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 对红黑树的节点(x)进行左旋转</span><br><span class="line">     *</span><br><span class="line">     * 左旋示意图(对节点x进行左旋)：</span><br><span class="line">     *      px                              px</span><br><span class="line">     *     /                               /</span><br><span class="line">     *    x                               y                </span><br><span class="line">     *   /  \      --(左旋)-.           / \                #</span><br><span class="line">     *  lx   y                          x  ry     </span><br><span class="line">     *     /   \                       /  \</span><br><span class="line">     *    ly   ry                     lx  ly  </span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    private void leftRotate(RBTNode&lt;T&gt; x) &#123;</span><br><span class="line">        // 设置x的右孩子为y</span><br><span class="line">        RBTNode&lt;T&gt; y = x.right;</span><br><span class="line"></span><br><span class="line">        // 将 “y的左孩子” 设为 “x的右孩子”；</span><br><span class="line">        // 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span><br><span class="line">        x.right = y.left;</span><br><span class="line">        if (y.left != null)</span><br><span class="line">            y.left.parent = x;</span><br><span class="line"></span><br><span class="line">        // 将 “x的父亲” 设为 “y的父亲”</span><br><span class="line">        y.parent = x.parent;</span><br><span class="line"></span><br><span class="line">        if (x.parent == null) &#123;</span><br><span class="line">            this.mRoot = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (x.parent.left == x)</span><br><span class="line">                x.parent.left = y;    // 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span><br><span class="line">            else</span><br><span class="line">                x.parent.right = y;    // 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 将 “x” 设为 “y的左孩子”</span><br><span class="line">        y.left = x;</span><br><span class="line">        // 将 “x的父节点” 设为 “y”</span><br><span class="line">        x.parent = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 对红黑树的节点(y)进行右旋转</span><br><span class="line">     *</span><br><span class="line">     * 右旋示意图(对节点y进行左旋)：</span><br><span class="line">     *            py                               py</span><br><span class="line">     *           /                                /</span><br><span class="line">     *          y                                x                  </span><br><span class="line">     *         /  \      --(右旋)-.            /  \                     #</span><br><span class="line">     *        x   ry                           lx   y  </span><br><span class="line">     *       / \                                   / \                   #</span><br><span class="line">     *      lx  rx                                rx  ry</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    private void rightRotate(RBTNode&lt;T&gt; y) &#123;</span><br><span class="line">        // 设置x是当前节点的左孩子。</span><br><span class="line">        RBTNode&lt;T&gt; x = y.left;</span><br><span class="line"></span><br><span class="line">        // 将 “x的右孩子” 设为 “y的左孩子”；</span><br><span class="line">        // 如果&quot;x的右孩子&quot;不为空的话，将 “y” 设为 “x的右孩子的父亲”</span><br><span class="line">        y.left = x.right;</span><br><span class="line">        if (x.right != null)</span><br><span class="line">            x.right.parent = y;</span><br><span class="line"></span><br><span class="line">        // 将 “y的父亲” 设为 “x的父亲”</span><br><span class="line">        x.parent = y.parent;</span><br><span class="line"></span><br><span class="line">        if (y.parent == null) &#123;</span><br><span class="line">            this.mRoot = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (y == y.parent.right)</span><br><span class="line">                y.parent.right = x;    // 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span><br><span class="line">            else</span><br><span class="line">                y.parent.left = x;    // (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将 “y” 设为 “x的右孩子”</span><br><span class="line">        x.right = y;</span><br><span class="line"></span><br><span class="line">        // 将 “y的父节点” 设为 “x”</span><br><span class="line">        y.parent = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 红黑树插入修正函数</span><br><span class="line">     *</span><br><span class="line">     * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span><br><span class="line">     * 目的是将它重新塑造成一颗红黑树。</span><br><span class="line">     *</span><br><span class="line">     * 参数说明：</span><br><span class="line">     *     node 插入的结点        // 对应《算法导论》中的z</span><br><span class="line">     */</span><br><span class="line">    private void insertFixUp(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        RBTNode&lt;T&gt; parent, gparent;</span><br><span class="line"></span><br><span class="line">        // 若“父节点存在，并且父节点的颜色是红色”</span><br><span class="line">        while (((parent = parentOf(node))!=null) &amp;&amp; isRed(parent)) &#123;</span><br><span class="line">            gparent = parentOf(parent);</span><br><span class="line"></span><br><span class="line">            //若“父节点”是“祖父节点的左孩子”</span><br><span class="line">            if (parent == gparent.left) &#123;</span><br><span class="line">                // Case 1条件：叔叔节点是红色</span><br><span class="line">                RBTNode&lt;T&gt; uncle = gparent.right;</span><br><span class="line">                if ((uncle!=null) &amp;&amp; isRed(uncle)) &#123;</span><br><span class="line">                    setBlack(uncle);</span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setRed(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Case 2条件：叔叔是黑色，且当前节点是右孩子</span><br><span class="line">                if (parent.right == node) &#123;</span><br><span class="line">                    RBTNode&lt;T&gt; tmp;</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                    tmp = parent;</span><br><span class="line">                    parent = node;</span><br><span class="line">                    node = tmp;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Case 3条件：叔叔是黑色，且当前节点是左孩子。</span><br><span class="line">                setBlack(parent);</span><br><span class="line">                setRed(gparent);</span><br><span class="line">                rightRotate(gparent);</span><br><span class="line">            &#125; else &#123;    //若“z的父节点”是“z的祖父节点的右孩子”</span><br><span class="line">                // Case 1条件：叔叔节点是红色</span><br><span class="line">                RBTNode&lt;T&gt; uncle = gparent.left;</span><br><span class="line">                if ((uncle!=null) &amp;&amp; isRed(uncle)) &#123;</span><br><span class="line">                    setBlack(uncle);</span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setRed(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Case 2条件：叔叔是黑色，且当前节点是左孩子</span><br><span class="line">                if (parent.left == node) &#123;</span><br><span class="line">                    RBTNode&lt;T&gt; tmp;</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                    tmp = parent;</span><br><span class="line">                    parent = node;</span><br><span class="line">                    node = tmp;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Case 3条件：叔叔是黑色，且当前节点是右孩子。</span><br><span class="line">                setBlack(parent);</span><br><span class="line">                setRed(gparent);</span><br><span class="line">                leftRotate(gparent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将根节点设为黑色</span><br><span class="line">        setBlack(this.mRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 将结点插入到红黑树中</span><br><span class="line">     *</span><br><span class="line">     * 参数说明：</span><br><span class="line">     *     node 插入的结点        // 对应《算法导论》中的node</span><br><span class="line">     */</span><br><span class="line">    private void insert(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        int cmp;</span><br><span class="line">        RBTNode&lt;T&gt; y = null;</span><br><span class="line">        RBTNode&lt;T&gt; x = this.mRoot;</span><br><span class="line"></span><br><span class="line">        // 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span><br><span class="line">        while (x != null) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            cmp = node.key.compareTo(x.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                x = x.left;</span><br><span class="line">            else</span><br><span class="line">                x = x.right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.parent = y;</span><br><span class="line">        if (y!=null) &#123;</span><br><span class="line">            cmp = node.key.compareTo(y.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                y.left = node;</span><br><span class="line">            else</span><br><span class="line">                y.right = node;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.mRoot = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 2. 设置节点的颜色为红色</span><br><span class="line">        node.color = RED;</span><br><span class="line"></span><br><span class="line">        // 3. 将它重新修正为一颗二叉查找树</span><br><span class="line">        insertFixUp(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 新建结点(key)，并将其插入到红黑树中</span><br><span class="line">     *</span><br><span class="line">     * 参数说明：</span><br><span class="line">     *     key 插入结点的键值</span><br><span class="line">     */</span><br><span class="line">    public void insert(T key) &#123;</span><br><span class="line">        RBTNode&lt;T&gt; node=new RBTNode&lt;T&gt;(key,BLACK,null,null,null);</span><br><span class="line"></span><br><span class="line">        // 如果新建结点失败，则返回。</span><br><span class="line">        if (node != null)</span><br><span class="line">            insert(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 红黑树删除修正函数</span><br><span class="line">     *</span><br><span class="line">     * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span><br><span class="line">     * 目的是将它重新塑造成一颗红黑树。</span><br><span class="line">     *</span><br><span class="line">     * 参数说明：</span><br><span class="line">     *     node 待修正的节点</span><br><span class="line">     */</span><br><span class="line">    private void removeFixUp(RBTNode&lt;T&gt; node, RBTNode&lt;T&gt; parent) &#123;</span><br><span class="line">        RBTNode&lt;T&gt; other;</span><br><span class="line"></span><br><span class="line">        while ((node==null || isBlack(node)) &amp;&amp; (node != this.mRoot)) &#123;</span><br><span class="line">            if (parent.left == node) &#123;</span><br><span class="line">                other = parent.right;</span><br><span class="line">                if (isRed(other)) &#123;</span><br><span class="line">                    // Case 1: x的兄弟w是红色的  </span><br><span class="line">                    setBlack(other);</span><br><span class="line">                    setRed(parent);</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                    other = parent.right;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if ((other.left==null || isBlack(other.left)) &amp;&amp;</span><br><span class="line">                    (other.right==null || isBlack(other.right))) &#123;</span><br><span class="line">                    // Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span><br><span class="line">                    setRed(other);</span><br><span class="line">                    node = parent;</span><br><span class="line">                    parent = parentOf(node);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    if (other.right==null || isBlack(other.right)) &#123;</span><br><span class="line">                        // Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span><br><span class="line">                        setBlack(other.left);</span><br><span class="line">                        setRed(other);</span><br><span class="line">                        rightRotate(other);</span><br><span class="line">                        other = parent.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span><br><span class="line">                    setColor(other, colorOf(parent));</span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setBlack(other.right);</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                    node = this.mRoot;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                other = parent.left;</span><br><span class="line">                if (isRed(other)) &#123;</span><br><span class="line">                    // Case 1: x的兄弟w是红色的  </span><br><span class="line">                    setBlack(other);</span><br><span class="line">                    setRed(parent);</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                    other = parent.left;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if ((other.left==null || isBlack(other.left)) &amp;&amp;</span><br><span class="line">                    (other.right==null || isBlack(other.right))) &#123;</span><br><span class="line">                    // Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span><br><span class="line">                    setRed(other);</span><br><span class="line">                    node = parent;</span><br><span class="line">                    parent = parentOf(node);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    if (other.left==null || isBlack(other.left)) &#123;</span><br><span class="line">                        // Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span><br><span class="line">                        setBlack(other.right);</span><br><span class="line">                        setRed(other);</span><br><span class="line">                        leftRotate(other);</span><br><span class="line">                        other = parent.left;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    // Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span><br><span class="line">                    setColor(other, colorOf(parent));</span><br><span class="line">                    setBlack(parent);</span><br><span class="line">                    setBlack(other.left);</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                    node = this.mRoot;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (node!=null)</span><br><span class="line">            setBlack(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 删除结点(node)，并返回被删除的结点</span><br><span class="line">     *</span><br><span class="line">     * 参数说明：</span><br><span class="line">     *     node 删除的结点</span><br><span class="line">     */</span><br><span class="line">    private void remove(RBTNode&lt;T&gt; node) &#123;</span><br><span class="line">        RBTNode&lt;T&gt; child, parent;</span><br><span class="line">        boolean color;</span><br><span class="line"></span><br><span class="line">        // 被删除节点的&quot;左右孩子都不为空&quot;的情况。</span><br><span class="line">        if ( (node.left!=null) &amp;&amp; (node.right!=null) ) &#123;</span><br><span class="line">            // 被删节点的后继节点。(称为&quot;取代节点&quot;)</span><br><span class="line">            // 用它来取代&quot;被删节点&quot;的位置，然后再将&quot;被删节点&quot;去掉。</span><br><span class="line">            RBTNode&lt;T&gt; replace = node;</span><br><span class="line"></span><br><span class="line">            // 获取后继节点</span><br><span class="line">            replace = replace.right;</span><br><span class="line">            while (replace.left != null)</span><br><span class="line">                replace = replace.left;</span><br><span class="line"></span><br><span class="line">            // &quot;node节点&quot;不是根节点(只有根节点不存在父节点)</span><br><span class="line">            if (parentOf(node)!=null) &#123;</span><br><span class="line">                if (parentOf(node).left == node)</span><br><span class="line">                    parentOf(node).left = replace;</span><br><span class="line">                else</span><br><span class="line">                    parentOf(node).right = replace;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // &quot;node节点&quot;是根节点，更新根节点。</span><br><span class="line">                this.mRoot = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // child是&quot;取代节点&quot;的右孩子，也是需要&quot;调整的节点&quot;。</span><br><span class="line">            // &quot;取代节点&quot;肯定不存在左孩子！因为它是一个后继节点。</span><br><span class="line">            child = replace.right;</span><br><span class="line">            parent = parentOf(replace);</span><br><span class="line">            // 保存&quot;取代节点&quot;的颜色</span><br><span class="line">            color = colorOf(replace);</span><br><span class="line"></span><br><span class="line">            // &quot;被删除节点&quot;是&quot;它的后继节点的父节点&quot;</span><br><span class="line">            if (parent == node) &#123;</span><br><span class="line">                parent = replace;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // child不为空</span><br><span class="line">                if (child!=null)</span><br><span class="line">                    setParent(child, parent);</span><br><span class="line">                parent.left = child;</span><br><span class="line"></span><br><span class="line">                replace.right = node.right;</span><br><span class="line">                setParent(node.right, replace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            replace.parent = node.parent;</span><br><span class="line">            replace.color = node.color;</span><br><span class="line">            replace.left = node.left;</span><br><span class="line">            node.left.parent = replace;</span><br><span class="line"></span><br><span class="line">            if (color == BLACK)</span><br><span class="line">                removeFixUp(child, parent);</span><br><span class="line"></span><br><span class="line">            node = null;</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (node.left !=null) &#123;</span><br><span class="line">            child = node.left;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            child = node.right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parent = node.parent;</span><br><span class="line">        // 保存&quot;取代节点&quot;的颜色</span><br><span class="line">        color = node.color;</span><br><span class="line"></span><br><span class="line">        if (child!=null)</span><br><span class="line">            child.parent = parent;</span><br><span class="line"></span><br><span class="line">        // &quot;node节点&quot;不是根节点</span><br><span class="line">        if (parent!=null) &#123;</span><br><span class="line">            if (parent.left == node)</span><br><span class="line">                parent.left = child;</span><br><span class="line">            else</span><br><span class="line">                parent.right = child;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.mRoot = child;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (color == BLACK)</span><br><span class="line">            removeFixUp(child, parent);</span><br><span class="line">        node = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">     * 删除结点(z)，并返回被删除的结点</span><br><span class="line">     *</span><br><span class="line">     * 参数说明：</span><br><span class="line">     *     tree 红黑树的根结点</span><br><span class="line">     *     z 删除的结点</span><br><span class="line">     */</span><br><span class="line">    public void remove(T key) &#123;</span><br><span class="line">        RBTNode&lt;T&gt; node; </span><br><span class="line"></span><br><span class="line">        if ((node = search(mRoot, key)) != null)</span><br><span class="line">            remove(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 销毁红黑树</span><br><span class="line">     */</span><br><span class="line">    private void destroy(RBTNode&lt;T&gt; tree) &#123;</span><br><span class="line">        if (tree==null)</span><br><span class="line">            return ;</span><br><span class="line"></span><br><span class="line">        if (tree.left != null)</span><br><span class="line">            destroy(tree.left);</span><br><span class="line">        if (tree.right != null)</span><br><span class="line">            destroy(tree.right);</span><br><span class="line"></span><br><span class="line">        tree=null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        destroy(mRoot);</span><br><span class="line">        mRoot = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 打印&quot;红黑树&quot;</span><br><span class="line">     *</span><br><span class="line">     * key        -- 节点的键值 </span><br><span class="line">     * direction  --  0，表示该节点是根节点;</span><br><span class="line">     *               -1，表示该节点是它的父结点的左孩子;</span><br><span class="line">     *                1，表示该节点是它的父结点的右孩子。</span><br><span class="line">     */</span><br><span class="line">    private void print(RBTNode&lt;T&gt; tree, T key, int direction) &#123;</span><br><span class="line"></span><br><span class="line">        if(tree != null) &#123;</span><br><span class="line"></span><br><span class="line">            if(direction==0)    // tree是根节点</span><br><span class="line">                System.out.printf(&quot;%2d(B) is root\n&quot;, tree.key);</span><br><span class="line">            else                // tree是分支节点</span><br><span class="line">                System.out.printf(&quot;%2d(%s) is %2d&apos;s %6s child\n&quot;, tree.key, isRed(tree)?&quot;R&quot;:&quot;B&quot;, key, direction==1?&quot;right&quot; : &quot;left&quot;);</span><br><span class="line"></span><br><span class="line">            print(tree.left, tree.key, -1);</span><br><span class="line">            print(tree.right,tree.key,  1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void print() &#123;</span><br><span class="line">        if (mRoot != null)</span><br><span class="line">            print(mRoot, mRoot.key, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Java 语言: 二叉查找树</span><br><span class="line"> */</span><br><span class="line">public class RBTreeTest &#123;</span><br><span class="line"></span><br><span class="line">    private static final int a[] = &#123;10, 40, 30, 60, 90, 70, 20, 50, 80&#125;;</span><br><span class="line">    private static final boolean mDebugInsert = false;    // &quot;插入&quot;动作的检测开关(false，关闭；true，打开)</span><br><span class="line">    private static final boolean mDebugDelete = false;    // &quot;删除&quot;动作的检测开关(false，关闭；true，打开)</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i, ilen = a.length;</span><br><span class="line">        RBTree&lt;Integer&gt; tree=new RBTree&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.printf(&quot;== 原始数据: &quot;);</span><br><span class="line">        for(i=0; i&lt;ilen; i++)</span><br><span class="line">            System.out.printf(&quot;%d &quot;, a[i]);</span><br><span class="line">        System.out.printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        for(i=0; i&lt;ilen; i++) &#123;</span><br><span class="line">            tree.insert(a[i]);</span><br><span class="line">            // 设置mDebugInsert=true,测试&quot;添加函数&quot;</span><br><span class="line">            if (mDebugInsert) &#123;</span><br><span class="line">                System.out.printf(&quot;== 添加节点: %d\n&quot;, a[i]);</span><br><span class="line">                System.out.printf(&quot;== 树的详细信息: \n&quot;);</span><br><span class="line">                tree.print();</span><br><span class="line">                System.out.printf(&quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.printf(&quot;== 前序遍历: &quot;);</span><br><span class="line">        tree.preOrder();</span><br><span class="line"></span><br><span class="line">        System.out.printf(&quot;\n== 中序遍历: &quot;);</span><br><span class="line">        tree.inOrder();</span><br><span class="line"></span><br><span class="line">        System.out.printf(&quot;\n== 后序遍历: &quot;);</span><br><span class="line">        tree.postOrder();</span><br><span class="line">        System.out.printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.printf(&quot;== 最小值: %s\n&quot;, tree.minimum());</span><br><span class="line">        System.out.printf(&quot;== 最大值: %s\n&quot;, tree.maximum());</span><br><span class="line">        System.out.printf(&quot;== 树的详细信息: \n&quot;);</span><br><span class="line">        tree.print();</span><br><span class="line">        System.out.printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        // 设置mDebugDelete=true,测试&quot;删除函数&quot;</span><br><span class="line">        if (mDebugDelete) &#123;</span><br><span class="line">            for(i=0; i&lt;ilen; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                tree.remove(a[i]);</span><br><span class="line"></span><br><span class="line">                System.out.printf(&quot;== 删除节点: %d\n&quot;, a[i]);</span><br><span class="line">                System.out.printf(&quot;== 树的详细信息: \n&quot;);</span><br><span class="line">                tree.print();</span><br><span class="line">                System.out.printf(&quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 销毁二叉树</span><br><span class="line">        tree.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>console.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">== 原始数据: 10 40 30 60 90 70 20 50 80 </span><br><span class="line">== 前序遍历: 30 10 20 60 40 50 80 70 90 </span><br><span class="line">== 中序遍历: 10 20 30 40 50 60 70 80 90 </span><br><span class="line">== 后序遍历: 20 10 50 40 70 90 80 60 30 </span><br><span class="line">== 最小值: 10</span><br><span class="line">== 最大值: 90</span><br><span class="line">== 树的详细信息: </span><br><span class="line">30(B) is root</span><br><span class="line">10(B) is 30&apos;s   left child</span><br><span class="line">20(R) is 10&apos;s  right child</span><br><span class="line">60(R) is 30&apos;s  right child</span><br><span class="line">40(B) is 60&apos;s   left child</span><br><span class="line">50(R) is 40&apos;s  right child</span><br><span class="line">80(B) is 60&apos;s  right child</span><br><span class="line">70(R) is 80&apos;s   left child</span><br><span class="line">90(R) is 80&apos;s  right child</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(1) 除了上面所说的”左旋”、”右旋”、”添加”、”删除”等基本操作之后，还实现了”遍历”、”查找”、”打印”、”最小值”、”最大值”、”创建”、”销毁”等接口。&lt;br&gt;(2) 函数接口大多分为内部接口和外部接口。内部接口是private函数，外部接口则是public函数。&lt;br&gt;(3) 测试代码中提供了”插入”和”删除”动作的检测开关。默认是关闭的，打开方法可以参考”代码中的说明”。建议在打开开关后，在草稿上自己动手绘制一下红黑树。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.wuxinvip.com/categories/java/"/>
    
      <category term="jdk" scheme="https://www.wuxinvip.com/categories/java/jdk/"/>
    
    
      <category term="jdk" scheme="https://www.wuxinvip.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>集群调度框架总结</title>
    <link href="https://www.wuxinvip.com/2018/10/31/service-design/design-7/"/>
    <id>https://www.wuxinvip.com/2018/10/31/service-design/design-7/</id>
    <published>2018-10-31T00:00:00.000Z</published>
    <updated>2018-11-19T08:09:19.093Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>spring cloud task【springcloud服务集成各种调度框架封装包】</p></li><li><p>spring quarts【现有常用调度框架】</p></li><li><p>TBSchedule【淘宝分布式调度】</p></li><li><p><a href="http://www.infoq.com/cn/articles/firmament-a-cluster-job-scheduler" target="_blank" rel="noopener">Firmament - 大规模集群任务调度</a></p></li><li><p><a href="http://www.firmament.io/blog/scheduler-architectures.html" target="_blank" rel="noopener">集群调度器体系结构的演变。</a></p></li></ul><h3 id="java调度"><a href="#java调度" class="headerlink" title="java调度"></a>java调度</h3><h4 id="推荐两款比较不错的调度框架"><a href="#推荐两款比较不错的调度框架" class="headerlink" title="推荐两款比较不错的调度框架"></a>推荐两款比较不错的调度框架</h4><a id="more"></a><p><a href="https://github.com/xuxueli/xxl-job.git" target="_blank" rel="noopener">xxl-job</a> </p><ul><li>开源较早 拥有自带的rpc机制、功能比较健全、http远程调度支持的还不是很好 不过可以使用java脚本形式进行调度封装</li><li>数据库使用mysql和oracle</li></ul><p><a href="https://github.com/ihaolin/antares.git" target="_blank" rel="noopener">分布式任务调度平台(Distributed Job Schedule Platform)</a></p><ul><li>使用zk作为注册中心、redis作为存储位置、较为重量级</li></ul><p>依据项目中的注册中心选择不同的任务调度吧</p><p>xxl-job下阶段结合eureka注册中心就比较不错了、目前spring cloud比较火、如果不能积极嵌入到新的微服务中、用的也就越来越少<br>不过稍微改动下注册机制、也不是很困难的是、一个定时线程不断地获取注册中心的服务列表、然后保存到本地作为服务app、便于集群管理</p><p>最后、对于所有开源的产品、尽量测试好了在上生产环境、否则因为生产较为复杂的环境gg掉就悲催了、<br>有些开源产品一遇到高并发就gg、以前碰到过一例</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;spring cloud task【springcloud服务集成各种调度框架封装包】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spring quarts【现有常用调度框架】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TBSchedule【淘宝分布式调度】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/firmament-a-cluster-job-scheduler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Firmament - 大规模集群任务调度&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.firmament.io/blog/scheduler-architectures.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;集群调度器体系结构的演变。&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;java调度&quot;&gt;&lt;a href=&quot;#java调度&quot; class=&quot;headerlink&quot; title=&quot;java调度&quot;&gt;&lt;/a&gt;java调度&lt;/h3&gt;&lt;h4 id=&quot;推荐两款比较不错的调度框架&quot;&gt;&lt;a href=&quot;#推荐两款比较不错的调度框架&quot; class=&quot;headerlink&quot; title=&quot;推荐两款比较不错的调度框架&quot;&gt;&lt;/a&gt;推荐两款比较不错的调度框架&lt;/h4&gt;
    
    </summary>
    
      <category term="服务架构" scheme="https://www.wuxinvip.com/categories/%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
      <category term="集群调度" scheme="https://www.wuxinvip.com/categories/%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/%E9%9B%86%E7%BE%A4%E8%B0%83%E5%BA%A6/"/>
    
    
      <category term="服务架构" scheme="https://www.wuxinvip.com/tags/%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
</feed>
